name: vmware/vcd
resources:
    vcd_catalog:
        subCategory: ""
        description: Provides a VMware Cloud Director catalog resource. This can be used to create and delete a catalog.
        name: vcd_catalog
        title: vcd_catalog
        examples:
            - name: myNewCatalog
              manifest: |-
                {
                  "delete_force": true,
                  "delete_recursive": true,
                  "description": "catalog for files",
                  "name": "my-catalog",
                  "org": "my-org"
                }
            - name: myNewCatalog
              manifest: |-
                {
                  "delete_force": true,
                  "delete_recursive": true,
                  "description": "catalog for files",
                  "name": "my-catalog",
                  "org": "my-org",
                  "storage_profile_id": "${data.vcd_storage_profile.sp1.id}"
                }
              references:
                storage_profile_id: data.vcd_storage_profile.sp1.id
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: my-catalog
              manifest: |-
                {
                  "delete_force": true,
                  "delete_recursive": true,
                  "name": "my-catalog",
                  "org": "my-org"
                }
        argumentDocs:
            cache_enabled: '- (Optional, v3.6+) Enable early catalog export to optimize synchronization. Default is false. It is recommended to set it to true when publishing the catalog.'
            catalog_version: '- (v3.6+) Version number from this catalog.'
            created: '- (v3.6+) Date and time of catalog creation'
            delete_force: '- (Required) When destroying use delete_force=true with delete_recursive=true to remove a catalog and any objects it contains, regardless of their state'
            delete_recursive: '- (Required) When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that normally allows removal'
            description: '- (Optional) Description of catalog'
            is_local: '- (v3.8.1+) Indicates if this catalog was created in the current organization.'
            is_published: '- (v3.6+) Indicates if this catalog is shared to all organizations.'
            is_shared: '- (v3.6+) Indicates if the catalog is shared.'
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            media_item_list: (v3.8+) List of media item names in this catalog, in alphabetical order.
            metadata: '- (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign.'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) Catalog name'
            number_of_media: '- (v3.6+) Number of media items available in this catalog.'
            number_of_vapp_templates: '- (v3.6+) Number of vApp templates available in this catalog.'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.
                When using a catalog shared from another organization, this field must have the name of that one, not the current one.
                If you don't know the name of the sharing org, and put the current one, an error message will list the possible names.
            owner_name: '- (v3.6+) Owner of the catalog.'
            password: '- (Optional, v3.6+) An optional password to access the catalog. Only ASCII characters are allowed in a valid password.'
            preserve_identity_information: '- (Optional, v3.6+) Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package, and you should use it only when necessary. Default is false.'
            publish_enabled: '- (Optional, v3.6+) Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is false.'
            publish_subscription_type: '- (v3.6+) Shows if the catalog is PUBLISHED, if it is a subscription from another one (SUBSCRIBED), or none of those (UNPUBLISHED).'
            publish_subscription_url: '- (v3.8+) URL to which other catalogs can subscribe.'
            storage_profile_id: |-
                - (Optional, v3.1+) Allows to set specific storage profile to be used for catalog. Note. Data
                source vcd_storage_profile can help to lookup storage profile ID.
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vapp_template_list: (v3.8+) List of vApp template names in this catalog, in alphabetical order.
        importStatements: []
    vcd_catalog_access_control:
        subCategory: ""
        description: Provides a VMware Cloud Director Access Control structure for a Catalog.
        name: vcd_catalog_access_control
        title: vcd_catalog_access_control
        examples:
            - name: AC-not-shared
              manifest: |-
                {
                  "catalog_id": "${data.vcd_catalog.Catalog-AC-0.id}",
                  "shared_with_everyone": false
                }
              references:
                catalog_id: data.vcd_catalog.Catalog-AC-0.id
            - name: AC-global
              manifest: |-
                {
                  "catalog_id": "${data.vcd_catalog.Catalog-AC-1.id}",
                  "everyone_access_level": "ReadOnly",
                  "shared_with_everyone": true
                }
              references:
                catalog_id: data.vcd_catalog.Catalog-AC-1.id
            - name: AC-users-and-orgs
              manifest: |-
                {
                  "catalog_id": "${data.vcd_catalog.Catalog-AC-2.id}",
                  "shared_with": [
                    {
                      "access_level": "FullControl",
                      "user_id": "${data.vcd_org_user.ac-admin1.id}"
                    },
                    {
                      "access_level": "Change",
                      "user_id": "${data.vcd_org_user.ac-vapp-creator2.id}"
                    },
                    {
                      "access_level": "ReadOnly",
                      "org_id": "${data.vcd_org.another-org.id}"
                    }
                  ],
                  "shared_with_everyone": false
                }
              references:
                catalog_id: data.vcd_catalog.Catalog-AC-2.id
                shared_with.org_id: data.vcd_org.another-org.id
                shared_with.user_id: data.vcd_org_user.ac-vapp-creator2.id
            - name: my-ac
              manifest: |-
                {
                  "catalog_id": "${data.vcd_catalog.my-cat.id}",
                  "org": "my-org"
                }
              references:
                catalog_id: data.vcd_catalog.my-cat.id
        argumentDocs:
            catalog_id: '- (Required) A unique identifier for the Catalog.'
            everyone_access_level: |-
                - (Optional) Access level when the Catalog is shared with everyone (it can only be set to
                ReadOnly). Required if shared_with_everyone is set.
            org: '- (Optional) The name of organization to which the Catalog belongs. Optional if defined at provider level.'
            shared_with: |-
                - (Optional) one or more blocks defining a subject (one of Organization, User, or Group) to which we are sharing.
                See shared_with below for detail. It cannot be used if shared_with_everyone is true.
            shared_with.access_level: |-
                - (Required) The access level for the user or group to which we are sharing. (One of ReadOnly,
                Change, FullControl, but it can only be ReadOnly when we share to an Organization)
            shared_with.group_id: '- (Optional) The ID of a group with which we are sharing. Required if user_id or org_id is not set.'
            shared_with.org_id: '- (Optional) The ID of a group with which we are sharing. Required if user_id or group_id is not set.'
            shared_with.subject_name: '- (Computed) the name of the subject (Org, group, or user) with which we are sharing.'
            shared_with.user_id: '- (Optional) The ID of a user with which we are sharing. Required if group_id or org_id is not set.'
            shared_with_everyone: |-
                - (Required) Whether the Catalog is shared with everyone. If any shared_with blocks are included,
                this property must be set to false.
        importStatements: []
    vcd_catalog_item:
        subCategory: ""
        description: Provides a VMware Cloud Director catalog item resource. This can be used to upload and delete OVA file inside a catalog.
        name: vcd_catalog_item
        title: vcd_catalog_item
        examples:
            - name: myNewCatalogItem
              manifest: |-
                {
                  "catalog": "my-catalog",
                  "description": "new vapp template",
                  "metadata_entry": [
                    {
                      "key": "license",
                      "value": "public"
                    },
                    {
                      "key": "version",
                      "value": "v1"
                    }
                  ],
                  "name": "my ova",
                  "org": "my-org",
                  "ova_path": "/home/user/file.ova",
                  "upload_piece_size": 10
                }
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: my-item
              manifest: |-
                {
                  "catalog": "my-catalog",
                  "name": "my-item",
                  "org": "my-org",
                  "ova_path": "guess"
                }
        argumentDocs:
            catalog: '- (Required) The name of the catalog where to upload OVA file'
            catalog_item_metadata: '- (Deprecated; v3.7+) Use metadata_entry instead.  Key value map of metadata to assign to the Catalog Item'
            description: '- (Optional) Description of item'
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            metadata: '- (Optional; v2.5+) Key value map of metadata to assign to the associated vApp Template'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign to the Catalog Item. See Metadata section for details.'
            name: '- (Required) Item name in catalog'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            ova_path: '- (Optional) Absolute or relative path to file to upload'
            ovf_url: '- (Optional; v3.6+) URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL'
            show_upload_progress: '- (Optional) - Default false. Allows seeing upload progress. (See note below)'
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            upload_piece_size: '- (Optional) - Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
        importStatements: []
    vcd_catalog_media:
        subCategory: ""
        description: Provides a VMware Cloud Director media resource. This can be used to upload and delete media (ISO) file inside a catalog.
        name: vcd_catalog_media
        title: vcd_catalog_media
        examples:
            - name: myNewMedia
              manifest: |-
                {
                  "catalog_id": "${data.vcd_catalog.my-catalog.id}",
                  "description": "new os versions",
                  "media_path": "/home/user/file.iso",
                  "metadata_entry": [
                    {
                      "key": "license",
                      "value": "public"
                    },
                    {
                      "key": "version",
                      "value": "v1"
                    }
                  ],
                  "name": "my iso",
                  "org": "my-org",
                  "upload_piece_size": 10
                }
              references:
                catalog_id: data.vcd_catalog.my-catalog.id
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: tf-mymedia
              manifest: |-
                {
                  "catalog": "my-catalog",
                  "name": "my-media",
                  "org": "my-org"
                }
        argumentDocs:
            catalog: '- (Optional; Deprecated) The name of the catalog where to upload media file. It''s mandatory if catalog_id is not used.'
            catalog_id: '- (Optional; v3.8.2+) The ID of the catalog where to upload media file. It''s mandatory if catalog field is not used.'
            creation_date: '- (Computed) returns creation date'
            description: '- (Optional) - Description of media file'
            is_iso: '- (Computed) returns True if this media file is ISO'
            is_published: '- (Computed) returns True if this media file is in a published catalog'
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            media_path: '- (Required) - Absolute or relative path to file to upload'
            metadata: '- (Deprecated; v2.5+) Use metadata_entry instead. Key value map of metadata to assign'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) Media file name in catalog'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            owner_name: '- (Computed) returns owner name'
            show_upload_progress: '- (Optional) - Default false. Allows to see upload progress. (See note below)'
            size: '- (Computed) returns media storage in Bytes'
            status: '- (Computed) returns media status'
            storage_profile_name: '- (Computed) returns storage profile name'
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            upload_piece_size: '- (Optional) - size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
        importStatements: []
    vcd_catalog_vapp_template:
        subCategory: ""
        description: Provides a VMware Cloud Director vApp Template resource. This can be used to upload and delete OVA files inside a catalog.
        name: vcd_catalog_vapp_template
        title: vcd_catalog_vapp_template
        examples:
            - name: myNewVappTemplate
              manifest: |-
                {
                  "catalog_id": "${data.vcd_catalog.my-catalog.id}",
                  "description": "new vapp template",
                  "metadata_entry": [
                    {
                      "is_system": false,
                      "key": "license",
                      "type": "MetadataStringValue",
                      "user_access": "READWRITE",
                      "value": "public"
                    },
                    {
                      "is_system": false,
                      "key": "version",
                      "type": "MetadataStringValue",
                      "user_access": "READWRITE",
                      "value": "v1"
                    }
                  ],
                  "name": "my ova",
                  "org": "my-org",
                  "ova_path": "/home/user/file.ova",
                  "upload_piece_size": 10
                }
              references:
                catalog_id: data.vcd_catalog.my-catalog.id
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: my-vapp-template
              manifest: |-
                {
                  "catalog_id": "${data.vcd_catalog.my-catalog.id}",
                  "name": "my-vapp-template",
                  "org": "my-org",
                  "ova_path": "guess"
                }
              references:
                catalog_id: data.vcd_catalog.my-catalog.id
        argumentDocs:
            catalog_id: '- (Required) ID of the Catalog where to upload the OVA file'
            created: '- Timestamp of when the vApp Template was created'
            description: '- (Optional) Description of the vApp Template. Not to be used with ovf_url when target OVA has a description'
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            metadata: '-  (Deprecated) Use metadata_entry instead. Key/value map of metadata to assign to the associated vApp Template'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) vApp Template name in Catalog'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            ova_path: '- (Optional) Absolute or relative path to file to upload'
            ovf_url: '- (Optional) URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL'
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            upload_piece_size: '- (Optional) - Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vdc_id: '- The VDC ID to which this vApp Template belongs'
            vm_names: '- Set of VM names within the vApp template'
        importStatements: []
    vcd_edgegateway:
        subCategory: ""
        description: Provides a VMware Cloud Director NSX-V edge gateway. This can be used to create and delete edge gateways connected to one or more external networks.
        name: vcd_edgegateway
        title: vcd_edgegateway
        examples:
            - name: egw
              manifest: |-
                {
                  "configuration": "compact",
                  "description": "new edge gateway",
                  "external_network": [
                    {
                      "name": "my-ext-net1",
                      "subnet": [
                        {
                          "gateway": "192.168.30.49",
                          "ip_address": "192.168.30.51",
                          "netmask": "255.255.255.240",
                          "use_for_default_route": true
                        }
                      ]
                    }
                  ],
                  "name": "my-egw",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
              dependencies:
                vcd_network_routed.rnet1: |-
                    {
                      "edge_gateway": "${vcd_edgegateway.egw.name}",
                      "gateway": "192.168.2.1",
                      "name": "rnet1",
                      "org": "my-org",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.2.100",
                          "start_address": "192.168.2.2"
                        }
                      ],
                      "vdc": "my-vdc"
                    }
            - name: egw
              manifest: |-
                {
                  "configuration": "compact",
                  "description": "new edge gateway",
                  "external_network": [
                    {
                      "name": "my-main-external-network",
                      "subnet": [
                        {
                          "gateway": "192.168.30.49",
                          "ip_address": "192.168.30.51",
                          "netmask": "255.255.255.240",
                          "suballocate_pool": [
                            {
                              "end_address": "192.168.30.55",
                              "start_address": "192.168.30.53"
                            },
                            {
                              "end_address": "192.168.30.60",
                              "start_address": "192.168.30.58"
                            }
                          ]
                        },
                        {
                          "gateway": "192.168.40.149",
                          "netmask": "255.255.255.0",
                          "use_for_default_route": true
                        }
                      ]
                    },
                    {
                      "name": "my-other-external-network",
                      "subnet": [
                        {
                          "gateway": "1.1.1.1",
                          "netmask": "255.255.255.248"
                        }
                      ]
                    }
                  ],
                  "name": "edge-with-complex-networks",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
            - name: tf-edgegateway
              manifest: |-
                {
                  "configuration": "COMPUTE",
                  "external_network": [
                    {
                      "name": "my-ext-net1",
                      "subnet": [
                        {
                          "gateway": "192.168.30.49",
                          "ip_address": "192.168.30.51",
                          "netmask": "255.255.255.240",
                          "use_for_default_route": true
                        }
                      ]
                    }
                  ],
                  "name": "my-edge-gw",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            Provider.import_separator: or variable VCD_IMPORT_SEPARATOR
            configuration: '- (Required) Configuration of the vShield edge VM for this gateway. One of: compact, full ("Large"), x-large, full4 ("Quad Large").'
            default_external_network_ip: (v2.6+) - IP address of edge gateway used for default network
            distributed_routing: |-
                - (Optional) If advanced networking enabled, also enable distributed
                routing. Default is false.
            enable_rate_limit: |-
                (Optional) - True if rate limiting should be applied on this interface.
                Default is false.
            end_address: (Required) - End IP address of a range
            external_network: |-
                - (Required, v2.6+) One or more blocks defining external networks, their
                subnets, IP addresses and  IP pool suballocation attached to edge gateway interfaces. Details are
                in external network block below.
            external_network_ips: |-
                (v2.6+) - A list of IP addresses assigned to edge gateway interfaces
                connected to external networks.
            fips_mode_enabled: |-
                - (Optional) When FIPS mode is enabled, any secure communication to or from
                the NSX Edge uses cryptographic algorithms or protocols that are allowed by United States Federal
                Information Processing Standards (FIPS). FIPS mode turns on the cipher suites that comply with
                FIPS. Default is false. Note: to use FIPS mode it must be enabled in vCD system settings.
            fw_default_rule_action: |-
                (Optional) Default firewall rule (last in the processing order) action.
                One of accept or deny. Default deny.
            fw_default_rule_logging_enabled: |-
                (Optional) Enable default firewall rule (last in the processing
                order) logging. Default false.
            fw_enabled: |-
                (Optional) Enable firewall. Default true. Note: Disabling Firewall will also
                disable NAT and other NAT dependent features like Load Balancer.
            gateway: (Required) - Gateway for a subnet in external network
            ha_enabled: '- (Optional) Enable high availability on this edge gateway. Default is false.'
            incoming_rate_limit: (Optional) - Incoming rate limit in Mbps.
            ip_address: |-
                (Optional) - IP address to assign to edge gateway interface (will be auto-assigned if
                unspecified)
            lb_acceleration_enabled: |-
                - (Optional) Enable to configure the load balancer to use the faster L4
                engine rather than L7 engine. The L4 TCP VIP is processed before the edge gateway firewall so no
                allow firewall rule is required. Default is false. Note: L7 VIPs for HTTP and HTTPS are
                processed after the firewall, so when Acceleration Enabled is not selected, an edge gateway firewall
                rule must exist to allow access to the L7 VIP for those protocols. When Acceleration Enabled is
                selected and the server pool is in non-transparent mode, an SNAT rule is added, so you must ensure
                that the firewall is enabled on the edge gateway.
            lb_enabled: '- (Optional) Enable load balancing. Default is false.'
            lb_logging_enabled: |-
                - (Optional) Enables the edge gateway load balancer to collect traffic logs.
                Default is false.
            lb_loglevel: |-
                - (Optional) Choose the severity of events to be logged. One of emergency,
                alert, critical, error, warning, notice, info, debug
            name: '- (Required) A unique name for the edge gateway.'
            netmask: (Required) - Netmask of a subnet in external network
            org: '- (Optional) The name of organization to which the VDC belongs. Optional if defined at provider level.'
            outgoing_rate_limit: (Optional) - Outgoing rate limit in Mbps.
            start_address: (Required) - Start IP address of a range
            suballocate_pool: |-
                (Optional) - One or more blocks of ip
                ranges in the subnet to be sub-allocated
            subnet: (Required) - One or more blocks of External Network Subnet.
            use_default_route_for_dns_relay: |-
                - (Optional) When default route is set, it will be used for
                gateways' default routing and DNS forwarding. Default is false.
            use_for_default_route: |-
                (Optional) - Should this network be used as default gateway on edge
                gateway. Default is false.
            vdc: '- (Optional) The name of VDC that owns the edge gateway. Optional if defined at provider level.'
        importStatements: []
    vcd_edgegateway_settings:
        subCategory: ""
        description: Provides a VMware Cloud Director edge gateway global settings. This can be used to update global edge gateways settings related to firewall and load balancing.
        name: vcd_edgegateway_settings
        title: vcd_edgegateway_settings
        examples:
            - name: egw-settings
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_edgegateway.egw.id}",
                  "fw_default_rule_action": "accept",
                  "fw_default_rule_logging_enabled": true,
                  "fw_enabled": true,
                  "lb_acceleration_enabled": true,
                  "lb_enabled": true,
                  "lb_logging_enabled": true,
                  "lb_loglevel": "debug"
                }
              references:
                edge_gateway_id: data.vcd_edgegateway.egw.id
            - name: tf-egw
              manifest: |-
                {
                  "edge_gateway_name": "my-edge-gw"
                }
        argumentDocs:
            Provider.import_separator: or variable VCD_IMPORT_SEPARATOR
            edge_gateway_id: '- (Optional) The edge gateway ID. (Required if edge_gateway_name is not set)'
            edge_gateway_name: '- (Optional) A unique name for the edge gateway. (Required if edge_gateway_id is not set)'
            fw_default_rule_action: |-
                (Optional) Default firewall rule (last in the processing order) action.
                One of accept or deny. Default deny.
            fw_default_rule_logging_enabled: |-
                (Optional) Enable default firewall rule (last in the processing
                order) logging. Default false.
            fw_enabled: '- (Optional) Enable firewall. Default true.'
            lb_acceleration_enabled: '- (Optional) Enable to configure the load balancer.'
            lb_enabled: '- (Optional) Enable load balancing. Default is false.'
            lb_logging_enabled: |-
                - (Optional) Enables the edge gateway load balancer to collect traffic logs.
                Default is false. Note: only System administrators can change this property. It is ignored by API for Org users.
            lb_loglevel: |-
                - (Optional) Choose the severity of events to be logged. One of emergency,
                alert, critical, error, warning, notice, info, debug. Note: only System administrators can change this property. It is ignored by API for Org users.
            org: '- (Optional) The name of organization to which the VDC belongs. Optional if defined at provider level.'
            vdc: '- (Optional) The name of VDC that owns the edge gateway. Optional if defined at provider level.'
        importStatements: []
    vcd_edgegateway_vpn:
        subCategory: ""
        description: Provides a VMware Cloud Director IPsec VPN. This can be used to create, modify, and delete VPN settings and rules.
        name: vcd_edgegateway_vpn
        title: vcd_edgegateway_vpn
        examples:
            - name: vpn
              manifest: |-
                {
                  "description": "Description",
                  "edge_gateway": "Internet_01(nti0000bi2_123-456-2)",
                  "encryption_protocol": "AES256",
                  "local_id": "64.121.123.10",
                  "local_ip_address": "64.121.123.10",
                  "local_subnets": [
                    {
                      "local_subnet_gateway": "10.0.1.1",
                      "local_subnet_mask": "255.255.255.0",
                      "local_subnet_name": "DMZ_EAST"
                    },
                    {
                      "local_subnet_gateway": "10.0.22.1",
                      "local_subnet_mask": "255.255.255.0",
                      "local_subnet_name": "WEB_EAST"
                    }
                  ],
                  "mtu": 1400,
                  "name": "west-to-east",
                  "peer_id": "64.121.123.11",
                  "peer_ip_address": "64.121.123.11",
                  "peer_subnets": [
                    {
                      "peer_subnet_gateway": "10.0.10.1",
                      "peer_subnet_mask": "255.255.255.0",
                      "peer_subnet_name": "DMZ_WEST"
                    },
                    {
                      "peer_subnet_gateway": "10.0.20.1",
                      "peer_subnet_mask": "255.255.255.0",
                      "peer_subnet_name": "WEB_WEST"
                    }
                  ],
                  "shared_secret": "***********************"
                }
        argumentDocs:
            description: '- (Required) A description for the VPN'
            edge_gateway: '- (Required) The name of the edge gateway on which to apply the Firewall Rules'
            encryption_protocol: '- (Required) - E.g. AES256'
            local_id: '- (Required) - Local ID'
            local_ip_address: '- (Required) - Local IP Address'
            local_subnet_gateway: '- (Required) Gateway of the local subnet'
            local_subnet_mask: '- (Required) Subnet mask of the local subnet'
            local_subnet_name: '- (Required) Name of the local subnet'
            local_subnets: '- (Required) - List of Local Subnets see Local Subnets below for details.'
            mtu: '- (Required) - The MTU setting'
            name: '- (Required) The name of the VPN'
            org: '- (Optional; v2.0+) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            peer_id: '- (Required) - Peer ID'
            peer_ip_address: '- (Required) - Peer IP Address'
            peer_subnet_gateway: '- (Required) Gateway of the peer subnet'
            peer_subnet_mask: '- (Required) Subnet mask of the peer subnet'
            peer_subnet_name: '- (Required) Name of the peer subnet'
            peer_subnets: '- (Required) - List of Peer Subnets see Peer Subnets below for details.'
            shared_secret: '- (Required) - Shared Secret'
            vdc: '- (Optional; v2.0+) The name of VDC to use, optional if defined at provider level'
        importStatements: []
    vcd_external_network:
        subCategory: ""
        description: Provides a VMware Cloud Director external network resource.  This can be used to create and delete external networks.
        name: vcd_external_network
        title: vcd_external_network
        examples:
            - name: net
              manifest: |-
                {
                  "description": "Reference for vCD external network",
                  "ip_scope": [
                    {
                      "dns1": "192.168.0.164",
                      "dns2": "192.168.0.196",
                      "dns_suffix": "mybiz.biz",
                      "gateway": "192.168.30.49",
                      "netmask": "255.255.255.240",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.30.62",
                          "start_address": "192.168.30.51"
                        }
                      ]
                    },
                    {
                      "dns1": "192.168.1.164",
                      "dns2": "192.168.1.196",
                      "dns_suffix": "my.biz",
                      "gateway": "192.168.31.49",
                      "netmask": "255.255.255.240",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.31.55",
                          "start_address": "192.168.31.51"
                        },
                        {
                          "end_address": "192.168.31.59",
                          "start_address": "192.168.31.57"
                        }
                      ]
                    }
                  ],
                  "name": "my-ext-net",
                  "retain_net_info_across_deployments": false,
                  "vsphere_network": [
                    {
                      "name": "myNetwork",
                      "type": "DV_PORTGROUP",
                      "vcenter": "vcenter-name"
                    },
                    {
                      "name": "myNetwork2",
                      "type": "DV_PORTGROUP",
                      "vcenter": "vcenter-name2"
                    }
                  ]
                }
              dependencies:
                vcd_network_direct.net: |-
                    {
                      "external_network": "${vcd_external_network.net.name}",
                      "name": "my-net",
                      "org": "my-org",
                      "vdc": "my-vdc"
                    }
            - name: tf-external-network
              manifest: |-
                {
                  "name": "my-ext-net"
                }
        argumentDocs:
            description: '- (Optional) Network friendly description'
            dns_suffix: '- (Optional) A FQDN for the virtual machines on this network.'
            dns1: '- (Optional) Primary DNS server'
            dns2: '- (Optional) Secondary DNS server'
            end_address: '- (Required) End address of the IP range'
            gateway: '- (Required) Gateway of the network'
            ip_scope: '- (Required) A list of IP scopes for the network.  See IP Scope below for details.'
            name: '- (Required) A unique name for the network'
            netmask: '- (Required) Network mask'
            retain_net_info_across_deployments: '- (Optional) Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.'
            start_address: '- (Required) Start address of the IP range'
            static_ip_pool: '- (Required) IP ranges used for static pool allocation in the network.  See IP Pool below for details.'
            type: '- (Required) The vSphere type of the object. One of: DV_PORTGROUP (distributed virtual port group), NETWORK (standard switch port group)'
            vcenter: '- (Required) The vCenter server name'
            vsphere_network: '- (Required) A list of DV_PORTGROUP or NETWORK objects names that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server registered with the system.  See vSphere Network below for details.'
        importStatements: []
    vcd_external_network_v2:
        subCategory: ""
        description: Provides a VMware Cloud Director External Network resource (version 2). New version of this resource uses new VCD API and is capable of creating NSX-T backed external networks as well as port group backed ones.
        name: vcd_external_network_v2
        title: vcd_external_network_v2
        examples:
            - name: ext-net-nsxt-t0
              manifest: |-
                {
                  "description": "First NSX-T Tier 0 router backed network",
                  "ip_scope": [
                    {
                      "enabled": false,
                      "gateway": "88.88.88.1",
                      "prefix_length": "24",
                      "static_ip_pool": [
                        {
                          "end_address": "88.88.88.100",
                          "start_address": "88.88.88.88"
                        }
                      ]
                    },
                    {
                      "gateway": "14.14.14.1",
                      "prefix_length": "24",
                      "static_ip_pool": [
                        {
                          "end_address": "14.14.14.15",
                          "start_address": "14.14.14.10"
                        },
                        {
                          "end_address": "14.14.14.25",
                          "start_address": "14.14.14.20"
                        }
                      ]
                    }
                  ],
                  "name": "nsxt-external-network",
                  "nsxt_network": [
                    {
                      "nsxt_manager_id": "${data.vcd_nsxt_manager.main.id}",
                      "nsxt_tier0_router_id": "${data.vcd_nsxt_tier0_router.router.id}"
                    }
                  ]
                }
              references:
                nsxt_network.nsxt_manager_id: data.vcd_nsxt_manager.main.id
                nsxt_network.nsxt_tier0_router_id: data.vcd_nsxt_tier0_router.router.id
            - name: ext-net-nsxt-segment
              manifest: |-
                {
                  "description": "First NSX-T segment backed network",
                  "ip_scope": [
                    {
                      "enabled": false,
                      "gateway": "88.88.88.1",
                      "prefix_length": "24",
                      "static_ip_pool": [
                        {
                          "end_address": "88.88.88.100",
                          "start_address": "88.88.88.88"
                        }
                      ]
                    },
                    {
                      "gateway": "14.14.14.1",
                      "prefix_length": "24",
                      "static_ip_pool": [
                        {
                          "end_address": "14.14.14.15",
                          "start_address": "14.14.14.10"
                        },
                        {
                          "end_address": "14.14.14.25",
                          "start_address": "14.14.14.20"
                        }
                      ]
                    }
                  ],
                  "name": "nsxt-external-network",
                  "nsxt_network": [
                    {
                      "nsxt_manager_id": "${data.vcd_nsxt_manager.main.id}",
                      "nsxt_segment_name": "existing-nsxt-segment"
                    }
                  ]
                }
              references:
                nsxt_network.nsxt_manager_id: data.vcd_nsxt_manager.main.id
              dependencies:
                vcd_network_direct.net: |-
                    {
                      "depends_on": [
                        "${vcd_external_network_v2.ext-net-nsxt}"
                      ],
                      "external_network": "${vcd_external_network_v2.ext-net-nsxt-segment.name}",
                      "name": "direct-net",
                      "vdc": "nsxt-vdc"
                    }
            - name: ext-net-nsxv
              manifest: |-
                {
                  "description": "NSX-V based external network",
                  "ip_scope": [
                    {
                      "dns1": "192.168.0.164",
                      "dns2": "192.168.0.196",
                      "dns_suffix": "company.biz",
                      "gateway": "192.168.30.49",
                      "prefix_length": "24",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.30.62",
                          "start_address": "192.168.30.51"
                        }
                      ]
                    }
                  ],
                  "name": "nsxv-external-network",
                  "vsphere_network": [
                    {
                      "portgroup_id": "${data.vcd_portgroup.sw.id}",
                      "vcenter_id": "${data.vcd_vcenter.vc.id}"
                    }
                  ]
                }
              references:
                vsphere_network.portgroup_id: data.vcd_portgroup.sw.id
                vsphere_network.vcenter_id: data.vcd_vcenter.vc.id
            - name: tf-external-network
              manifest: |-
                {
                  "name": "my-ext-net"
                }
        argumentDocs:
            description: '- (Optional) Network friendly description'
            dns_suffix: |-
                - (Optional) A FQDN for the virtual machines on this network. Provider version
                v3.9+ also supports NSX-T
            dns1: '- (Optional) Primary DNS server. Provider version v3.9+ also supports NSX-T'
            dns2: '- (Optional) Secondary DNS server. Provider version v3.9+ also supports NSX-T'
            enabled: '- (Optional) Default is true.'
            end_address: '- (Required) End address of the IP range'
            gateway: '- (Required) Gateway of the network.'
            ip_scope: '- (Required) One or more IP scopes for the network. See IP Scope below for details.'
            name: '- (Required) A unique name for the network'
            nsxt_manager_id: '- (Required) NSX-T manager ID. Can be looked up using vcd_nsxt_manager data source.'
            nsxt_network: '- (Optional) NSX-T network definition. See NSX-T Network below for details.'
            nsxt_segment_name: '- (Optional; v3.4+; VCD 10.3+) Existing NSX-T segment name.'
            nsxt_tier0_router_id: |-
                - (Optional) NSX-T Tier-0 router ID. Can be looked up using
                vcd_nsxt_tier0_router data source.
            portgroup_id: '- (Required) vSphere portgroup ID. Can be looked up using  vcd_portgroup data source.'
            prefix_length: '- (Required) Network prefix.'
            start_address: '- (Required) Start address of the IP range'
            static_ip_pool: '- (Required) IP ranges used for static pool allocation in the network.  See IP Pool below for details.'
            vcenter_id: '- (Required) vCenter ID. Can be looked up using vcd_vcenter data source.'
            vsphere_network: '- (Optional) One or more blocks of vSphere Network..'
        importStatements: []
    vcd_global_role:
        subCategory: ""
        description: Provides a VMware Cloud Director global role. This can be used to create, modify, and delete global roles.
        name: vcd_global_role
        title: vcd_global_role
        examples:
            - name: new-global-role
              manifest: |-
                {
                  "description": "new global role from CLI",
                  "name": "new-global-role",
                  "publish_to_all_tenants": false,
                  "rights": [
                    "Catalog: Add vApp from My Cloud",
                    "Catalog: Edit Properties",
                    "Catalog: View Private and Shared Catalogs",
                    "Organization vDC Compute Policy: View",
                    "vApp Template / Media: Edit",
                    "vApp Template / Media: View"
                  ],
                  "tenants": [
                    "org1",
                    "org2"
                  ]
                }
            - name: catalog-author
              manifest: |-
                {
                  "name": "Catalog Author"
                }
        argumentDocs:
            bundle_key: '- Key used for internationalization'
            description: '- (Required) A description of the global role'
            name: '- (Required) The name of the global role.'
            publish_to_all_tenants: '- (Required) When true, publishes the global role to all tenants'
            read_only: '- Whether this global role is read-only'
            rights: '- (Optional) List of rights assigned to this role'
            tenants: '- (Optional) List of tenants to which this global role gets published. Ignored if publish_to_all_tenants is true.'
        importStatements: []
    vcd_independent_disk:
        subCategory: ""
        description: Provides a VMware Cloud Director independent disk resource. This can be used to create and delete independent disks.
        name: vcd_independent_disk
        title: vcd_independent_disk
        examples:
            - name: myNewIndependentDisk
              manifest: |-
                {
                  "bus_sub_type": "VirtualSCSI",
                  "bus_type": "SCSI",
                  "name": "logDisk",
                  "size_in_mb": "1024",
                  "storage_profile": "external",
                  "vdc": "my-vcd"
                }
              dependencies:
                vcd_vapp_vm.web2: |-
                    {
                      "disk": [
                        {
                          "bus_number": 1,
                          "name": "${vcd_independent_disk.myNewIndependentDisk.name}",
                          "unit_number": 0
                        }
                      ],
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: tf-myDisk
              manifest: |-
                {
                  "name": "my-disk",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            attached_vm_ids: '- (Computed, v3.6+) IDs of VM which are using the disk'
            bus_sub_type: '- (Optional) Disk bus subtype. Values can be: buslogic, lsilogic, lsilogicsas, VirtualSCSI for SCSI, ahci for SATA and (v3.6+) nvmecontroller for NVME'
            bus_type: '- (Optional) Disk bus type. Values can be: IDE, SCSI, SATA, (v3.6+) NVME. Note When the disk type is IDE then VM is required to be powered off'
            datastore_name: '- (Computed) Data store name. Readable only for system user.'
            encrypted: '- (Computed, v3.6+ and VCD 10.2+) True if disk is encrypted'
            iops: '- (Computed) IOPS request for the created disk'
            is_attached: '- (Computed) True if the disk is already attached'
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            metadata: '- (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign to this independent disk.'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) Disk name'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            owner_name: '- (Computed) The owner name of the disk'
            sharing_type: '- (Optional, v3.6+ and VCD 10.2+) This is the sharing type. Values can be: DiskSharing,ControllerSharing, or None'
            size_in_mb: '- (Required, v3.0+) Size of disk in MB.'
            storage_profile: '- (Optional) The name of storage profile where disk will be created'
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            uuid: '- (Computed, v3.6+ and VCD 10.2+) The UUID of this named disk''s device backing'
            value: '- (Required) Value of this metadata entry.'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level'
        importStatements:
            - |-
              $ terraform import vcd_independent_disk.imported list@org-name.vdc-name.my-independent-disk-name
              vcd_independent_disk.Disk_import: Importing from ID "list@org-name.vdc-name.my-independent-disk-name"...
              Retrieving all disks by name
              No  ID                                                      Name    Description Size
              --  --                                                      ----    ------      ----
              1  urn:vcloud:disk:1bbc273d-7701-4f06-97be-428b46b0805e     diskV2  loging      78946548
              2  urn:vcloud:disk:6e1c996f-48b8-4e78-8111-a6407188d8b6     diskV2              5557452

              Error: resource was not imported! resource id must be specified in one of these formats:
              'org-name.vdc-name.my-independent-disk-id' to import by rule id
              'list@org-name.vdc-name.my-independent-disk-name' to get a list of disks with their IDs
            - $ terraform import vcd_independent_disk.imported list@org-name.vdc-name.urn:vcloud:disk:1bbc273d-7701-4f06-97be-428b46b0805e
    vcd_inserted_media:
        subCategory: ""
        description: Provides a VMware Cloud Director resource for inserting or ejecting media (ISO) file for the VM. Create this resource for inserting the media, and destroy it for ejecting.
        name: vcd_inserted_media
        title: vcd_inserted_media
        argumentDocs:
            catalog: '- (Required) The name of the catalog where to find media file'
            eject_force: |-
                - (Optional; v2.1+) Allows to pass answer to question in vCD
                "The guest operating system has locked the CD-ROM door and is probably using the CD-ROM.
                Disconnect anyway (and override the lock)?"
                when ejecting from a VM which is powered on. True means "Yes" as answer to question. Default is true
            name: '- (Required) Media file name in catalog which will be inserted to VM'
            org: '- (Optional; v2.0+) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            vapp_name: '- (Required) - The name of vApp to find'
            vdc: '- (Optional; v2.0+) The name of VDC to use, optional if defined at provider level'
            vm_name: '- (Required) - The name of VM to be used to insert media file'
        importStatements: []
    vcd_lb_app_profile:
        subCategory: ""
        description: Provides an NSX edge gateway load balancer application profile resource.
        name: vcd_lb_app_profile
        title: vcd_lb_app_profile
        examples:
            - name: tcp
              manifest: |-
                {
                  "edge_gateway": "my-edge-gw",
                  "name": "tcp-app-profile",
                  "org": "my-org",
                  "type": "tcp",
                  "vdc": "my-org-vdc"
                }
            - name: http
              manifest: |-
                {
                  "cookie_mode": "insert",
                  "cookie_name": "JSESSIONID",
                  "edge_gateway": "my-edge-gw",
                  "http_redirect_url": "/service-one",
                  "insert_x_forwarded_http_header": true,
                  "name": "http-profile",
                  "org": "my-org",
                  "persistence_mechanism": "cookie",
                  "type": "http",
                  "vdc": "my-org-vdc"
                }
        argumentDocs:
            cookie_mode: |-
                - (Optional) The mode by which the cookie should be inserted. One of 'insert',
                'prefix', or 'appsession'
            cookie_name: |-
                - (Optional) Used to uniquely identify the session the first time a client accesses
                the site. The load balancer refers to this cookie when connecting subsequent requests in the
                session, so that they all go to the same virtual server. Only applies for
                persistence_mechanism 'cookie'
            edge_gateway: '- (Required) The name of the edge gateway on which the application profile is to be created'
            enable_pool_side_ssl: |-
                - (Optional) Enable to define the certificate, CAs, or CRLs used to
                authenticate the load balancer from the server side. Note: This resource does not currently
                support attaching Pool and Virtual Server certificates therefore this toggle only enables it. To
                make it fully work certificates must be currently attached manually.
            enable_ssl_passthrough: |-
                - (Optional) Enable SSL authentication to be passed through to the
                virtual server. Otherwise SSL authentication takes place at the destination address
            expiration: '- (Optional) Length of time in seconds that persistence stays in effect'
            http_redirect_url: |-
                - (Optional) The URL to which traffic that arrives at the destination address
                should be redirected. Only applies for types http and https
            id: '- The NSX ID of the load balancer application profile'
            insert_x_forwarded_http_header: |-
                - (Optional) Enables 'X-Forwarded-For' header for identifying
                the originating IP address of a client connecting to a Web server through the load balancer.
                Only applies for types http and https
            name: '- (Required) Application profile name'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            persistence_mechanism: |-
                - (Optional) Persistence mechanism for the profile. One of 'cookie',
                'ssl-sessionid', 'sourceip'
            type: |-
                - (Required) Protocol type used to send requests to the server. One of tcp, udp,
                http, or https
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level'
        importStatements: []
    vcd_lb_app_rule:
        subCategory: ""
        description: Provides an NSX edge gateway load balancer application rule resource.
        name: vcd_lb_app_rule
        title: vcd_lb_app_rule
        examples:
            - name: example-one
              manifest: |-
                {
                  "edge_gateway": "my-edge-gw",
                  "name": "script1",
                  "org": "my-org",
                  "script": "acl vmware_page url_beg / vmware redirect location https://www.vmware.com/ ifvmware_page",
                  "vdc": "my-org-vdc"
                }
            - name: example-two
              manifest: |-
                {
                  "edge_gateway": "my-edge-gw",
                  "name": "script1",
                  "org": "my-org",
                  "script": "acl vmware_page url_beg / vmware redirect location https://www.vmware.com/ ifvmware_page\nacl other_page2 url_beg / other2 redirect location https://www.other2.com/ ifother_page2\nacl hello payload(0,6) -m bin 48656c6c6f0a\n",
                  "vdc": "my-org-vdc"
                }
        argumentDocs:
            edge_gateway: '- (Required) The name of the edge gateway on which the application rule is to be created'
            id: '- The NSX ID of the load balancer application rule'
            name: '- (Required) Application rule name'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            script: |-
                - (Required) A multiline application rule script.
                Terraform's HEREDOC syntax
                may be useful for multiline scripts. Note: For information on
                the application rule syntax, see more in [VMware Cloud Director documentation]
                (https://docs.vmware.com/en/vCloud-Director/9.7/com.vmware.vcloud.tenantportal.doc/GUID-AFF9F70F-85C9-4053-BA69-F2B062F34C7F.html)
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level'
        importStatements: []
    vcd_lb_server_pool:
        subCategory: ""
        description: Provides an NSX edge gateway load balancer server pool resource.
        name: vcd_lb_server_pool
        title: vcd_lb_server_pool
        examples:
            - name: web-servers
              manifest: |-
                {
                  "algorithm": "round-robin",
                  "edge_gateway": "my-edge-gw",
                  "member": [
                    {
                      "condition": "enabled",
                      "ip_address": "1.1.1.1",
                      "max_connections": 100,
                      "min_connections": 0,
                      "monitor_port": 9000,
                      "name": "member1",
                      "port": 8443,
                      "weight": 1
                    }
                  ],
                  "name": "web-servers",
                  "org": "my-org",
                  "vdc": "my-org-vdc"
                }
            - name: web-servers
              manifest: |-
                {
                  "algorithm": "httpheader",
                  "algorithm_parameters": "headerName=host",
                  "description": "description",
                  "edge_gateway": "my-edge-gw",
                  "enable_transparency": true,
                  "member": [
                    {
                      "condition": "enabled",
                      "ip_address": "1.1.1.1",
                      "max_connections": 100,
                      "min_connections": 0,
                      "monitor_port": 9000,
                      "name": "member1",
                      "port": 8443,
                      "weight": 1
                    },
                    {
                      "condition": "drain",
                      "ip_address": "2.2.2.2",
                      "max_connections": 8,
                      "min_connections": 6,
                      "monitor_port": 4000,
                      "name": "member2",
                      "port": 7000,
                      "weight": 2
                    }
                  ],
                  "monitor_id": "${data.vcd_lb_service_monitor.web-monitor.id}",
                  "name": "web-servers",
                  "org": "my-org",
                  "vdc": "my-org-vdc"
                }
              references:
                monitor_id: data.vcd_lb_service_monitor.web-monitor.id
        argumentDocs:
            algorithm: '- (Required) Server Pool load balancing method. Can be one of ip-hash, round-robin, uri, leastconn, url, or httpheader'
            algorithm_parameters: |-
                - (Optional) Valid only when algorithm is httpheader or url. The httpheader algorithm
                parameter has one option headerName=<name> while the url algorithm parameter has option urlParam=<url>.
            condition: |-
                - (Required) State of member in a pool. One of enabled, disabled, or drain. When member condition
                is set to drain it stops taking new connections and calls, while it allows its sessions on existing connections to
                continue until they naturally end. This allows to gracefully remove member node from load balancing rotation.
            description: '- (Optional) Server Pool description'
            edge_gateway: '- (Required) The name of the edge gateway on which the server pool is to be created'
            enable_transparency: |-
                - (Optional) When transparency is false (default) backend servers see the IP address of the
                traffic source as the internal IP address of the load balancer. When it is true the source IP address is the actual IP
                address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
                the edge gateway.
            id: '- The NSX ID of the load balancer server pool'
            ip_address: '- (Required) Member IP address'
            max_connections: |-
                - (Optional) The maximum number of concurrent connections the member can handle. Note: when the
                number of incoming requests exceeds the maximum, requests are queued and the load balancer waits for a connection to be
                released.
            member: |-
                - (Optional) A block to define server pool members. Multiple can be used. See Member and
                example for usage details.
            min_connections: '- (Optional) The minimum number of concurrent connections a member must always accept.'
            monitor_id: '- (Optional) vcd_lb_service_monitor resource id to attach to server pool for health check parameters'
            monitor_port: |-
                - (Required) Monitor Port at which the member is to receive health monitor requests. Note: can
                be the same as port
            name: '- (Required) Server Pool name'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            port: '- (Required) The port at which the member is to receive traffic from the load balancer.'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level'
            weight: '- (Required) The proportion of traffic this member is to handle. Must be an integer in the range 1-256.'
        importStatements: []
    vcd_lb_service_monitor:
        subCategory: ""
        description: Provides an NSX edge gateway load balancer service monitor resource.
        name: vcd_lb_service_monitor
        title: vcd_lb_service_monitor
        examples:
            - name: monitor
              manifest: |-
                {
                  "edge_gateway": "my-edge-gw",
                  "extension": {
                    "content-type": "application/json",
                    "linespan": ""
                  },
                  "interval": "5",
                  "max_retries": "3",
                  "method": "GET",
                  "name": "http-monitor",
                  "org": "my-org",
                  "send": "{\"key\": \"value\"}",
                  "timeout": "20",
                  "type": "http",
                  "url": "/health",
                  "vdc": "my-org-vdc"
                }
        argumentDocs:
            edge_gateway: '- (Required) The name of the edge gateway on which the service monitor is to be created'
            expected: |-
                - (Optional) For types http and https. String that the monitor expects to match in the status line of
                the HTTP or HTTPS response (for example, HTTP/1.1)
            extension: |-
                - (Optional) A map of advanced monitor parameters as key=value pairs (i.e. max-age=SECONDS, invert-regex)
                Note: When you need a value of key only format just set value to empty string (i.e. linespan = "")
            id: '- The NSX ID of the load balancer service monitor'
            interval: |-
                - (Optional) Interval in seconds at which a server is to be monitored using the specified Method.
                Defaults to 10
            max_retries: |-
                - (Optional) Number of times the specified monitoring Method must fail sequentially before the server is
                declared down. Defaults to 3
            method: |-
                - (Optional) For types http and https. Select http method to be used to detect server status. One of
                OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, or CONNECT
            name: '- (Required) Service Monitor name'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            receive: |-
                - (Optional) For types http,  https, and udp. The string to be matched in the response content.
                Note: When expected is not matched, the monitor does not try to match the Receive content
            send: '- (Optional) For types http,  https, and udp. The data to be sent.'
            timeout: '- (Optional) Maximum time in seconds within which a response from the server must be received. Defaults to 15'
            type: |-
                - (Required) Select the way in which you want to send the health check request to the server — http, https,
                tcp, icmp, or udp. Depending on the type selected, the remaining attributes are allowed or not
            url: '- (Optional) For types http and https. URL to be used in the server status request'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level'
        importStatements: []
    vcd_lb_virtual_server:
        subCategory: ""
        description: Provides an NSX edge gateway load balancer virtual server resource.
        name: vcd_lb_virtual_server
        title: vcd_lb_virtual_server
        examples:
            - name: http
              manifest: |-
                {
                  "app_profile_id": "${vcd_lb_app_profile.http.id}",
                  "app_rule_ids": [
                    "${vcd_lb_app_rule.redirect.id}",
                    "${vcd_lb_app_rule.language.id}"
                  ],
                  "edge_gateway": "my-edge-gw",
                  "ip_address": "1.1.1.1",
                  "name": "http-virtual-server",
                  "org": "my-org",
                  "port": 80,
                  "protocol": "http",
                  "server_pool_id": "${vcd_lb_server_pool.web-servers.id}",
                  "vdc": "my-org-vdc"
                }
              references:
                app_profile_id: vcd_lb_app_profile.http.id
                server_pool_id: vcd_lb_server_pool.web-servers.id
            - name: http
              manifest: |-
                {
                  "app_profile_id": "${vcd_lb_app_profile.http.id}",
                  "app_rule_ids": [
                    "${vcd_lb_app_rule.redirect.id}"
                  ],
                  "edge_gateway": "${var.edge_gateway}",
                  "ip_address": "${data.vcd_edgegateway.mygw.default_external_network_ip}",
                  "name": "my-virtual-server",
                  "org": "${var.org}",
                  "port": 8888,
                  "protocol": "${var.protocol}",
                  "server_pool_id": "${vcd_lb_server_pool.web-servers.id}",
                  "vdc": "${var.vdc}"
                }
              references:
                app_profile_id: vcd_lb_app_profile.http.id
                edge_gateway: var.edge_gateway
                ip_address: data.vcd_edgegateway.mygw.default_external_network_ip
                org: var.org
                protocol: var.protocol
                server_pool_id: vcd_lb_server_pool.web-servers.id
                vdc: var.vdc
              dependencies:
                vcd_lb_app_profile.http: |-
                    {
                      "edge_gateway": "${var.edge_gateway}",
                      "name": "http-app-profile",
                      "org": "${var.org}",
                      "type": "${var.protocol}",
                      "vdc": "${var.vdc}"
                    }
                vcd_lb_app_rule.redirect: |-
                    {
                      "edge_gateway": "${var.edge_gateway}",
                      "name": "redirect",
                      "org": "${var.org}",
                      "script": "acl vmware_page url_beg / vmware redirect location https://www.vmware.com/ ifvmware_page",
                      "vdc": "${var.vdc}"
                    }
                vcd_lb_server_pool.web-servers: |-
                    {
                      "algorithm": "httpheader",
                      "algorithm_parameters": "headerName=host",
                      "description": "description",
                      "edge_gateway": "${var.edge_gateway}",
                      "enable_transparency": true,
                      "member": [
                        {
                          "condition": "enabled",
                          "ip_address": "1.1.1.1",
                          "max_connections": 100,
                          "min_connections": 0,
                          "monitor_port": 9000,
                          "name": "member1",
                          "port": 8443,
                          "weight": 1
                        },
                        {
                          "condition": "drain",
                          "ip_address": "2.2.2.2",
                          "max_connections": 8,
                          "min_connections": 6,
                          "monitor_port": 4000,
                          "name": "member2",
                          "port": 7000,
                          "weight": 2
                        }
                      ],
                      "monitor_id": "${vcd_lb_service_monitor.monitor.id}",
                      "name": "web-servers",
                      "org": "${var.org}",
                      "vdc": "${var.vdc}"
                    }
                vcd_lb_service_monitor.monitor: |-
                    {
                      "edge_gateway": "${var.edge_gateway}",
                      "extension": {
                        "content-type": "application/json",
                        "linespan": ""
                      },
                      "interval": "5",
                      "max_retries": "3",
                      "method": "GET",
                      "name": "http-monitor",
                      "org": "${var.org}",
                      "send": "{\"key\": \"value\"}",
                      "timeout": "20",
                      "type": "${var.protocol}",
                      "url": "/health",
                      "vdc": "${var.vdc}"
                    }
        argumentDocs:
            app_profile_id: '- (Optional) Application profile ID to be associated with the virtual server'
            app_rule_ids: '- (Optional) List of attached application rule IDs'
            connection_limit: '- (Optional) Maximum concurrent connections that the virtual server can process'
            connection_rate_limit: '- (Optional) Maximum incoming new connection requests per second'
            description: '- (Optional) Virtual server description'
            edge_gateway: |-
                - (Required) The name of the edge gateway on which the virtual server is to be
                created
            enable_acceleration: |-
                - (Optional) Defines if the virtual server uses acceleration. Default
                false
            enabled: '- (Optional) Defines if the virtual server is enabled. Default true'
            id: '- The NSX ID of the load balancer virtual server'
            ip_address: '- (Required) Set the IP address that the load balancer listens on'
            name: '- (Required) Virtual server name'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations
            port: '- (Required) The port number that the load balancer listens on'
            protocol: |-
                - (Required) Select the protocol that the virtual server accepts. One of tcp, udp,
                http, or https Note: You must select the same protocol used by the selected
                Application Profile
            server_pool_id: '- (Optional) The server pool that the load balancer will use'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level'
        importStatements: []
    vcd_library_certificate:
        subCategory: ""
        description: Provides a certificate in System or Org library resource.
        name: vcd_library_certificate
        title: vcd_library_certificate
        examples:
            - name: new-certificate
              manifest: |-
                {
                  "alias": "SAML certificate",
                  "certificate": "${file(\"/home/user/cert.pem\")}",
                  "description": "my description",
                  "org": "myOrg",
                  "private_key": "${file(\"/home/user/key.pem\")}",
                  "private_key_passphrase": "passphrase"
                }
            - name: new-certificate-for-system
              manifest: |-
                {
                  "alias": "provider certificate",
                  "certificate": "${file(\"/home/user/provider-cert.pem\")}",
                  "description": "my description",
                  "org": "System",
                  "private_key": "${file(\"/home/user/provider-key.pem\")}",
                  "private_key_passphrase": "passphrase"
                }
        argumentDocs:
            alias: '- (Required)  - Alias (name) of certificate'
            certificate: |-
                - (Required)  - Content of Certificate. Note. it is best to avoid trailing
                newlines in the certificate, as some versions of VCD trim trailing newline and plan/apply
                operations might always report it.
            description: '- (Optional)  - Certificate description'
            id: '- The added to library certificate ID'
            private_key: '- (Optional)  - Content of private key'
            private_key_passphrase: '- (Optional)  - private key pass phrase'
        importStatements: []
    vcd_network_direct:
        subCategory: ""
        description: Provides a VMware Cloud Director Org VDC Network attached to an external one. This can be used to create, modify, and delete internal networks for vApps to connect.
        name: vcd_network_direct
        title: vcd_network_direct
        examples:
            - name: net
              manifest: |-
                {
                  "external_network": "my-ext-net",
                  "name": "my-net",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: tf-mynet
              manifest: |-
                {
                  "external_network": "COMPUTE",
                  "name": "my-net",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            description: '- (Optional v2.6+) An optional description of the network'
            external_network: '- (Required) The name of the external network.'
            external_network_dns_suffix: '- (Computed) returns the DNS suffix from the external network'
            external_network_dns1: '- (Computed) returns the first DNS from the external network'
            external_network_dns2: '- (Computed) returns the second DNS from the external network'
            external_network_gateway: '- (Computed) returns the gateway from the external network'
            external_network_netmask: '- (Computed) returns the netmask from the external network'
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            metadata: '- (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign to this network.'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) A unique name for the network'
            org: |-
                - (Optional; v2.0+) The name of organization to use, optional if defined at provider level. Useful when
                connected as sysadmin working across different organisations
            shared: |-
                - (Optional) Defines if this network is shared between multiple VDCs
                in the Org.  Defaults to false.
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vdc: '- (Optional; v2.0+) The name of VDC to use, optional if defined at provider level'
        importStatements: []
    vcd_network_isolated:
        subCategory: ""
        description: Provides a VMware Cloud Director Org VDC isolated Network. This can be used to create, modify, and delete internal networks for vApps to connect.
        name: vcd_network_isolated
        title: vcd_network_isolated
        examples:
            - name: net
              manifest: |-
                {
                  "dhcp_pool": [
                    {
                      "end_address": "192.168.2.50",
                      "start_address": "192.168.2.2"
                    }
                  ],
                  "dns1": "192.168.2.1",
                  "gateway": "192.168.2.1",
                  "name": "my-net",
                  "org": "my-org",
                  "static_ip_pool": [
                    {
                      "end_address": "192.168.2.100",
                      "start_address": "192.168.2.51"
                    }
                  ],
                  "vdc": "my-vdc"
                }
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: tf-mynet
              manifest: |-
                {
                  "gateway": "COMPUTE",
                  "name": "my-net",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            default_lease_time: '- (Optional) The default DHCP lease time to use. Defaults to 3600.'
            description: '- (Optional v2.6+) An optional description of the network'
            dhcp_pool: |-
                - (Optional) A range of IPs to issue to virtual machines that don't
                have a static IP; see IP Pools below for details.
            dns_suffix: '- (Optional) A FQDN for the virtual machines on this network'
            dns1: '- (Optional) First DNS server to use.'
            dns2: '- (Optional) Second DNS server to use.'
            end_address: '- (Required) The final address in the IP Range'
            gateway: '- (Required) The gateway for this network'
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            max_lease_time: '- (Optional) The maximum DHCP lease time to use. Defaults to 7200.'
            metadata: '- (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign to this network.'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) A unique name for the network'
            netmask: '- (Optional) The netmask for the new network. Defaults to 255.255.255.0'
            org: |-
                - (Optional; v2.0+) The name of organization to use, optional if defined at provider level. Useful when
                connected as sysadmin working across different organisations
            shared: |-
                - (Optional) Defines if this network is shared between multiple VDCs
                in the Org.  Defaults to false.
            start_address: '- (Required) The first address in the IP Range'
            static_ip_pool: |-
                - (Optional) A range of IPs permitted to be used as static IPs for
                virtual machines; see IP Pools below for details.
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vdc: '- (Optional; v2.0+) The name of VDC to use, optional if defined at provider level'
        importStatements: []
    vcd_network_isolated_v2:
        subCategory: ""
        description: Provides a VMware Cloud Director Org VDC isolated Network. This can be used to create, modify, and delete isolated VDC networks (backed by NSX-T or NSX-V).
        name: vcd_network_isolated_v2
        title: vcd_network_isolated_v2
        examples:
            - name: nsxt-backed
              manifest: |-
                {
                  "description": "My isolated Org VDC network backed by NSX-T",
                  "gateway": "1.1.1.1",
                  "name": "nsxt-isolated 1",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.main.id}",
                  "prefix_length": 24,
                  "static_ip_pool": [
                    {
                      "end_address": "1.1.1.20",
                      "start_address": "1.1.1.10"
                    },
                    {
                      "end_address": "1.1.1.103",
                      "start_address": "1.1.1.100"
                    }
                  ]
                }
              references:
                owner_id: data.vcd_org_vdc.main.id
            - name: nsxv-backed
              manifest: |-
                {
                  "description": "NSX-V isolated network",
                  "gateway": "1.1.1.1",
                  "is_shared": true,
                  "name": "nsxv-isolated-network",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.main.id}",
                  "prefix_length": 24,
                  "static_ip_pool": [
                    {
                      "end_address": "1.1.1.20",
                      "start_address": "1.1.1.10"
                    }
                  ]
                }
              references:
                owner_id: data.vcd_org_vdc.main.id
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: tf-mynet
              manifest: |-
                {
                  "name": "my-net",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            description: '- (Optional) An optional description of the network'
            dns_suffix: '- (Optional) A FQDN for the virtual machines on this network'
            dns1: '- (Optional) First DNS server to use.'
            dns2: '- (Optional) Second DNS server to use.'
            end_address: '- (Required) The final address in the IP Range'
            gateway: '- (Required) The gateway for this network (e.g. 192.168.1.1)'
            is_shared: |-
                - (Optional) NSX-V only. Defines if this network is shared between multiple VDCs
                in the Org.  Defaults to false.
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            metadata: '- (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign to this network. Not supported if the network belongs to a VDC Group.'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) A unique name for the network'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations
            owner_id: |-
                - (Optional) VDC or VDC Group ID. Always takes precedence over vdc fields (in resource
                and inherited from provider configuration)
            prefix_length: '- (Required) The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).'
            start_address: '- (Required) The first address in the IP Range'
            static_ip_pool: |-
                - (Optional) A range of IPs permitted to be used as static IPs for
                virtual machines; see IP Pools below for details.
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vdc: |-
                - (Deprecated; Optional) The name of VDC to use. Deprecated  in favor of new field
                owner_id which supports VDC and VDC Group IDs.
        importStatements: []
    vcd_network_routed:
        subCategory: ""
        description: Provides a VMware Cloud Director Org VDC routed Network. This can be used to create, modify, and delete internal networks for vApps to connect.
        name: vcd_network_routed
        title: vcd_network_routed
        examples:
            - name: net
              manifest: |-
                {
                  "dhcp_pool": [
                    {
                      "end_address": "10.10.0.100",
                      "start_address": "10.10.0.2"
                    }
                  ],
                  "edge_gateway": "Edge Gateway Name",
                  "gateway": "10.10.0.1",
                  "name": "my-net",
                  "org": "my-org",
                  "static_ip_pool": [
                    {
                      "end_address": "10.10.0.254",
                      "start_address": "10.10.0.152"
                    }
                  ],
                  "vdc": "my-vdc"
                }
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: tf-mynet
              manifest: |-
                {
                  "edge_gateway": "COMPUTE",
                  "gateway": "COMPUTE",
                  "name": "my-net",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            description: '- (Optional v2.6+) An optional description of the network'
            dhcp_pool: |-
                - (Optional) A range of IPs to issue to virtual machines that don't
                have a static IP; see IP Pools below for details.
            dns_suffix: '- (Optional) A FQDN for the virtual machines on this network'
            dns1: '- (Optional) First DNS server to use.'
            dns2: '- (Optional) Second DNS server to use.'
            edge_gateway: '- (Required) The name of the edge gateway'
            end_address: '- (Required) The final address in the IP Range'
            gateway: (Required) The gateway for this network
            interface_type: |-
                - (Optional v2.6+) An interface for the network. One of internal (default), subinterface,
                distributed (requires the edge gateway to support distributed networks)
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            max_lease_time: '- (Optional) The maximum DHCP lease time to use. Defaults to 7200.'
            metadata: '- (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign to this network.'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) A unique name for the network'
            netmask: '- (Optional) The netmask for the new network. Defaults to 255.255.255.0'
            org: |-
                - (Optional; v2.0+) The name of organization to use, optional if defined at provider level. Useful when
                connected as sysadmin working across different organisations
            shared: |-
                - (Optional) Defines if this network is shared between multiple VDCs
                in the Org.  Defaults to false.
            start_address: '- (Required) The first address in the IP Range'
            static_ip_pool: |-
                - (Optional) A range of IPs permitted to be used as static IPs for
                virtual machines; see IP Pools below for details.
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vdc: '- (Optional; v2.0+) The name of VDC to use, optional if defined at provider level'
        importStatements: []
    vcd_network_routed_v2:
        subCategory: ""
        description: Provides a VMware Cloud Director Org VDC routed Network. This can be used to create, modify, and delete routed VDC networks (backed by NSX-T or NSX-V).
        name: vcd_network_routed_v2
        title: vcd_network_routed_v2
        examples:
            - name: nsxt-backed
              manifest: |-
                {
                  "description": "My routed Org VDC network backed by NSX-T",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "gateway": "1.1.1.1",
                  "name": "nsxt-routed 1",
                  "org": "my-org",
                  "prefix_length": 24,
                  "static_ip_pool": [
                    {
                      "end_address": "1.1.1.20",
                      "start_address": "1.1.1.10"
                    },
                    {
                      "end_address": "1.1.1.103",
                      "start_address": "1.1.1.100"
                    }
                  ]
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
            - name: parent-network
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "gateway": "7.1.1.1",
                  "name": "nsxt-routed-dhcp",
                  "prefix_length": 24,
                  "static_ip_pool": [
                    {
                      "end_address": "7.1.1.20",
                      "start_address": "7.1.1.10"
                    }
                  ]
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
              dependencies:
                vcd_nsxt_network_dhcp.pools: |-
                    {
                      "org_network_id": "${vcd_network_routed_v2.parent-network.id}",
                      "pool": [
                        {
                          "end_address": "7.1.1.110",
                          "start_address": "7.1.1.100"
                        },
                        {
                          "end_address": "7.1.1.112",
                          "start_address": "7.1.1.111"
                        }
                      ]
                    }
            - name: nsxv-backed
              manifest: |-
                {
                  "description": "NSX-V routed network",
                  "edge_gateway_id": "${data.vcd_edgegateway.existing.id}",
                  "gateway": "1.1.1.1",
                  "interface_type": "subinterface",
                  "name": "nsxv-routed-network",
                  "org": "my-org",
                  "prefix_length": 24,
                  "static_ip_pool": [
                    {
                      "end_address": "1.1.1.20",
                      "start_address": "1.1.1.10"
                    }
                  ]
                }
              references:
                edge_gateway_id: data.vcd_edgegateway.existing.id
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: tf-mynet
              manifest: |-
                {
                  "name": "my-net",
                  "org": "my-org"
                }
        argumentDocs:
            description: '- (Optional) An optional description of the network'
            dns_suffix: '- (Optional) A FQDN for the virtual machines on this network'
            dns1: '- (Optional) First DNS server to use.'
            dns2: '- (Optional) Second DNS server to use.'
            edge_gateway_id: '- (Required) The ID of the Edge Gateway (NSX-V or NSX-T)'
            end_address: '- (Required) The final address in the IP Range'
            gateway: '- (Required) The gateway for this network (e.g. 192.168.1.1)'
            interface_type: |-
                - (Optional) An interface for the network. One of internal (default), subinterface,
                distributed (requires the edge gateway to support distributed networks). NSX-T supports only internal
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            metadata: '- (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign to this network. Not supported if the owner edge gateway belongs to a VDC Group.'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) A unique name for the network'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful when
                connected as sysadmin working across different organisations
            prefix_length: '- (Required) The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).'
            start_address: '- (Required) The first address in the IP Range'
            static_ip_pool: |-
                - (Optional) A range of IPs permitted to be used as static IPs for
                virtual machines; see IP Pools below for details.
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vdc: |-
                - (Deprecated; Optional) The name of VDC to use. v3.6+ inherits parent VDC or VDC Group
                from edge_gateway_id)
        importStatements: []
    vcd_nsxt_alb_cloud:
        subCategory: ""
        description: Provides a resource to manage NSX-T ALB Clouds for Providers. An NSX-T Cloud is a service provider-level construct that consists of an NSX-T Manager and an NSX-T Data Center transport zone.
        name: vcd_nsxt_alb_cloud
        title: vcd_nsxt_alb_cloud
        examples:
            - name: first
              manifest: |-
                {
                  "controller_id": "${data.vcd_nsxt_alb_controller.main.id}",
                  "description": "NSX-T ALB Cloud",
                  "importable_cloud_id": "${data.vcd_nsxt_alb_importable_cloud.cld.id}",
                  "name": "nsxt-cloud",
                  "network_pool_id": "${data.vcd_nsxt_alb_importable_cloud.cld.network_pool_id}"
                }
              references:
                controller_id: data.vcd_nsxt_alb_controller.main.id
                importable_cloud_id: data.vcd_nsxt_alb_importable_cloud.cld.id
                network_pool_id: data.vcd_nsxt_alb_importable_cloud.cld.network_pool_id
        argumentDocs:
            controller_id: '- (Required) ALB Controller ID'
            description: '- (Optional) An optional description NSX-T ALB Cloud'
            health_message: '- DetailedHealthMessage contains detailed message on the health of the Cloud'
            health_status: '- HealthStatus contains status of the Load Balancer Cloud. Possible values are:'
            importable_cloud_id: |-
                - (Required) Importable Cloud ID. Can be looked up using vcd_nsxt_alb_importable_cloud data
                source
            name: '- (Required) A name for NSX-T ALB Cloud'
            network_pool_id: |-
                - (Required) Network pool ID for ALB Cloud. Can be looked up using vcd_nsxt_alb_importable_cloud data
                source
            network_pool_name: '- Network Pool Name used by the Cloud'
        importStatements: []
    vcd_nsxt_alb_controller:
        subCategory: ""
        description: Provides a resource to manage NSX-T ALB Controller for Providers. It helps to integrate VMware Cloud Director with NSX-T Advanced Load Balancer deployment. Controller instances are registered with VMware Cloud Director instance. Controller instances serve as a central control plane for the load-balancing services provided by NSX-T Advanced Load Balancer.
        name: vcd_nsxt_alb_controller
        title: vcd_nsxt_alb_controller
        examples:
            - name: first
              manifest: |-
                {
                  "description": "first alb controller",
                  "license_type": "ENTERPRISE",
                  "name": "aviController1",
                  "password": "CHANGE-ME",
                  "url": "https://my.controller",
                  "username": "admin"
                }
        argumentDocs:
            description: '- (Optional) An optional description NSX-T ALB Controller'
            license_type: '- (Optional) License type of ALB Controller (ENTERPRISE or BASIC)'
            name: '- (Required) A name for NSX-T ALB Controller'
            password: '- (Required) The password for ALB Controller. Password will not be refreshed.'
            url: '- (Required) The URL of ALB Controller'
            username: '- (Required) The username for ALB Controller'
            version: '- ALB Controller version (e.g. 20.1.3)'
        importStatements: []
    vcd_nsxt_alb_edgegateway_service_engine_group:
        subCategory: ""
        description: Provides a resource to manage NSX-T ALB Service Engine Group assignment to Edge Gateway.
        name: vcd_nsxt_alb_edgegateway_service_engine_group
        title: vcd_nsxt_alb_edgegateway_service_engine_group
        examples:
            - name: first
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "max_virtual_services": 100,
                  "reserved_virtual_services": 30,
                  "service_engine_group_id": "${data.vcd_nsxt_alb_service_engine_group.first.id}"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
                service_engine_group_id: data.vcd_nsxt_alb_service_engine_group.first.id
        argumentDocs:
            deployed_virtual_services: '-  Number of deployed Virtual Services on this Service Engine Group.'
            edge_gateway_id: |-
                - (Required) An ID of NSX-T Edge Gateway. Can be looked up using
                vcd_nsxt_edgegateway data source.
            max_virtual_services: |-
                - (Optional) Maximum amount of Virtual Services to run on this Service Engine Group. Only for
                Shared Service Engine Groups.
            org: '- (Optional) The name of organization to which the edge gateway belongs. Optional if defined at provider level.'
            reserved_virtual_services: |-
                - (Optional) Number of reserved Virtual Services for this Edge Gateway. Only for Shared
                Service Engine Groups.
            service_engine_group_id: |-
                - (Required) An ID of NSX-T Service Engine Group. Can be looked up using
                vcd_nsxt_alb_service_engine_group data
                source.
        importStatements: []
    vcd_nsxt_alb_pool:
        subCategory: ""
        description: Provides a resource to manage NSX-T ALB Pools for particular NSX-T Edge Gateway. Pools maintain the list of servers assigned to them and perform health monitoring, load balancing, persistence. A pool may only be used or referenced by only one virtual service at a time.
        name: vcd_nsxt_alb_pool
        title: vcd_nsxt_alb_pool
        examples:
            - name: first-pool
              manifest: |-
                {
                  "edge_gateway_id": "${vcd_nsxt_alb_settings.test.edge_gateway_id}",
                  "member": [
                    {
                      "ip_address": "192.168.1.1"
                    }
                  ],
                  "name": "tiny-pool",
                  "org": "sample"
                }
              references:
                edge_gateway_id: vcd_nsxt_alb_settings.test.edge_gateway_id
            - name: first-pool
              manifest: |-
                {
                  "algorithm": "LEAST_LOAD",
                  "default_port": 9000,
                  "edge_gateway_id": "${vcd_nsxt_alb_settings.test.edge_gateway_id}",
                  "graceful_timeout_period": "0",
                  "health_monitor": [
                    {
                      "type": "PING"
                    }
                  ],
                  "member": [
                    {
                      "enabled": false,
                      "ip_address": "192.168.1.1",
                      "port": 8000,
                      "ratio": 2
                    },
                    {
                      "ip_address": "192.168.1.2",
                      "ratio": 4
                    }
                  ],
                  "name": "configured-pool",
                  "org": "sample",
                  "passive_monitoring_enabled": false,
                  "persistence_profile": [
                    {
                      "type": "CLIENT_IP"
                    }
                  ]
                }
              references:
                edge_gateway_id: vcd_nsxt_alb_settings.test.edge_gateway_id
            - name: sample-pool
              manifest: |-
                {
                  "ca_certificate_ids": [
                    "${data.vcd_library_certificate.sample-cert.id}"
                  ],
                  "cn_check_enabled": true,
                  "domain_names": [
                    "domain1",
                    "domain2"
                  ],
                  "edge_gateway_id": "${vcd_nsxt_alb_settings.test.edge_gateway_id}",
                  "name": "sample-cert-pool",
                  "org": "sample"
                }
              references:
                edge_gateway_id: vcd_nsxt_alb_settings.test.edge_gateway_id
        argumentDocs:
            APP_COOKIE: '- Load Balancer reads existing server cookies or URI embedded data such as JSessionID. Cookie name must be provided as value'
            CLIENT_IP: '- The clients IP is used as the identifier and mapped to the server'
            CUSTOM_HTTP_HEADER: '- Custom, static mappings of header values to specific servers are used. Header name must be provided as value'
            HTTP_COOKIE: '- Load Balancer inserts a cookie into HTTP responses. Cookie name must be provided as value'
            TLS: '- Information is embedded in the client''s SSL/TLS ticket ID. This will use default system profile System-Persistence-TLS'
            algorithm: |-
                - (Optional) Optional algorithm for choosing pool members (default LEAST_CONNECTIONS). Other options
                contain ROUND_ROBIN, CONSISTENT_HASH (uses Source IP Address hash), FASTEST_RESPONSE, LEAST_LOAD,
                FEWEST_SERVERS, RANDOM, FEWEST_TASKS, CORE_AFFINITY
            associated_virtual_service_ids: '- A set of associated Virtual Service IDs'
            associated_virtual_services: '- A set of associated Virtual Service names'
            ca_certificate_ids: |-
                - (Optional) A set of CA Certificates to be used when validating certificates presented by the
                pool members. Can be looked up using
                vcd_library_certificate data source
            cn_check_enabled: |-
                - (Optional) Specifies whether to check the common name of the certificate presented by the pool
                member
            default_port: |-
                - (Optional) Default Port defines destination server port used by the traffic sent to the member
                (default 80)
            description: '- (Optional) An optional description NSX-T ALB Pool'
            detailed_health_message: '- human-readable member health description.'
            domain_names: |-
                - (Optional) A set of domain names which will be used to verify the common names or subject alternative
                names presented by the pool member certificates. It is performed only when common name check cn_check_enabled is
                enabled
            edge_gateway_id: |-
                - (Required) An ID of NSX-T Edge Gateway. Can be looked up using
                vcd_nsxt_edgegateway data source
            enabled: '- (Optional) Boolean value if NSX-T ALB Pool should be enabled (default true)'
            enabled_member_count: '- Number of enabled members defined in the Pool'
            graceful_timeout_period: |-
                (Optional) Maximum time in minutes to gracefully disable pool member (default 1). Special
                values are 0 (immediate) and -1 (infinite)
            health_message: '- Health message of NSX-T ALB Pool'
            health_monitor: |-
                - (Optional) A block to define health monitor. Multiple can be used. See Health
                monitor and example for usage details.
            health_status: '- one of UP, DOWN, DISABLED.'
            ip_address: '- (Required) IP address of pool member.'
            marked_down_by: '- A set of health monitors that marked the member as DOWN'
            member: |-
                - (Optional) A block to define pool members. Multiple can be used. See
                Member and example for usage details. Note only one of member,
                member_group_id can be specified.
            member_count: '- Total number of members defined in the Pool'
            member_group_id: |-
                - (Optional; v3.9+, VCD 10.4.1+) A reference to NSX-T IP Set (vcd_nsxt_ip_set).
                Note only one of member, member_group_id can be specified.
            name: '- (Required) A name for NSX-T ALB Pool'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            passive_monitoring_enabled: |-
                (Optional) defines if client traffic should be used to check if pool member is up or down
                (default true)
            persistence_profile: |-
                - (Optional) Persistence profile will ensure that the same user sticks to the same server for a
                desired duration of time. If the persistence profile is unmanaged by Cloud Director, updates that leave the values
                unchanged will continue to use the same unmanaged profile. Any changes made to the persistence profile will cause
                Cloud Director to switch the pool to a profile managed by Cloud Director. See Persistence
                profile and example for usage details.
            port: '- (Optional) Port for receiving traffic - overrides the root value default_port for individual members'
            ratio: (Optional) Ratio of selecting eligible servers in the pool (default 1)
            system_defined: '- A boolean flag if the Health monitor is system defined.'
            type: '(Required) Type of persistence profile. One of:'
            up_member_count: '- Number of members defined in the Pool that are accepting traffic'
            value: '(Optional) is required for some type values: HTTP_COOKIE, CUSTOM_HTTP_HEADER, APP_COOKIE'
        importStatements: []
    vcd_nsxt_alb_service_engine_group:
        subCategory: ""
        description: Provides a resource to manage NSX-T ALB Service Engine Groups. A Service Engine Group is an isolation domain that also defines shared service engine properties, such as size, network access, and failover. Resources in a service engine group can be used for different virtual services, depending on your tenant needs. These resources cannot be shared between different service engine groups.
        name: vcd_nsxt_alb_service_engine_group
        title: vcd_nsxt_alb_service_engine_group
        examples:
            - name: first
              manifest: |-
                {
                  "alb_cloud_id": "${vcd_nsxt_alb_cloud.first.id}",
                  "description": "Service Engine for Terraform documentation",
                  "importable_service_engine_group_name": "Default-Group",
                  "name": "demo-service-engine",
                  "reservation_model": "SHARED",
                  "sync_on_refresh": false
                }
              references:
                alb_cloud_id: vcd_nsxt_alb_cloud.first.id
              dependencies:
                vcd_nsxt_alb_cloud.first: |-
                    {
                      "controller_id": "${vcd_nsxt_alb_controller.first.id}",
                      "description": "first alb cloud",
                      "importable_cloud_id": "${data.vcd_nsxt_alb_importable_cloud.cld.id}",
                      "name": "nsxt-cloud",
                      "network_pool_id": "${data.vcd_nsxt_alb_importable_cloud.cld.network_pool_id}"
                    }
                vcd_nsxt_alb_controller.first: |-
                    {
                      "description": "first alb controller",
                      "license_type": "ENTERPRISE",
                      "name": "aviController1",
                      "password": "Welcome@1234",
                      "url": "https://controller.myXZ",
                      "username": "admin"
                    }
        argumentDocs:
            alb_cloud_id: |-
                - (Required) A reference NSX-T ALB Cloud. Can be looked up using vcd_nsxt_alb_cloud resource or data
                source
            deployed_virtual_services: '- Number of deployed virtual services'
            description: '- (Optional) An optional description NSX-T ALB Service Engine Group'
            ha_mode: 'defines High Availability Mode for Service Engine Group. One off:'
            importable_service_engine_group_name: '- (Required) Name of available Service Engine Group in ALB'
            max_virtual_services: '- Maximum number of virtual services this NSX-T ALB Service Engine Group can run'
            name: '- (Required) A name for NSX-T ALB Service Engine Group'
            overallocated: '- Boolean value stating if there are more deployed virtual services than allocated ones'
            reservation_model: '- (Required) Definition if the Service Engine Group is DEDICATED or SHARED'
            reserved_virtual_services: '- Number of reserved virtual services'
            supported_feature_set: '- (Optional; v3.7+) Feature set of this ALB Service Engine Group (STANDARD or PREMIUM)'
            sync_on_refresh: |-
                (Optional) - A special argument that is not passed to VCD, but alters behaviour of this resource so
                that it performs a Sync operation on every Terraform refresh. Note this may impact refresh performance, but should
                ensure up-to-date information is read. Default is false.
        importStatements: []
    vcd_nsxt_alb_settings:
        subCategory: ""
        description: Provides a resource to manage NSX-T ALB General Settings for particular NSX-T Edge Gateway. One can activate or deactivate NSX-T ALB for a defined Edge Gateway.
        name: vcd_nsxt_alb_settings
        title: vcd_nsxt_alb_settings
        examples:
            - name: org1
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "is_active": true,
                  "org": "my-org"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
            - name: org1
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "ipv6_service_network_specification": "2001:0db8:85a3:0000:0000:8a2e:0370:7334/120",
                  "is_active": true,
                  "is_transparent_mode_enabled": true,
                  "org": "my-org",
                  "service_network_specification": "10.10.255.225/27"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
        argumentDocs:
            edge_gateway_id: |-
                - (Required) An ID of NSX-T Edge Gateway. Can be looked up using
                vcd_nsxt_edgegateway data source
            ipv6_service_network_specification: |-
                (Optional; v3.9+, VCD 10.4.0+) The IPv6 network
                definition in CIDR format which will be used by Load Balancer service in the Edge Gateway. All the
                load balancer service engines associated with the Service Engine Group will be attached to this
                network. This field cannot be updated
            is_active: |-
                - (Required) Boolean value true or false if ALB is enabled. Note Delete operation of this resource
                will set it to false
            is_transparent_mode_enabled: |-
                - (Optional; v3.9+, VCD 10.4.1+) When enabled, it allows to
                configure Preserve Client IP on a Virtual Service
            org: '- (Optional) The name of organization to which the edge gateway belongs. Optional if defined at provider level.'
            service_network_specification: |-
                - (Optional) Gateway CIDR format which will be used by Load
                Balancer service. All the load balancer service engines associated with the Service Engine Group
                will be attached to this network. The subnet prefix length must be 25. If nothing is set and
                ipv6_service_network_specification is not used, the default is 192.168.255.125/25. This
                field cannot be updated
            supported_feature_set: '- (Optional; v3.7+) Feature set of this Edge Gateway if ALB is enabled (STANDARD or PREMIUM)'
        importStatements: []
    vcd_nsxt_alb_virtual_service:
        subCategory: ""
        description: Provides a resource to manage NSX-T ALB Virtual services for particular NSX-T Edge Gateway. A virtual service advertises an IP address and ports to the external world and listens for client traffic. When a virtual service receives traffic, it directs it to members in ALB Pool.
        name: vcd_nsxt_alb_virtual_service
        title: vcd_nsxt_alb_virtual_service
        examples:
            - name: test
              manifest: |-
                {
                  "application_profile_type": "HTTP",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "name": "new-virtual-service",
                  "org": "my-org",
                  "pool_id": "${vcd_nsxt_alb_pool.test.id}",
                  "service_engine_group_id": "${vcd_nsxt_alb_edgegateway_service_engine_group.assignment.service_engine_group_id}",
                  "service_port": [
                    {
                      "start_port": 80,
                      "type": "TCP_PROXY"
                    }
                  ],
                  "virtual_ip_address": "${tolist(data.vcd_nsxt_edgegateway.existing.subnet)[0].primary_ip}"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
                pool_id: vcd_nsxt_alb_pool.test.id
                service_engine_group_id: vcd_nsxt_alb_edgegateway_service_engine_group.assignment.service_engine_group_id
              dependencies:
                vcd_nsxt_alb_pool.test: |-
                    {
                      "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                      "name": "test-pool",
                      "org": "my-org"
                    }
            - name: test
              manifest: |-
                {
                  "application_profile_type": "L4_TLS",
                  "ca_certificate_id": "${data.vcd_library_certificate.org-cert-1.id}",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "name": "new-virtual-service",
                  "org": "my-org",
                  "pool_id": "${vcd_nsxt_alb_pool.test.id}",
                  "service_engine_group_id": "${vcd_nsxt_alb_edgegateway_service_engine_group.assignment.service_engine_group_id}",
                  "service_port": [
                    {
                      "ssl_enabled": true,
                      "start_port": 80,
                      "type": "TCP_PROXY"
                    },
                    {
                      "end_port": 85,
                      "ssl_enabled": true,
                      "start_port": 84,
                      "type": "TCP_PROXY"
                    },
                    {
                      "start_port": 87,
                      "type": "TCP_PROXY"
                    }
                  ],
                  "virtual_ip_address": "${tolist(data.vcd_nsxt_edgegateway.existing.subnet)[0].primary_ip}"
                }
              references:
                ca_certificate_id: data.vcd_library_certificate.org-cert-1.id
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
                pool_id: vcd_nsxt_alb_pool.test.id
                service_engine_group_id: vcd_nsxt_alb_edgegateway_service_engine_group.assignment.service_engine_group_id
              dependencies:
                vcd_nsxt_alb_pool.test: |-
                    {
                      "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                      "name": "test-pool",
                      "org": "my-org"
                    }
            - name: test
              manifest: |-
                {
                  "application_profile_type": "HTTP",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "is_transparent_mode_enabled": true,
                  "name": "new-virtual-service",
                  "org": "my-org",
                  "pool_id": "${vcd_nsxt_alb_pool.test.id}",
                  "service_engine_group_id": "${vcd_nsxt_alb_edgegateway_service_engine_group.assignment.service_engine_group_id}",
                  "service_port": [
                    {
                      "start_port": 80,
                      "type": "TCP_PROXY"
                    }
                  ],
                  "virtual_ip_address": "${tolist(data.vcd_nsxt_edgegateway.existing.subnet)[0].primary_ip}"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
                pool_id: vcd_nsxt_alb_pool.test.id
                service_engine_group_id: vcd_nsxt_alb_edgegateway_service_engine_group.assignment.service_engine_group_id
              dependencies:
                vcd_nsxt_alb_pool.test: |-
                    {
                      "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                      "member_group_id": "${data.vcd_nsxt_ip_set.frontend.id}",
                      "name": "test-pool",
                      "org": "my-org"
                    }
        argumentDocs:
            application_profile_type: '- (Required) One of HTTP, HTTPS, L4, L4_TLS.'
            ca_certificate_id: |-
                - (Optional) ID reference of CA certificate. Required when application_profile_type is HTTPS
                or L4_TLS
            description: '- (Optional) An optional description NSX-T ALB Virtual Service'
            edge_gateway_id: |-
                - (Required) An ID of NSX-T Edge Gateway. Can be looked up using
                vcd_nsxt_edgegateway data source
            end_port: (Optional) Only required to specify port range and is not needed for single port values
            is_transparent_mode_enabled: |-
                - (Optional; v3.9+, VCD 10.4.1+) Preserves Client IP on a
                Virtual Service. Note - the following criteria must be matched to make transparent mode work:
            name: '- (Required) A name for NSX-T ALB Virtual Service'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            pool_id: |-
                - (Required) A reference to NSX-T ALB Pool. Can be looked up using vcd_nsxt_alb_pool resource or data
                source
            service_engine_group_id: |-
                - (Required) A reference to NSX-T ALB Service Engine Group. Can be looked up using
                vcd_nsxt_alb_edgegateway_service_engine_group resource or data source
            service_port: |-
                - (Required) A block to define port, port range and traffic type. Multiple can be used. See
                service_port and example for usage details.
            ssl_enabled: (Optional) Must be enabled if CA certificate is to be used for this port. Default false
            start_port: (Required) Starting port in the range or exact port number
            type: (Required) One of TCP_PROXY, TCP_FAST_PATH, UDP_FAST_PATH
            virtual_ip_address: '- (Required) IP Address for the service to listen on.'
        importStatements: []
    vcd_nsxt_app_port_profile:
        subCategory: ""
        description: Provides a resource to manage NSX-T Application Port Profiles. Application Port Profiles include a combination of a protocol and a port, or a group of ports, that is used for Firewall and NAT services on the Edge Gateway. In addition to the default Port Profiles that are preconfigured for NSX-T Data Center, you can create custom Application Port Profiles.
        name: vcd_nsxt_app_port_profile
        title: vcd_nsxt_app_port_profile
        examples:
            - name: icmpv4
              manifest: |-
                {
                  "app_port": [
                    {
                      "protocol": "ICMPv4"
                    }
                  ],
                  "context_id": "${data.vcd_nsxt_manager.first.id}",
                  "description": "Application port profile for ICMPv4",
                  "name": "ICMP custom profile",
                  "org": "System",
                  "scope": "PROVIDER"
                }
              references:
                context_id: data.vcd_nsxt_manager.first.id
            - name: custom-app
              manifest: |-
                {
                  "app_port": [
                    {
                      "protocol": "ICMPv6"
                    },
                    {
                      "port": [
                        "2000",
                        "2010-2020",
                        "12345",
                        "65000"
                      ],
                      "protocol": "TCP"
                    },
                    {
                      "port": [
                        "40000-60000"
                      ],
                      "protocol": "UDP"
                    }
                  ],
                  "context_id": "${data.vcd_org_vdc.v1.id}",
                  "description": "Application port profile for custom application",
                  "name": "custom app profile",
                  "org": "my-org",
                  "scope": "TENANT"
                }
              references:
                context_id: data.vcd_org_vdc.v1.id
        argumentDocs:
            PROVIDER: 'scoped import path is:'
            TENANT: 'scoped import path is:'
            app_port: '- (Required) At least one block of Application Port definition'
            context_id: |-
                - (Optional) ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields vdc
                and nsxt_manager_id. It accepts VDC, VDC Group or NSX-T Manager ID.
            name: '- (Required) A unique name for Security Group'
            nsxt_manager_id: |-
                - (Deprecated; Optional) Required only when scope is PROVIDER. Deprecated
                and replaced by context_id
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            port: '- (Optional) A set of port numbers or port ranges (e.g. "10000", "20000-20010")'
            protocol: '- (Required) One of protocols ICMPv4, ICMPv6, TCP, UDP'
            scope: '- (Required) Application Port Profile scope - PROVIDER, TENANT'
            vdc: |-
                - (Deprecated; Optional) The name of VDC to use, optional if defined at provider level.
                Deprecated and replaced by context_id
        importStatements: []
    vcd_nsxt_distributed_firewall:
        subCategory: ""
        description: The Distributed Firewall allows user to segment organization virtual data center entities, such as virtual machines, based on virtual machine names and attributes.
        name: vcd_nsxt_distributed_firewall
        title: vcd_nsxt_distributed_firewall
        examples:
            - name: t1
              manifest: |-
                {
                  "org": "my-org",
                  "rule": [
                    {
                      "action": "ALLOW",
                      "app_port_profile_ids": [
                        "${data.vcd_nsxt_app_port_profile.WINS.id}",
                        "${data.vcd_nsxt_app_port_profile.FTP.id}"
                      ],
                      "comment": "My first rule to allow everything",
                      "description": "description",
                      "name": "rule1",
                      "source_groups_excluded": true,
                      "source_ids": [
                        "${data.vcd_nsxt_ip_set.set1.id}",
                        "${data.vcd_nsxt_ip_set.set2.id}"
                      ]
                    },
                    {
                      "action": "DROP",
                      "direction": "IN_OUT",
                      "enabled": false,
                      "logging": true,
                      "name": "rule2",
                      "network_context_profile_ids": [
                        "${vcd_nsxt_network_context_profile.cp1.id}"
                      ]
                    },
                    {
                      "action": "REJECT",
                      "ip_protocol": "IPV4",
                      "name": "rule3"
                    },
                    {
                      "action": "ALLOW",
                      "destination_groups_excluded": false,
                      "direction": "OUT",
                      "ip_protocol": "IPV6",
                      "name": "rule4",
                      "source_groups_excluded": false
                    },
                    {
                      "action": "ALLOW",
                      "direction": "IN",
                      "ip_protocol": "IPV6",
                      "name": "rule5"
                    }
                  ],
                  "vdc_group_id": "${vcd_vdc_group.existing.id}"
                }
              references:
                vdc_group_id: vcd_vdc_group.existing.id
        argumentDocs:
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            rule: |-
                - (Required) One or more blocks with Firewall Rule definitions. Order
                defines firewall rule precedence
            rule.action: |-
                - (Required) Defines if it should ALLOW, DROP, REJECT traffic. REJECT is only
                supported in VCD 10.2.2+
            rule.app_port_profile_ids: '- (Optional) An optional set of Application Port Profiles.'
            rule.comment: '- (Optional; VCD 10.3.2+) Comment field shown in UI'
            rule.description: '- (Optional) Description of firewall rule (not shown in UI)'
            rule.destination_groups_excluded: |-
                - (Optional; VCD 10.3.2+) - reverses value of destination_ids for
                the rule to match everything except specified IDs.
            rule.destination_ids: '- (Optional) A set of source object Firewall Groups (IP Sets or Security groups). Leaving it empty matches Any (all)'
            rule.direction: '- (Optional) One of IN, OUT, or IN_OUT. (default IN_OUT)'
            rule.enabled: '- (Optional) Defines if the rule is enabled (default true)'
            rule.ip_protocol: '- (Optional) One of IPV4,  IPV6, or IPV4_IPV6 (default IPV4_IPV6)'
            rule.logging: '- (Optional) Defines if logging for this rule is enabled (default false)'
            rule.name: '- (Required) Explanatory name for firewall rule (uniqueness not enforced)'
            rule.network_context_profile_ids: |-
                - (Optional) An optional set of Network Context Profiles. Can be
                looked up using vcd_nsxt_network_context_profile data source.
            rule.source_groups_excluded: |-
                - (Optional; VCD 10.3.2+) - reverses value of source_ids for the rule to
                match everything except specified IDs.
            rule.source_ids: |-
                - (Optional) A set of source object Firewall Groups (IP Sets or Security groups).
                Leaving it empty matches Any (all)
            vdc_group_id: |-
                - (Required) The ID of VDC Group to manage Distributed Firewall in. Can be looked
                up using vcd_vdc_group resource or data source.
        importStatements: []
    vcd_nsxt_dynamic_security_group:
        subCategory: ""
        description: Provides a resource to manage NSX-T Dynamic Security Groups. Dynamic Security Groups group Virtual Machines based on specific criteria (VM Names or Security tags) to which Distributed Firewall Rules apply.
        name: vcd_nsxt_dynamic_security_group
        title: vcd_nsxt_dynamic_security_group
        examples:
            - name: group1
              manifest: |-
                {
                  "criteria": [
                    {
                      "rule": [
                        {
                          "operator": "EQUALS",
                          "type": "VM_TAG",
                          "value": "tag-equals"
                        },
                        {
                          "operator": "CONTAINS",
                          "type": "VM_TAG",
                          "value": "tag-contains"
                        },
                        {
                          "operator": "STARTS_WITH",
                          "type": "VM_TAG",
                          "value": "tag-starts-with"
                        },
                        {
                          "operator": "ENDS_WITH",
                          "type": "VM_TAG",
                          "value": "tag-ends-with"
                        }
                      ]
                    },
                    {
                      "rule": [
                        {
                          "operator": "CONTAINS",
                          "type": "VM_NAME",
                          "value": "name-contains-4"
                        },
                        {
                          "operator": "STARTS_WITH",
                          "type": "VM_NAME",
                          "value": "starts_with2"
                        },
                        {
                          "operator": "CONTAINS",
                          "type": "VM_NAME",
                          "value": "name-contains-22"
                        },
                        {
                          "operator": "STARTS_WITH",
                          "type": "VM_NAME",
                          "value": "starts_with22"
                        }
                      ]
                    },
                    {
                      "rule": [
                        {
                          "operator": "CONTAINS",
                          "type": "VM_NAME",
                          "value": "name-contains3"
                        },
                        {
                          "operator": "STARTS_WITH",
                          "type": "VM_NAME",
                          "value": "starts_with3"
                        },
                        {
                          "operator": "CONTAINS",
                          "type": "VM_NAME",
                          "value": "name-contains33"
                        },
                        {
                          "operator": "STARTS_WITH",
                          "type": "VM_NAME",
                          "value": "starts_with33"
                        }
                      ]
                    }
                  ],
                  "name": "dynamic-security-group-example",
                  "org": "cloud",
                  "vdc_group_id": "${data.vcd_vdc_group.group1.id}"
                }
              references:
                vdc_group_id: data.vcd_vdc_group.group1.id
            - name: group1
              manifest: |-
                {
                  "name": "empty-dynamic-security-group",
                  "org": "cloud",
                  "vdc_group_id": "${data.vcd_vdc_group.group1.id}"
                }
              references:
                vdc_group_id: data.vcd_vdc_group.group1.id
        argumentDocs:
            criteria: |-
                (Optional) Up to 3 criteria for matching VMs. List of criteria is matched with boolean
                OR operation and matching any of defined criteria will include objects. Each criteria can
                contains up to 4 rule definitions.
            description: '- (Optional) An optional description of the Dynamic Security Group'
            member_vms: A set of member VMs (if exist). see Member VMs below for details.
            name: '- (Required) A unique name for Dynamic Security Group'
            operator: |-
                - (Required) Supported operators depend on type. VM_TAG supports 4 operator types
                with self explanatory names:
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            rule: |-
                (Optional) Up to 4 rules for matching VMs. List of rules are matched with boolean AND
                operation and all defines rules must match to include object. See Rule for rule
                definition structure.
            type: '- (Required) VM_NAME or VM_TAG'
            value: '- (Required) String to evaluate by given type and operator'
            vapp_id: '- Parent vApp ID for member VM (empty for standalone VMs)'
            vapp_name: '- Parent vApp Name for member VM (empty for standalone VMs)'
            vdc_group_id: '- (Required) VDC Group ID for Dynamic Security Group creation.'
            vm_id: '- Member VM ID'
            vm_name: '- Member VM name'
        importStatements: []
    vcd_nsxt_edgegateway:
        subCategory: ""
        description: Provides a VMware Cloud Director NSX-T edge gateway. This can be used to create, update, and delete NSX-T edge gateways connected to external networks.
        name: vcd_nsxt_edgegateway
        title: vcd_nsxt_edgegateway
        examples:
            - name: nsxt-edge
              manifest: |-
                {
                  "description": "Description",
                  "external_network_id": "${data.vcd_external_network_v2.nsxt-ext-net.id}",
                  "name": "nsxt-edge",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.vdc1.id}",
                  "subnet": [
                    {
                      "allocated_ips": [
                        {
                          "end_address": "10.150.160.138",
                          "start_address": "10.150.160.137"
                        }
                      ],
                      "gateway": "10.150.191.253",
                      "prefix_length": "19",
                      "primary_ip": "10.150.160.137"
                    }
                  ]
                }
              references:
                external_network_id: data.vcd_external_network_v2.nsxt-ext-net.id
                owner_id: data.vcd_org_vdc.vdc1.id
            - name: nsxt-edge
              manifest: |-
                {
                  "dedicate_external_network": true,
                  "description": "Description",
                  "edge_cluster_id": "${data.vcd_nsxt_edge_cluster.secondary.id}",
                  "external_network_id": "${data.vcd_external_network_v2.nsxt-ext-net.id}",
                  "name": "nsxt-edge",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.vdc1.id}",
                  "subnet": [
                    {
                      "allocated_ips": [
                        {
                          "end_address": "10.150.160.137",
                          "start_address": "10.150.160.137"
                        }
                      ],
                      "gateway": "10.150.191.253",
                      "prefix_length": "19",
                      "primary_ip": "10.150.160.137"
                    },
                    {
                      "allocated_ips": [
                        {
                          "end_address": "77.77.77.12",
                          "start_address": "77.77.77.10"
                        }
                      ],
                      "gateway": "77.77.77.1",
                      "prefix_length": "26"
                    },
                    {
                      "allocated_ips": [
                        {
                          "end_address": "88.88.88.92",
                          "start_address": "88.88.88.91"
                        },
                        {
                          "end_address": "88.88.88.95",
                          "start_address": "88.88.88.94"
                        },
                        {
                          "end_address": "88.88.88.98",
                          "start_address": "88.88.88.97"
                        }
                      ],
                      "gateway": "88.88.88.1",
                      "prefix_length": "24"
                    }
                  ]
                }
              references:
                edge_cluster_id: data.vcd_nsxt_edge_cluster.secondary.id
                external_network_id: data.vcd_external_network_v2.nsxt-ext-net.id
                owner_id: data.vcd_org_vdc.vdc1.id
            - name: nsxt-edge
              manifest: |-
                {
                  "dedicate_external_network": true,
                  "description": "Description",
                  "edge_cluster_id": "${data.vcd_nsxt_edge_cluster.secondary.id}",
                  "external_network_id": "${data.vcd_external_network_v2.nsxt-ext-net.id}",
                  "name": "nsxt-edge",
                  "org": "my-org",
                  "owner_id": "${data.vcd_vdc_group.group1.id}",
                  "starting_vdc_id": "${data.vcd_org_vdc.vdc-1.id}",
                  "subnet": [
                    {
                      "allocated_ips": [
                        {
                          "end_address": "10.150.160.137",
                          "start_address": "10.150.160.137"
                        }
                      ],
                      "gateway": "10.150.191.253",
                      "prefix_length": "19",
                      "primary_ip": "10.150.160.137"
                    },
                    {
                      "allocated_ips": [
                        {
                          "end_address": "77.77.77.12",
                          "start_address": "77.77.77.10"
                        }
                      ],
                      "gateway": "77.77.77.1",
                      "prefix_length": "26"
                    }
                  ]
                }
              references:
                edge_cluster_id: data.vcd_nsxt_edge_cluster.secondary.id
                external_network_id: data.vcd_external_network_v2.nsxt-ext-net.id
                owner_id: data.vcd_vdc_group.group1.id
                starting_vdc_id: data.vcd_org_vdc.vdc-1.id
            - name: nsxt-edge
              manifest: |-
                {
                  "external_network_id": "${data.vcd_external_network_v2.ext-net-nsxt.id}",
                  "name": "nsxt-edge",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.vdc1.id}",
                  "subnet_with_total_ip_count": [
                    {
                      "gateway": "77.77.77.1",
                      "prefix_length": "24",
                      "primary_ip": "77.77.77.254"
                    },
                    {
                      "gateway": "88.77.77.1",
                      "prefix_length": "24"
                    }
                  ],
                  "total_allocated_ip_count": 100
                }
              references:
                external_network_id: data.vcd_external_network_v2.ext-net-nsxt.id
                owner_id: data.vcd_org_vdc.vdc1.id
            - name: nsxt-edge
              manifest: |-
                {
                  "external_network_id": "${data.vcd_external_network_v2.ext-net-nsxt.id}",
                  "name": "nsxt-edge",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.vdc1.id}",
                  "subnet_with_ip_count": [
                    {
                      "allocated_ip_count": 9,
                      "gateway": "77.77.77.1",
                      "prefix_length": "24",
                      "primary_ip": "77.77.77.10"
                    },
                    {
                      "allocated_ip_count": 15,
                      "gateway": "88.77.77.1",
                      "prefix_length": "24"
                    }
                  ]
                }
              references:
                external_network_id: data.vcd_external_network_v2.ext-net-nsxt.id
                owner_id: data.vcd_org_vdc.vdc1.id
            - name: nsxt-edge
              manifest: |-
                {
                  "description": "Description",
                  "external_network_id": "${data.vcd_external_network_v2.nsxt-ext-net.id}",
                  "name": "nsxt-edge",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.vdc-1.id}",
                  "subnet": [
                    {
                      "allocated_ips": [
                        {
                          "end_address": "10.10.10.30",
                          "start_address": "10.10.10.10"
                        }
                      ],
                      "gateway": "10.10.10.1",
                      "prefix_length": "24",
                      "primary_ip": "10.10.10.10"
                    }
                  ]
                }
              references:
                external_network_id: data.vcd_external_network_v2.nsxt-ext-net.id
                owner_id: data.vcd_org_vdc.vdc-1.id
        argumentDocs:
            Provider.import_separator: or variable VCD_IMPORT_SEPARATOR
            dedicate_external_network: '- (Optional) Dedicating the External Network will enable Route Advertisement for this Edge Gateway. Default false.'
            description: '- (Optional) A unique name for the edge gateway.'
            edge_cluster_id: '- (Optional) Specific Edge Cluster ID if required'
            external_network_id: |-
                - (Required) An external network ID. Note: Data source vcd_external_network_v2
                can be used to lookup ID by name.
            name: '- (Required) A unique name for the edge gateway.'
            org: '- (Optional) The name of organization to which the VDC belongs. Optional if defined at provider level.'
            owner_id: |-
                - (Optional, v3.6+,VCD 10.2+) The ID of VDC or VDC Group. Note: Data sources
                vcd_vdc_group or
                vcd_org_vdc can be used to lookup IDs by
                name
            primary_ip: '- Primary IP address exposed for an easy access without nesting.'
            starting_vdc_id: |-
                - (Optional, v3.6+,VCD 10.2+)  If owner_id is a VDC Group, by default Edge
                Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
                to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
                Group) Note: It can only be used when owner_id is a VDC Group.
            subnet: |-
                - (Optional) One or more subnets defined for Edge Gateway. One of
                subnet, subnet_with_total_ip_count or subnet_with_ip_count is required. Read more in IP
                allocation modes section.
            subnet.allocated_ips: |-
                (Required) - One or more blocks of ip ranges
                in the subnet to be allocated
            subnet.end_address: '- (Required) - End IP address of a range'
            subnet.gateway: '- (Required) - Gateway for a subnet in external network'
            subnet.prefix_length: |-
                - (Required) - Prefix length of a subnet in external network (e.g. 24 for netmask
                of 255.255.255.0)
            subnet.primary_ip: |-
                - (Optional) - Primary IP address for edge gateway. Note: primary_ip must fall
                into allocated_ips block range as otherwise plan will not be clean with a new range defined for
                that particular block. There can only be one primary_ip defined for edge gateway.
            subnet.start_address: '- (Required) - Start IP address of a range'
            subnet_with_ip_count: |-
                - (v3.9+) One or more
                subnets defined for Edge Gateway. One of subnet,
                subnet_with_total_ip_count or subnet_with_ip_count is required. Read more in IP
                allocation modes section.
            subnet_with_total_ip_count: |-
                - (Optional, v3.9+) One or more
                subnets defined for Edge Gateway. One of subnet,
                subnet_with_total_ip_count or subnet_with_ip_count is required. Read more in IP
                allocation modes section.
            subnet_with_total_ip_count.gateway: '- (Required) - Gateway for a subnet in external network'
            subnet_with_total_ip_count.prefix_length: '- (Required) - Prefix length of a subnet in external network (e.g. 24 for netmask of 255.255.255.0)'
            subnet_with_total_ip_count.primary_ip: |-
                (Required) - Exactly one Primary IP is required for an Edge Gateway. It should be
                defined in any of the subnet_with_total_ip_count blocks
            the subnet_with_ip_count.allocated_ip_count: (Required) - Number of allocated IPs from that particular subnet
            the subnet_with_ip_count.gateway: '- (Required) - Gateway for a subnet in external network'
            the subnet_with_ip_count.prefix_length: '- (Required) - Prefix length of a subnet in external network (e.g. 24 for netmask of 255.255.255.0)'
            the subnet_with_ip_count.primary_ip: |-
                (Required) - Exactly one Primary IP is required for an Edge Gateway. It should be
                defined in any of the subnet_with_ip_count blocks
            total_allocated_ip_count: |-
                - (Optional, v3.9+) Required with subnet_with_total_ip_count. It is
                read-only attribute with other other allocation models subnet and subnet_with_ip_count.
            unused_ip_count: Used IP count in this Edge Gateway
            used_ip_count: '- Unused IP count in this Edge Gateway'
            vdc: |-
                - (Optional) Deprecated in favor of owner_id. The name of VDC that owns the edge
                gateway. Can be inherited from provider configuration if not defined here.
        importStatements: []
    vcd_nsxt_edgegateway_bgp_configuration:
        subCategory: ""
        description: Provides a resource to manage BGP configuration on NSX-T Edge Gateway that has a dedicated Tier-0 Gateway or VRF.
        name: vcd_nsxt_edgegateway_bgp_configuration
        title: vcd_nsxt_edgegateway_bgp_configuration
        examples:
            - name: testing
              manifest: |-
                {
                  "ecmp_enabled": true,
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.testing.id}",
                  "enabled": false,
                  "graceful_restart_mode": "HELPER_ONLY",
                  "graceful_restart_timer": 190,
                  "local_as_number": "65430",
                  "org": "my-org",
                  "stale_route_timer": 600
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.testing.id
            - name: testing
              manifest: |-
                {
                  "ecmp_enabled": true,
                  "edge_gateway_id": "${vcd_nsxt_edgegateway.vrf-backed.id}",
                  "enabled": true,
                  "org": "my-org"
                }
              references:
                edge_gateway_id: vcd_nsxt_edgegateway.vrf-backed.id
        argumentDocs:
            DISABLE: '- Both graceful restart and helper modes are disabled'
            GRACEFUL_AND_HELPER: '- The ability of a BGP speaker to advertise its restart to its peers'
            HELPER_ONLY: |-
                - The ability for a BGP speaker to indicate its ability to preserve forwarding
                state during BGP restart
            ecmp_enabled: '- (Optional) - A flag indicating whether ECMP is enabled or not'
            edge_gateway_id: |-
                - (Required) The ID of the Edge Gateway (NSX-T only). Can be looked up using
                vcd_nsxt_edgegateway datasource
            enabled: '- (Required) Defines if BGP service is enabled or not'
            graceful_restart_mode: |-
                - (Optional) - Describes Graceful Restart configuration Modes for BGP
                configuration on an Edge Gateway. Read only for VRF backed Edge Gateways. Possible options are:
            graceful_restart_timer: |-
                - (Optional) Maximum time taken (in seconds) for a BGP session to be
                established after a restart. If the session is not re-established within this timer, the receiving
                speaker will delete all the stale routes from that peer. Read only for VRF backed Edge Gateways.
            local_as_number: |-
                - (Optional) BGP autonomous systems (AS) number to advertise to BGP peers. BGP
                AS number can be specified in either ASPLAIN or ASDOT formats, like ASPLAIN format : '65546',
                ASDOT format : '1.10'. Read only for VRF backed Edge Gateways
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations
            stale_route_timer: |-
                - (Optional) - Maximum time (in seconds) before stale routes are removed when
                BGP restarts. Read only for VRF backed Edge Gateways
        importStatements: []
    vcd_nsxt_edgegateway_bgp_ip_prefix_list:
        subCategory: ""
        description: Provides a resource to manage NSX-T Edge Gateway BGP IP Prefix Lists. IP prefix lists can contain single or multiple IP addresses and can be used to assign BGP neighbors with access permissions for route advertisement.
        name: vcd_nsxt_edgegateway_bgp_ip_prefix_list
        title: vcd_nsxt_edgegateway_bgp_ip_prefix_list
        examples:
            - name: testing
              manifest: |-
                {
                  "description": "This definition is meant only to demostrate capabilities",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.testing.id}",
                  "ip_prefix": [
                    {
                      "action": "PERMIT",
                      "network": "10.10.10.0/24"
                    },
                    {
                      "action": "DENY",
                      "network": "20.10.10.0/24"
                    },
                    {
                      "action": "DENY",
                      "network": "2001:db8::/48"
                    },
                    {
                      "action": "DENY",
                      "greater_than_or_equal_to": "25",
                      "less_than_or_equal_to": "27",
                      "network": "30.10.10.0/24"
                    },
                    {
                      "action": "PERMIT",
                      "greater_than_or_equal_to": "16",
                      "less_than_or_equal_to": "24",
                      "network": "40.0.0.0/8"
                    }
                  ],
                  "name": "sample-ip-prefix-list",
                  "org": "cloud"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.testing.id
        argumentDocs:
            action: '- (Required) Can be PERMIT or DENY'
            description: '- (Optional) Description of IP Prefix List'
            edge_gateway_id: |-
                - (Required) The ID of the Edge Gateway (NSX-T only). Can be looked up using
                vcd_nsxt_edgegateway datasource
            greater_than_or_equal_to: |-
                - (Optional) Greater than or equal to (ge) subnet mask to match. For
                example, 192.168.100.3/27 ge 26 le 32 modifiers match subnet masks greater than or equal to
                26-bits and less than or equal to 32-bits in length.
            ip_prefix: |-
                - (Required) At least one ip_prefix definition. See IP Prefix for
                definition structure.
            less_than_or_equal_to: |-
                - (Optional) Less than or equal to (le) subnet mask to match. For example,
                192.168.100.3/27 ge 26 le 32 modifiers match subnet masks greater than or equal to 26-bits and
                less than or equal to 32-bits in length.
            name: '- (Required) The Name of IP Prefix List'
            network: |-
                - (Required) Network information should be in CIDR notation. (e.g. IPv4
                192.168.100.0/24, IPv6 2001:db8::/48)
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations
        importStatements: []
    vcd_nsxt_edgegateway_bgp_neighbor:
        subCategory: ""
        description: Provides a resource to manage NSX-T Edge Gateway BGP Neighbors and their configuration.
        name: vcd_nsxt_edgegateway_bgp_neighbor
        title: vcd_nsxt_edgegateway_bgp_neighbor
        examples:
            - name: neighbor-one
              manifest: |-
                {
                  "allow_as_in": false,
                  "bfd_dead_multiple": 5,
                  "bfd_enabled": true,
                  "bfd_interval": 800,
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.testing.id}",
                  "graceful_restart_mode": "GRACEFUL_AND_HELPER",
                  "hold_down_timer": 400,
                  "in_filter_ip_prefix_list_id": "${data.vcd_nsxt_edgegateway_bgp_ip_prefix_list.in-1.id}",
                  "ip_address": "1.1.1.1",
                  "keep_alive_timer": 78,
                  "org": "datacloud",
                  "out_filter_ip_prefix_list_id": "${data.vcd_nsxt_edgegateway_bgp_ip_prefix_list.out-1.id}",
                  "remote_as_number": "62513",
                  "route_filtering": "IPV4"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.testing.id
                in_filter_ip_prefix_list_id: data.vcd_nsxt_edgegateway_bgp_ip_prefix_list.in-1.id
                out_filter_ip_prefix_list_id: data.vcd_nsxt_edgegateway_bgp_ip_prefix_list.out-1.id
        argumentDocs:
            DISABLE: '- Overrides the global edge gateway settings and disables graceful restart mode for this neighbor.'
            GRACEFUL_AND_HELPER: '- Overrides the global edge gateway settings and configures graceful restart mode as Graceful restart and Helper for this neighbor.'
            HELPER_ONLY: '- Overrides the global edge gateway settings and configures graceful restart mode as Helper only for this neighbor.'
            allow_as_in: '- (Optional) BGP Allow-as-in feature is used to allow the BGP speaker to accept the BGP updates even if its own BGP AS number is in the AS-Path attribute.'
            bfd_dead_multiple: '- (Optional) Number of times a heartbeat packet is missed before BFD declares that the neighbor is down'
            bfd_enabled: '- (Optional) Should Bidirectional Forwarding Detection (BFD) be enabled'
            bfd_interval: '- (Optional) Time interval (in milliseconds) between heartbeat packets'
            edge_gateway_id: |-
                - (Required) The ID of the edge gateway (NSX-T only). Can be looked up using
                vcd_nsxt_edgegateway datasource
            graceful_restart_mode: '- (Optional) BGP Neighbor Graceful Restart Mode. One of:'
            hold_down_timer: '- (Optional) Time interval (in seconds) before declaring a BGP peer dead'
            in_filter_ip_prefix_list_id: '- (Optional) The ID of the IP Prefix List to be used for filtering incoming BGP routes'
            ip_address: '- (Required) BGP Neighbor IP Address (IPv4 or IPv6)'
            keep_alive_timer: '- (Optional) Time interval (in seconds) between sending keep-alive messages to a BGP peer'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations
            out_filter_ip_prefix_list_id: '- (Optional) The ID of the IP Prefix List to be used for filtering outgoing BGP routes'
            password: '- (Optional) BGP Neighbor Password'
            remote_as_number: '- (Required) BGP Neighbor Remote Autonomous System (AS) Number'
            route_filtering: '- (Optional) Route filtering by IP Address family. One of DISABLED, IPV4, IPV6'
        importStatements: []
    vcd_nsxt_edgegateway_rate_limiting:
        subCategory: ""
        description: Provides a resource to manage NSX-T Edge Gateway Rate Limiting (QoS) configuration.
        name: vcd_nsxt_edgegateway_rate_limiting
        title: vcd_nsxt_edgegateway_rate_limiting
        examples:
            - name: testing-in-vdc
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.testing-in-vdc.id}",
                  "egress_profile_id": "${data.vcd_nsxt_edgegateway_qos_profile.qos-1.id}",
                  "ingress_profile_id": "${data.vcd_nsxt_edgegateway_qos_profile.qos-1.id}",
                  "org": "datacloud"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.testing-in-vdc.id
                egress_profile_id: data.vcd_nsxt_edgegateway_qos_profile.qos-1.id
                ingress_profile_id: data.vcd_nsxt_edgegateway_qos_profile.qos-1.id
        argumentDocs:
            edge_gateway_id: '- (Required) NSX-T Edge Gateway ID'
            egress_profile_id: |-
                - (Optional) A QoS profile to apply for egress traffic. Note leaving empty
                means unlimited.
            ingress_profile_id: |-
                - (Optional) A QoS profile to apply for ingress traffic. Note leaving empty
                means unlimited.
            org: '- (Required) Org in which the NSX-T Edge Gateway is located'
        importStatements: []
    vcd_nsxt_firewall:
        subCategory: ""
        description: Provides a resource to manage NSX-T Firewall. Firewalls allow user to control the incoming and outgoing network traffic to and from an NSX-T Data Center Edge Gateway.
        name: vcd_nsxt_firewall
        title: vcd_nsxt_firewall
        examples:
            - name: testing
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.testing.id}",
                  "org": "my-org",
                  "rule": [
                    {
                      "action": "ALLOW",
                      "direction": "IN_OUT",
                      "ip_protocol": "IPV4",
                      "name": "allow all IPv4 traffic"
                    }
                  ]
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.testing.id
            - name: testing
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.testing.id}",
                  "org": "my-org",
                  "rule": [
                    {
                      "action": "ALLOW",
                      "direction": "IN",
                      "ip_protocol": "IPV4",
                      "name": "first rule",
                      "source_ids": [
                        "${vcd_nsxt_security_group.frontend.id}"
                      ]
                    },
                    {
                      "action": "DROP",
                      "destination_ids": [
                        "${vcd_nsxt_security_group.group2.id}"
                      ],
                      "direction": "OUT",
                      "ip_protocol": "IPV6",
                      "logging": true,
                      "name": "drop IPv6 with destination to security group 2"
                    },
                    {
                      "action": "ALLOW",
                      "app_port_profile_ids": [
                        "${data.vcd_nsxt_app_port_profile.ssh.id}",
                        "${vcd_nsxt_app_port_profile.custom-app.id}"
                      ],
                      "destination_ids": "${vcd_nsxt_security_group.group.*.id}",
                      "direction": "IN_OUT",
                      "ip_protocol": "IPV4_IPV6",
                      "name": "test_rule-3",
                      "source_ids": [
                        "${vcd_nsxt_security_group.group.1.id}"
                      ]
                    }
                  ]
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.testing.id
        argumentDocs:
            action: '- (Required) Defines if it should ALLOW or DROP traffic'
            app_port_profile_ids: '- (Optional) A set of Application Port Profiles. Leaving it empty matches Any (all)'
            destination_ids: |-
                - (Optional) A set of source object Firewall Groups (IP Sets or Security groups).
                Leaving it empty matches Any (all)
            direction: '- (Required) One of IN, OUT, or IN_OUT'
            edge_gateway_id: |-
                - (Required) The ID of the Edge Gateway (NSX-T only). Can be looked up using
                vcd_nsxt_edgegateway datasource
            enabled: '- (Optional) Defines if the rule is enabled (default true)'
            ip_protocol: '- (Required) One of IPV4,  IPV6, or IPV4_IPV6'
            logging: '- (Optional) Defines if logging for this rule is enabled (default false)'
            name: '- (Required) Explanatory name for firewall rule (uniqueness not enforced)'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            rule: '- (Required) One or more blocks with Firewall Rule definitions'
            source_ids: |-
                - (Optional) A set of source object Firewall Groups (IP Sets or Security groups).
                Leaving it empty matches Any (all)
        importStatements: []
    vcd_nsxt_ip_set:
        subCategory: ""
        description: Provides a resource to manage NSX-T IP Set. IP Sets are groups of objects to which the firewall rules apply. Combining multiple objects into IP Sets helps reduce the total number of firewall rules to be created.
        name: vcd_nsxt_ip_set
        title: vcd_nsxt_ip_set
        examples:
            - name: set1
              manifest: |-
                {
                  "description": "IP Set containing IPv4 and IPv6 ranges",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.main.id}",
                  "ip_addresses": [
                    "12.12.12.1",
                    "10.10.10.0/24",
                    "11.11.11.1-11.11.11.2",
                    "2001:db8::/48",
                    "2001:db6:0:0:0:0:0:0-2001:db6:0:ffff:ffff:ffff:ffff:ffff"
                  ],
                  "name": "first-ip-set",
                  "org": "my-org"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.main.id
        argumentDocs:
            description: '- (Optional) An optional description of the IP Set'
            edge_gateway_id: |-
                - (Required) The ID of the Edge Gateway (NSX-T only). Can be looked up using
                vcd_nsxt_edgegateway data source.
            ip_addresses: '- (Optional) A set of IP addresses, subnets or ranges (IPv4 or IPv6)'
            name: '- (Required) A unique name for IP Set'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            vdc: |-
                - (Deprecated; Optional) The name of VDC to use, optional if defined at provider level. Deprecated
                in favor of edge_gateway_id field.
        importStatements: []
    vcd_nsxt_ipsec_vpn_tunnel:
        subCategory: ""
        description: Provides a resource to manage NSX-T IPsec VPN Tunnel. You can configure site-to-site connectivity between an NSX-T Data Center Edge Gateway and remote sites. The remote sites must use NSX-T Data Center, have third-party hardware routers, or VPN gateways that support IPSec.
        name: vcd_nsxt_ipsec_vpn_tunnel
        title: vcd_nsxt_ipsec_vpn_tunnel
        examples:
            - name: tunnel1
              manifest: |-
                {
                  "description": "testing tunnel",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "local_ip_address": "${tolist(data.vcd_nsxt_edgegateway.existing_gw.subnet)[0].primary_ip}",
                  "local_networks": [
                    "10.10.10.0/24",
                    "30.30.30.0/28",
                    "40.40.40.1/32"
                  ],
                  "name": "First",
                  "org": "my-org",
                  "pre_shared_key": "my-presharaed-key",
                  "remote_ip_address": "1.2.3.4",
                  "remote_networks": [
                    "192.168.1.0/24",
                    "192.168.10.0/24",
                    "192.168.20.0/28"
                  ]
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
            - name: tunnel1
              manifest: |-
                {
                  "description": "IPsec VPN Tunnel with customized security profile",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "local_ip_address": "${tolist(data.vcd_nsxt_edgegateway.existing_gw.subnet)[0].primary_ip}",
                  "local_networks": [
                    "10.10.10.0/24",
                    "30.30.30.0/28",
                    "40.40.40.1/32"
                  ],
                  "name": "customized-sec-profile",
                  "org": "my-org",
                  "pre_shared_key": "test-psk",
                  "remote_ip_address": "1.2.3.4",
                  "remote_networks": [
                    "192.168.1.0/24",
                    "192.168.10.0/24",
                    "192.168.20.0/28"
                  ],
                  "security_profile_customization": [
                    {
                      "dpd_probe_internal": "30",
                      "ike_dh_groups": [
                        "GROUP14"
                      ],
                      "ike_digest_algorithms": [
                        "SHA2_256"
                      ],
                      "ike_encryption_algorithms": [
                        "AES_128"
                      ],
                      "ike_sa_lifetime": 86400,
                      "ike_version": "IKE_V2",
                      "tunnel_df_policy": "COPY",
                      "tunnel_dh_groups": [
                        "GROUP14"
                      ],
                      "tunnel_digest_algorithms": [
                        "SHA2_256"
                      ],
                      "tunnel_encryption_algorithms": [
                        "AES_256"
                      ],
                      "tunnel_pfs_enabled": true,
                      "tunnel_sa_lifetime": 3600
                    }
                  ]
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
            - name: tunnel1
              manifest: |-
                {
                  "authentication_mode": "CERTIFICATE",
                  "ca_certificate_id": "${data.vcd_library_certificate.ca-cert.id}",
                  "certificate_id": "${data.vcd_library_certificate.cert.id}",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "local_ip_address": "${tolist(data.vcd_nsxt_edgegateway.existing_gw.subnet)[0].primary_ip}",
                  "local_networks": [
                    "10.10.10.0/24",
                    "30.30.30.0/28",
                    "40.40.40.1/32"
                  ],
                  "name": "cert-tunnel",
                  "org": "my-org",
                  "remote_id": "cert-san",
                  "remote_ip_address": "1.2.3.4",
                  "remote_networks": [
                    "192.168.1.0/24",
                    "192.168.10.0/24",
                    "192.168.20.0/28"
                  ]
                }
              references:
                ca_certificate_id: data.vcd_library_certificate.ca-cert.id
                certificate_id: data.vcd_library_certificate.cert.id
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
        argumentDocs:
            authentication_mode: |-
                - (Optional, v3.9+) PSK (pre-shared key) or CERTIFICATE (default -
                PSK)
            ca_certificate_id: |-
                - (Optional, v3.9+) CA Certificate ID (can be handled by
                vcd_library_certificate resource or datasource) Note authentication_mode must be set to
                CERTIFICATE
            certificate_id: |-
                - (Optional, v3.9+) Certificate ID (can be handled by vcd_library_certificate
                resource or datasource). Note authentication_mode must be set to CERTIFICATE
            description: '- (Optional) An optional description of the NSX-T IPsec VPN Tunnel'
            dpd_probe_internal: |-
                - (Required) Value in seconds of dead probe detection interval. Minimum is 3 seconds and the
                maximum is 60 seconds
            edge_gateway_id: |-
                - (Required) The ID of the Edge Gateway (NSX-T only). Can be looked up using
                vcd_nsxt_edgegateway data source
            enabled: '- (Optional) Enables or disables IPsec VPN Tunnel (default true)'
            ike_dh_groups: |-
                - (Required) Diffie-Hellman groups to be used if Perfect Forward Secrecy is enabled. One of
                GROUP2, GROUP5, GROUP14, GROUP15, GROUP16, GROUP19, GROUP20, GROUP21
            ike_digest_algorithms: |-
                - (Required) Secure hashing algorithms to use during the IKE negotiation. One of SHA1,
                SHA2_256, SHA2_384, SHA2_512
            ike_encryption_algorithms: |-
                - (Required) Encryption algorithms One of AES_128, AES_256, AES_GCM_128, AES_GCM_192,
                AES_GCM_256
            ike_fail_reason: '- Provides more details of failure if the IKE service is not UP'
            ike_sa_lifetime: |-
                - (Required) Security association lifetime in seconds. It is number of seconds before the IPsec
                tunnel needs to reestablish
            ike_service_status: '- Status for the actual IKE Session for the given tunnel'
            ike_version: '- (Required) One of IKE_V1, IKE_V2, IKE_FLEX'
            local_ip_address: '- (Required) IPv4 Address for the endpoint. This has to be a suballocated IP on the Edge Gateway.'
            local_networks: '- (Required) A set of local networks in CIDR format. At least one value required'
            logging: '- (Optional) Sets whether logging for the tunnel is enabled or not. (default - false)'
            name: '- (Required) A name for NSX-T IPsec VPN Tunnel'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            pre_shared_key: |-
                - (Required) Pre-shared key for negotiation. Note the pre-shared key must be
                the same on the other end of the IPSec VPN tunnel and authentication_mode must be PSK
            remote_id: |-
                - (Optional, v3.9+) Remote ID uniquely identifies the peer site. If the remote ID is
                not set, it will default to the remote IP address
            remote_ip_address: '- (Required) Public IPv4 Address of the remote device terminating the VPN connection'
            remote_networks: '- (Optional) Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0'
            security_profile: '- DEFAULT for system provided configuration or CUSTOM if security_profile_customization is set'
            security_profile_customization: |-
                - (Optional) a block allowing to
                customize default security profile parameters
            status: '- Overall IPsec VPN Tunnel Status'
            tunnel_df_policy: '- (Required) Policy for handling defragmentation bit. One of COPY, CLEAR'
            tunnel_dh_groups: |-
                - (Required) Diffie-Hellman groups to be used is PFS is enabled.
                One of GROUP2, GROUP5, GROUP14, GROUP15, GROUP16, GROUP19, GROUP20, GROUP21
            tunnel_digest_algorithms: |-
                - (Required) Digest algorithms to be used for message digest.
                One of SHA1, SHA2_256, SHA2_384, SHA2_512
            tunnel_encryption_algorithms: |-
                - (Required) Encryption algorithms to use in IPSec tunnel establishment.
                One of AES_128, AES_256, AES_GCM_128, AES_GCM_192, AES_GCM_256, NO_ENCRYPTION_AUTH_AES_GMAC_128,
                NO_ENCRYPTION_AUTH_AES_GMAC_192, NO_ENCRYPTION_AUTH_AES_GMAC_256, NO_ENCRYPTION
            tunnel_pfs_enabled: '- (Required) PFS (Perfect Forward Secrecy) enabled or disabled.'
            tunnel_sa_lifetime: '- (Required) Security Association life time in seconds'
        importStatements: []
    vcd_nsxt_nat_rule:
        subCategory: ""
        description: Provides a resource to manage NSX-T NAT rules. To change the source IP address from a private to a public IP address, you create a source NAT (SNAT) rule. To change the destination IP address from a public to a private IP address, you create a destination NAT (DNAT) rule.
        name: vcd_nsxt_nat_rule
        title: vcd_nsxt_nat_rule
        examples:
            - name: snat
              manifest: |-
                {
                  "description": "description",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "external_address": "${tolist(data.vcd_nsxt_edgegateway.existing.subnet)[0].primary_ip}",
                  "internal_address": "11.11.11.0/24",
                  "logging": true,
                  "name": "SNAT rule",
                  "org": "dainius",
                  "rule_type": "SNAT",
                  "snat_destination_address": "8.8.8.8"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
            - name: no-snat
              manifest: |-
                {
                  "description": "description",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "internal_address": "11.11.11.0/24",
                  "name": "test-no-snat-rule",
                  "org": "dainius",
                  "rule_type": "NO_SNAT"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
            - name: dnat
              manifest: |-
                {
                  "description": "description",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "external_address": "${tolist(data.vcd_nsxt_edgegateway.existing.subnet)[0].primary_ip}",
                  "internal_address": "11.11.11.2",
                  "logging": true,
                  "name": "test-dnat-rule",
                  "org": "my-org",
                  "rule_type": "DNAT"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
            - name: no-dnat
              manifest: |-
                {
                  "dnat_external_port": 7777,
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "external_address": "${tolist(data.vcd_nsxt_edgegateway.existing.subnet)[0].primary_ip}",
                  "name": "test-no-dnat-rule",
                  "org": "my-org",
                  "rule_type": "NO_DNAT",
                  "vdc": "nsxt-vdc"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
            - name: reflexive
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "external_address": "${tolist(data.vcd_nsxt_edgegateway.existing.subnet)[0].primary_ip}",
                  "internal_address": "11.11.11.2",
                  "name": "test-reflexive",
                  "org": "my-org",
                  "rule_type": "REFLEXIVE"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
        argumentDocs:
            BYPASS: '- skip applying firewall rules to NAT rule'
            DNAT: rule translates the external IP to an internal IP and is used for inbound traffic
            MATCH_EXTERNAL_ADDRESS: '- applies firewall rules to the external address of a NAT rule'
            MATCH_INTERNAL_ADDRESS: '- applies firewall rules to the internal address of a NAT rule'
            NO_DNAT: prevents external IP translation
            NO_SNAT: prevents internal IP translation
            REFLEXIVE: |-
                (VCD 10.3+)  is also known as Stateless NAT. This translates an internal IP to an external IP and vice
                versa. The number of internal addresses should be exactly the same as that of external addresses.
            SNAT: translates an internal IP to an external IP and is used for outbound traffic
            app_port_profile_id: |-
                (Optional) - Application Port Profile to which to apply the rule. The
                Application Port Profile includes a port, and a protocol that the incoming traffic uses on the edge
                gateway to connect to the internal network.  Can be looked up using vcd_nsxt_app_port_profile
                data source or created using vcd_nsxt_app_port_profile resource
            description: '- (Optional) An optional description of the NAT rule'
            dnat_external_port: |-
                (Optional) - For DNAT only. This represents the external port number or port range when doing
                DNAT port forwarding from external to internal. The default dnatExternalPort is “ANY” meaning traffic on any port
                for the given IPs selected will be translated.
            edge_gateway_id: |-
                - (Required) The ID of the Edge Gateway (NSX-T only). Can be looked up using
                vcd_nsxt_edgegateway data source
            enabled: (Optional) - Enables or disables NAT rule (default true)
            external_address: |-
                (Optional) The external address for the NAT Rule. This must be supplied as a single IP or Network
                CIDR. For a DNAT rule, this is the external facing IP Address for incoming traffic. For an SNAT rule, this is the
                external facing IP Address for outgoing traffic. These IPs are typically allocated/suballocated IP Addresses on the
                Edge Gateway. For a REFLEXIVE rule, these are the external facing IPs.
            firewall_match: |-
                (Optional, VCD 10.2.2+) - You can set a firewall match rule to determine how
                firewall is applied during NAT. One of MATCH_INTERNAL_ADDRESS, MATCH_EXTERNAL_ADDRESS,
                BYPASS
            internal_address: |-
                (Optional) The internal address for the NAT Rule. This must be supplied as a single IP or
                Network CIDR. For a DNAT rule, this is the internal IP address for incoming traffic. For an SNAT rule, this is the
                internal IP Address for outgoing traffic. For a REFLEXIVE rule, these are the internal IPs.
                These IPs are typically the Private IPs that are allocated to workloads.
            logging: |-
                (Optional) - Enable to have the address translation performed by this rule logged
                (default false). Note User might lack rights (Organization Administrator role by default
                is missing Gateway -> Configure System Logging right) to enable logging, but API does not
                return error and it is not possible to validate it. terraform plan might show difference on
                every update.
            name: '- (Required) A name for NAT rule'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            priority: |-
                (Optional, VCD 10.2.2+) - if an address has multiple NAT rules, you can assign these
                rules different priorities to determine the order in which they are applied. A lower value means a
                higher priority for this rule.
            rule_type: '- (Required) One of DNAT, NO_DNAT, SNAT, NO_SNAT, REFLEXIVE'
            snat_destination_address: |-
                (Optional) For SNAT only. The destination addresses to match in the SNAT Rule. This
                must be supplied as a single IP or Network CIDR. Providing no value for this field results in match with ANY
                destination network.
        importStatements: []
    vcd_nsxt_network_dhcp:
        subCategory: ""
        description: Provides a resource to manage DHCP pools for NSX-T Org VDC networks.
        name: vcd_nsxt_network_dhcp
        title: vcd_nsxt_network_dhcp
        examples:
            - name: pools
              manifest: |-
                {
                  "org_network_id": "${vcd_network_routed_v2.parent-network.id}",
                  "pool": [
                    {
                      "end_address": "7.1.1.110",
                      "start_address": "7.1.1.100"
                    },
                    {
                      "end_address": "7.1.1.112",
                      "start_address": "7.1.1.111"
                    }
                  ]
                }
              references:
                org_network_id: vcd_network_routed_v2.parent-network.id
              dependencies:
                vcd_network_routed_v2.parent-network: |-
                    {
                      "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                      "gateway": "7.1.1.1",
                      "name": "nsxt-routed-dhcp",
                      "prefix_length": 24,
                      "static_ip_pool": [
                        {
                          "end_address": "7.1.1.20",
                          "start_address": "7.1.1.10"
                        }
                      ]
                    }
            - name: pools
              manifest: |-
                {
                  "listener_ip_address": "7.1.1.254",
                  "mode": "NETWORK",
                  "org": "cloud",
                  "org_network_id": "${vcd_network_isolated_v2.net1.id}",
                  "pool": [
                    {
                      "end_address": "7.1.1.110",
                      "start_address": "7.1.1.100"
                    }
                  ],
                  "vdc": "${vcd_org_vdc.with-edge-cluster.name}"
                }
              references:
                org_network_id: vcd_network_isolated_v2.net1.id
                vdc: vcd_org_vdc.with-edge-cluster.name
              dependencies:
                vcd_network_isolated_v2.net1: |-
                    {
                      "gateway": "7.1.1.1",
                      "name": "private-network",
                      "org": "cloud",
                      "owner_id": "${vcd_org_vdc.with-edge-cluster.id}",
                      "prefix_length": 24,
                      "static_ip_pool": [
                        {
                          "end_address": "7.1.1.20",
                          "start_address": "7.1.1.10"
                        }
                      ]
                    }
            - name: pools
              manifest: |-
                {
                  "mode": "RELAY",
                  "org": "cloud",
                  "org_network_id": "${vcd_network_routed_v2.net1.id}",
                  "vdc": "nsxt-vdc-cloud"
                }
              references:
                org_network_id: vcd_network_routed_v2.net1.id
              dependencies:
                vcd_network_routed_v2.net1: |-
                    {
                      "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                      "gateway": "7.1.1.1",
                      "name": "nsxt-routed-dhcp",
                      "org": "cloud",
                      "prefix_length": 24,
                      "static_ip_pool": [
                        {
                          "end_address": "7.1.1.20",
                          "start_address": "7.1.1.10"
                        }
                      ],
                      "vdc": "nsxt-vdc-cloud"
                    }
        argumentDocs:
            EDGE: can be used with Routed Org VDC networks.
            NETWORK: |-
                can be used for Isolated and Routed Org VDC networks. It requires
                listener_ip_address to be set and Edge Cluster must be assigned to VDC.
            RELAY: |-
                can be used with Routed Org VDC networks, but requires DHCP forwarding configuration in
                NSX-T Edge Gateway.
            dns_servers: |-
                - (Optional; v3.7+; VCD 10.3.1+) - The DNS server IPs to be assigned by this
                DHCP service. Maximum two values.
            end_address: '- (Required) End address of DHCP pool range'
            lease_time: |-
                - (Optional; v3.8+; VCD 10.3.1+) - Lease time in seconds. Minimum value is 60s
                and maximum is 4294967295s (~ 49 days).
            listener_ip_address: |-
                - (Optional; v3.8+) IP address of DHCP server in network. Must match
                subnet. Only used when mode=NETWORK.
            mode: '- (Optional; v3.8+) One of EDGE, NETWORK or RELAY. Default is EDGE'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            org_network_id: '- (Required) ID of parent Org VDC Routed network.'
            pool: |-
                - (Optional) One or more blocks to define DHCP pool ranges. Must not be set when
                mode=RELAY. See Pools and example for usage details.
            start_address: '- (Required) Start address of DHCP pool range'
        importStatements: []
    vcd_nsxt_network_dhcp_binding:
        subCategory: ""
        description: Provides a resource to manage NSX-T Org VDC network DHCP bindings.
        name: vcd_nsxt_network_dhcp_binding
        title: vcd_nsxt_network_dhcp_binding
        examples:
            - name: binding2
              manifest: |-
                {
                  "binding_type": "IPV4",
                  "description": "DHCP binding description",
                  "dhcp_v4_config": [
                    {
                      "gateway_ip_address": "7.1.1.233",
                      "hostname": "non-existent"
                    }
                  ],
                  "dns_servers": [
                    "7.1.1.242",
                    "7.1.1.243"
                  ],
                  "ip_address": "7.1.1.190",
                  "lease_time": 3600,
                  "mac_address": "00:11:22:33:44:66",
                  "name": "DHCP Binding",
                  "org": "cloud",
                  "org_network_id": "${vcd_nsxt_network_dhcp.pools.id}"
                }
              references:
                org_network_id: vcd_nsxt_network_dhcp.pools.id
              dependencies:
                vcd_nsxt_network_dhcp.pools: |-
                    {
                      "listener_ip_address": "7.1.1.254",
                      "mode": "NETWORK",
                      "org": "cloud",
                      "org_network_id": "${vcd_network_isolated_v2.net1.id}",
                      "pool": [
                        {
                          "end_address": "7.1.1.110",
                          "start_address": "7.1.1.100"
                        }
                      ]
                    }
        argumentDocs:
            binding_type: '- (Required) One of IPV4 or IPV6'
            dhcp_v4_config: '- (Optional) Additional configuration for IPv4 specific options. See IPv4 block'
            dns_servers: '- (Optional) A list of DNS servers. Maximum 2 can be specified'
            gateway_ip_address: '- (Optional) Gateway IP address to use for the client'
            hostname: '- (Optional) Hostname to be set for client'
            ip_address: '- (Required) IP address used for binding'
            lease_time: '- (Required) Lease time in seconds. Minimum 3600 seconds'
            mac_address: '- (Required) MAC address used for binding'
            org: '- (Optional) The name of organization. Optional if defined at provider level'
            org_network_id: |-
                - (Required) The ID of an Org VDC network. Note  (.id field) of
                vcd_network_isolated_v2, vcd_network_routed_v2 or vcd_nsxt_network_dhcp can be referenced
                here. It is more convenient to use reference to vcd_nsxt_network_dhcp ID because it makes sure
                that DHCP is enabled before configuring pools
        importStatements: []
    vcd_nsxt_network_imported:
        subCategory: ""
        description: Provides a VMware Cloud Director Org VDC NSX-T Imported Network type. This can be used to create, modify, and delete NSX-T VDC networks of Imported type (backed by NSX-T).
        name: vcd_nsxt_network_imported
        title: vcd_nsxt_network_imported
        examples:
            - name: nsxt-backed
              manifest: |-
                {
                  "description": "My NSX-T VDC Imported network type",
                  "gateway": "1.1.1.1",
                  "name": "nsxt-imported",
                  "nsxt_logical_switch_name": "nsxt_segment_name",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.main.id}",
                  "prefix_length": 24,
                  "static_ip_pool": [
                    {
                      "end_address": "1.1.1.20",
                      "start_address": "1.1.1.10"
                    },
                    {
                      "end_address": "1.1.1.103",
                      "start_address": "1.1.1.100"
                    }
                  ]
                }
              references:
                owner_id: data.vcd_org_vdc.main.id
            - name: nsxt-backed
              manifest: |-
                {
                  "dvpg_name": "vc-dvpg",
                  "gateway": "1.1.1.1",
                  "name": "nsxt-imported",
                  "org": "my-org",
                  "owner_id": "${data.vcd_org_vdc.main.id}",
                  "prefix_length": 24,
                  "static_ip_pool": [
                    {
                      "end_address": "1.1.1.20",
                      "start_address": "1.1.1.10"
                    },
                    {
                      "end_address": "1.1.1.103",
                      "start_address": "1.1.1.100"
                    }
                  ]
                }
              references:
                owner_id: data.vcd_org_vdc.main.id
            - name: tf-mynet
              manifest: |-
                {
                  "name": "my-net",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            description: '- (Optional) An optional description of the network'
            dns_suffix: '- (Optional) A FQDN for the virtual machines on this network'
            dns1: '- (Optional) First DNS server to use.'
            dns2: '- (Optional) Second DNS server to use.'
            dvpg_id: '- ID of Distributed Virtual Port Group used by this network'
            dvpg_name: |-
                - (Optional) Unique name of an existing Distributed Virtual Port Group (DVPG).
                Note it will never be refreshed because API does not allow reading this name after it is
                consumed. Instead ID will be stored in dvpg_id attribute.
            end_address: '- (Required) The final address in the IP Range'
            gateway: '- (Required) The gateway for this network (e.g. 192.168.1.1)'
            name: '- (Required) A unique name for the network'
            nsxt_logical_switch_id: '- ID of NSX-T logical switch used by this network'
            nsxt_logical_switch_name: |-
                - (Optional) Unique name of an existing NSX-T segment.
                Note it will never be refreshed because API does not allow reading this name after it is
                consumed. Instead ID will be stored in nsxt_logical_switch_id attribute.
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful when
                connected as sysadmin working across different organisations
            owner_id: |-
                - (Optional) VDC or VDC Group ID. Always takes precedence over vdc fields (in resource
                and inherited from provider configuration)
            prefix_length: '- (Required) The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).'
            start_address: '- (Required) The first address in the IP Range'
            static_ip_pool: |-
                - (Optional) A range of IPs permitted to be used as static IPs for
                virtual machines; see IP Pools below for details.
            vdc: |-
                - (Deprecated; Optional) The name of VDC to use. Deprecated  in favor of new field
                owner_id which supports VDC and VDC Group IDs.
        importStatements: []
    vcd_nsxt_route_advertisement:
        subCategory: ""
        description: Provides a VMware Cloud Director resource for setting route advertisement in an NSX-T Edge Gateway.
        name: vcd_nsxt_route_advertisement
        title: vcd_nsxt_route_advertisement
        examples:
            - name: my_route_advertisement
              manifest: |-
                {
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.my_edge_gateway.id}",
                  "enabled": true,
                  "subnets": [
                    "192.168.1.0/24",
                    "192.168.2.0/24"
                  ]
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.my_edge_gateway.id
        argumentDocs:
            edge_gateway_id: '- (Required) NSX-T Edge Gateway ID in which route advertisement is located.'
            enabled: '- (Optional) Define if route advertisement is active. Default true.'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organizations.
            subnets: '- (Optional) Set of subnets that will be advertised to Tier-0 gateway. Leaving it empty means none.'
        importStatements: []
    vcd_nsxt_security_group:
        subCategory: ""
        description: Provides a resource to manage NSX-T Security Group. Security Groups are groups of data center group networks to which distributed firewall rules apply. Grouping networks helps you to reduce the total number of distributed firewall rules to be created.
        name: vcd_nsxt_security_group
        title: vcd_nsxt_security_group
        examples:
            - name: frontend-servers
              manifest: |-
                {
                  "description": "Security Group for a network connecting the frontend servers",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.main.id}",
                  "member_org_network_ids": [
                    "${vcd_network_routed_v2.frontend.id}"
                  ],
                  "name": "frontend-servers",
                  "org": "my-org"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.main.id
            - name: group1
              manifest: |-
                {
                  "description": "Members to be added later",
                  "edge_gateway_id": "${data.vcd_nsxt_edgegateway.existing.id}",
                  "name": "precreated security group",
                  "org": "my-org"
                }
              references:
                edge_gateway_id: data.vcd_nsxt_edgegateway.existing.id
        argumentDocs:
            description: '- (Optional) An optional description of the Security Group'
            edge_gateway_id: |-
                - (Required) The ID of the Edge Gateway (NSX-T only). Can be looked up using
                vcd_nsxt_edgegateway data source
            member_org_network_ids: '- (Optional) A set of Org Network IDs'
            member_vms: A set of member VMs (if exist). see Member VMs below for details.
            name: '- (Required) A unique name for Security Group'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            vapp_id: '- Parent vApp ID for member VM (empty for standalone VMs)'
            vapp_name: '- Parent vApp Name for member VM (empty for standalone VMs)'
            vdc: |-
                - (Deprecated; Optional) The name of VDC to use, optional if defined at provider level. Deprecated
                in favor of edge_gateway_id field.
            vm_id: '- Member VM ID'
            vm_name: '- Member VM name'
        importStatements: []
    vcd_nsxv_dhcp_relay:
        subCategory: ""
        description: Provides an NSX edge gateway DHCP relay configuration resource.
        name: vcd_nsxv_dhcp_relay
        title: vcd_nsxv_dhcp_relay
        examples:
            - name: relay_config
              manifest: |-
                {
                  "edge_gateway": "my-edge-gw",
                  "ip_addresses": [
                    "1.1.1.1"
                  ],
                  "org": "my-org",
                  "relay_agent": [
                    {
                      "network_name": "${vcd_network_routed.test-routed[0].name}"
                    }
                  ],
                  "vdc": "my-org-vdc"
                }
              references:
                relay_agent.network_name: vcd_network_routed.test-routed[0].name
            - name: relay_config
              manifest: |-
                {
                  "domain_names": [
                    "servergroups.domainname.com",
                    "other.domain.com"
                  ],
                  "edge_gateway": "my-edge-gw",
                  "ip_addresses": [
                    "1.1.1.1",
                    "2.2.2.2"
                  ],
                  "ip_sets": [
                    "${vcd_nsxv_ip_set.myset1.name}",
                    "${vcd_nsxv_ip_set.myset2.name}"
                  ],
                  "org": "my-org",
                  "relay_agent": [
                    {
                      "network_name": "my-routed-network-1"
                    },
                    {
                      "gateway_ip_address": "10.201.1.1",
                      "network_name": "${vcd_network_routed.db-network.name}"
                    }
                  ],
                  "vdc": "my-org-vdc"
                }
              references:
                relay_agent.network_name: vcd_network_routed.db-network.name
              dependencies:
                vcd_nsxv_ip_set.myset1: |-
                    {
                      "ip_addresses": [
                        "10.10.10.1/24"
                      ],
                      "name": "ipset-one",
                      "org": "my-org",
                      "vdc": "my-org-vdc"
                    }
                vcd_nsxv_ip_set.myset2: |-
                    {
                      "ip_addresses": [
                        "20.20.20.1/24"
                      ],
                      "name": "ipset-two",
                      "org": "my-org",
                      "vdc": "my-org-vdc"
                    }
        argumentDocs:
            domain_names: '- (Optional) A set of domain names.'
            edge_gateway: '- (Required) The name of the edge gateway on which DHCP relay is to be configured.'
            gateway_ip_address: |-
                - (Optional) IP address on edge gateway to be used for relaying messages.
                Primary address of edge gateway interface will be picked if not specified.
            ip_addresses: '- (Optional) A set of IP addresses.'
            ip_sets: '- (Optional) A set of IP set names.'
            network_name: '- (Required) An existing Org network name from which DHCP messages are to be relayed.'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            relay_agent: |-
                - (Required) One or more blocks to define Org network and optional IP address of
                edge gateway interfaces from which DHCP messages are to be relayed to the external DHCP relay
                server(s). See Relay Agent and example for usage details.
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level.'
        importStatements: []
    vcd_nsxv_distributed_firewall:
        subCategory: ""
        description: The NSX-V Distributed Firewall allows user to segment organization virtual data center entities, such as virtual machines, edges, networks, based on several attributes
        name: vcd_nsxv_distributed_firewall
        title: vcd_nsxv_distributed_firewall
        examples:
            - name: dfw1
              manifest: |-
                {
                  "rule": [
                    {
                      "action": "allow",
                      "application": [
                        {
                          "destination_port": "20251",
                          "protocol": "TCP",
                          "source_port": "20250"
                        },
                        {
                          "name": "${data.vcd_nsxv_application.application1.name}",
                          "type": "Application",
                          "value": "${data.vcd_nsxv_application.application1.id}"
                        },
                        {
                          "name": "${data.vcd_nsxv_application_group.application_group1.name}",
                          "type": "ApplicationGroup",
                          "value": "${data.vcd_nsxv_application_group.application_group1.id}"
                        }
                      ],
                      "applied_to": [
                        {
                          "name": "${data.vcd_edgegateway.edge.name}",
                          "type": "Edge",
                          "value": "${data.vcd_edgegateway.edge.id}"
                        }
                      ],
                      "direction": "inout",
                      "name": "third",
                      "source": [
                        {
                          "name": "${data.vcd_nsxv_ip_set.test-ipset.name}",
                          "type": "IPSet",
                          "value": "${data.vcd_nsxv_ip_set.test-ipset.id}"
                        }
                      ]
                    },
                    {
                      "action": "allow",
                      "applied_to": [
                        {
                          "name": "${data.vcd_org_vdc.my-vdc.name}",
                          "type": "VDC",
                          "value": "${data.vcd_org_vdc.my-vdc.id}"
                        }
                      ],
                      "destination": [
                        {
                          "name": "${data.vcd_network_routed.net-r.name}",
                          "type": "Network",
                          "value": "${data.vcd_network_routed.net-r.id}"
                        },
                        {
                          "name": "${data.vcd_network_isolated.net-i.name}",
                          "type": "Network",
                          "value": "${data.vcd_network_isolated.net-i.id}"
                        }
                      ],
                      "direction": "inout",
                      "name": "second",
                      "source": [
                        {
                          "name": "10.10.1.0-10.10.1.100",
                          "type": "Ipv4Address",
                          "value": "10.10.1.0-10.10.1.100"
                        },
                        {
                          "name": "${data.vcd_vapp_vm.vm1.name}",
                          "type": "VirtualMachine",
                          "value": "${data.vcd_vapp_vm.vm1.id}"
                        }
                      ]
                    },
                    {
                      "action": "deny",
                      "applied_to": [
                        {
                          "name": "${data.vcd_org_vdc.my-vdc.name}",
                          "type": "VDC",
                          "value": "${data.vcd_org_vdc.my-vdc.id}"
                        }
                      ],
                      "direction": "inout",
                      "name": "first"
                    }
                  ],
                  "vdc_id": "${data.vcd_org_vdc.my-vdc.id}"
                }
              references:
                rule.application.name: data.vcd_nsxv_application_group.application_group1.name
                rule.application.value: data.vcd_nsxv_application_group.application_group1.id
                rule.applied_to.name: data.vcd_org_vdc.my-vdc.name
                rule.applied_to.value: data.vcd_org_vdc.my-vdc.id
                rule.destination.name: data.vcd_network_isolated.net-i.name
                rule.destination.value: data.vcd_network_isolated.net-i.id
                rule.source.name: data.vcd_vapp_vm.vm1.name
                rule.source.value: data.vcd_vapp_vm.vm1.id
                vdc_id: data.vcd_org_vdc.my-vdc.id
        argumentDocs:
            10.10.10.1/24: )
            10.10.10.2-10.10.10.20: )
            192.168.1.1: )
            192.168.1.2,192.168.1.15: )
            destination_port: (Optional) - The destination port used by the application, if any
            enabled: '- Shows whether the NSX-V Distributed Firewall is enabled.'
            name: |-
                - (Required) is the name of the object. When using a literal object (such as an IP or IP range), the name must
                contain the same text as the
            ports: (Optional) - The ports used by the application. Could be a single port, a comma delimited list, or a range
            protocol: ', ports, source_port, destination_port'
            rule: |-
                - (Optional) One or more blocks with Firewall Rule definitions. Order
                defines firewall rule precedence. If no rules are defined, all will be removed from the firewall
            rule.action: '- (Required) Defines if it should allow or deny traffic'
            rule.application: '- (Optional) An optional set of applications to use for this rule. See below for Application objects'
            rule.applied_to: '- (Required) A set of objects to which the rule applies. See below for Source or destination objects'
            rule.destination: '- (Optional) A set of destination objects. See below for source or destination objects. Leaving it empty matches any (all)'
            rule.direction: '- (Required) One of in, out, or inout'
            rule.enabled: '- (Optional) Defines if the rule is enabled (default true)'
            rule.exclude_destination: '- (Optional) - reverses value of destination for the rule to match everything except specified objects'
            rule.exclude_source: '- (Optional) - reverses value of source for the rule to match everything except specified objects'
            rule.logging: '- (Optional) Defines if logging for this rule is enabled (default false)'
            rule.name: '- (Optional) Explanatory name for firewall rule (uniqueness not enforced)'
            rule.source: |-
                - (Optional) A set of source objects. See below for source or destination objects
                Leaving it empty matches any (all)
            source_port: (Optional) - The source port used by the application, if any
            type: |-
                - (Required) is the type of the object. One of Network, Edge, VirtualMachine, IPSet, VDC, Ipv4Address.
                Note that the case of the type identifiers are relevant. Using IpSet instead of IPSet results in an error.
                Also note that Ipv4Address allows any of:
            value: |-
                - (Required) - When using a named object (such a VM or a network), this field will have the object ID. For a literal
                object, such as an IP or IP range, this will be the text of the IP reference.
            vdc_id: '- (Required) The ID of VDC to manage the Distributed Firewall in. Can be looked up using a vcd_org_vdc data source'
        importStatements: []
    vcd_nsxv_dnat:
        subCategory: ""
        description: Provides a VMware Cloud Director DNAT resource for advanced edge gateways (NSX-V). This can be used to create, modify, and delete destination NATs to map an external IP/port to an internal IP/port.
        name: vcd_nsxv_dnat
        title: vcd_nsxv_dnat
        examples:
            - name: web
              manifest: |-
                {
                  "edge_gateway": "Edge Gateway Name",
                  "network_name": "my-external-network",
                  "network_type": "ext",
                  "org": "my-org",
                  "original_address": "1.1.1.1",
                  "translated_address": "10.10.10.15",
                  "vdc": "my-vdc"
                }
            - name: forIcmp
              manifest: |-
                {
                  "edge_gateway": "Edge Gateway Name",
                  "icmp_type": "router-advertisement",
                  "network_name": "my-external-network",
                  "network_type": "ext",
                  "org": "my-org",
                  "original_address": "78.101.10.20-78.101.10.30",
                  "protocol": "icmp",
                  "translated_address": "10.10.0.5",
                  "vdc": "my-vdc"
                }
            - name: dnat-tcp
              manifest: |-
                {
                  "description": "My DNAT rule",
                  "edge_gateway": "Edge Gateway Name",
                  "enabled": false,
                  "logging_enabled": true,
                  "network_name": "my-external-network",
                  "network_type": "ext",
                  "org": "my-org",
                  "original_address": "78.101.10.20",
                  "original_port": 443,
                  "protocol": "tcp",
                  "translated_address": "10.10.0.5",
                  "translated_port": 8443,
                  "vdc": "my-vdc"
                }
        argumentDocs:
            description: '- (Optional) Free text description.'
            edge_gateway: '- (Required) The name of the edge gateway on which to apply the DNAT rule.'
            enabled: '- (Optional) Defines if the rule is enabaled. Default true.'
            icmp_type: |-
                - (Optional) Only when protocol is set to icmp. One of any,
                address-mask-request, address-mask-reply, destination-unreachable, echo-request,
                echo-reply, parameter-problem, redirect, router-advertisement, router-solicitation,
                source-quench, time-exceeded, timestamp-request, timestamp-reply. Default any
            logging_enabled: '- (Optional) Defines if the logging for this rule is enabaled. Default false.'
            network_name: '- (Required) The name of the network on which to apply the DNAT rule.'
            network_type: |-
                - (Required) Type of the network on which to apply the DNAT rule. Possible values
                org or ext.
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            original_address: |-
                - (Required) IP address, range or subnet. This address must be the public IP
                address of the edge gateway for which you are configuring the DNAT rule. In the packet being
                inspected, this IP address or range would be those that appear as the destination IP address of the
                packet. These packet destination addresses are the ones translated by this DNAT rule.
            original_port: |-
                - (Optional) Select the port or port range that the incoming traffic uses on the
                edge gateway to connect to the internal network on which the virtual machines are connected. This
                selection is not available when the Protocol is set to icmp or any. Default any.
            protocol: |-
                - (Optional) Select the protocol to which the rule applies. One of tcp, udp,
                icmp, any. Default any
                protocols, select Any.
            rule_tag: |-
                - (Optional) This can be used to specify user-controlled rule tag. If not specified,
                it will report rule ID after creation. Must be between 65537-131072.
            rule_type: '- Possible values - user, internal_high.'
            translated_address: |-
                - (Required) IP address, range or subnet. IP addresses to which destination
                addresses on inbound packets will be translated. These addresses are the IP addresses of the one or
                more virtual machines for which you are configuring DNAT so that they can receive traffic from the
                external network.
            translated_port: |-
                - (Optional) Select the port or port range that inbound traffic is connecting
                to on the virtual machines on the internal network. These ports are the ones into which the DNAT
                rule is translating for the packets inbound to the virtual machines.
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level.'
        importStatements: []
    vcd_nsxv_firewall_rule:
        subCategory: ""
        description: Provides a VMware Cloud Director firewall rule resource for advanced edge gateways (NSX-V). This can be used to create, modify, and delete firewall rules.
        name: vcd_nsxv_firewall_rule
        title: vcd_nsxv_firewall_rule
        examples:
            - name: my-rule-1
              manifest: |-
                {
                  "destination": [
                    {
                      "ip_addresses": [
                        "${data.vcd_edgegateway.mygw.default_external_network_ip}"
                      ]
                    }
                  ],
                  "edge_gateway": "my-edge-gateway",
                  "org": "my-org",
                  "service": [
                    {
                      "protocol": "any"
                    }
                  ],
                  "source": [
                    {
                      "ip_sets": [
                        "${vcd_ipset.test-ipset2.name}"
                      ]
                    }
                  ],
                  "vdc": "my-vdc"
                }
            - name: my-rule-1
              manifest: |-
                {
                  "destination": [
                    {
                      "ip_addresses": [
                        "192.168.1.110"
                      ]
                    }
                  ],
                  "edge_gateway": "my-edge-gateway",
                  "org": "my-org",
                  "service": [
                    {
                      "protocol": "icmp"
                    },
                    {
                      "port": "443",
                      "protocol": "tcp"
                    }
                  ],
                  "source": [
                    {
                      "gateway_interfaces": [
                        "internal"
                      ],
                      "ip_addresses": [
                        "any"
                      ]
                    }
                  ],
                  "vdc": "my-vdc"
                }
            - name: my-rule-1
              manifest: |-
                {
                  "destination": [
                    {
                      "ip_addresses": [
                        "any"
                      ]
                    }
                  ],
                  "edge_gateway": "my-edge-gateway",
                  "org": "my-org",
                  "service": [
                    {
                      "protocol": "icmp"
                    }
                  ],
                  "source": [
                    {
                      "exclude": true,
                      "gateway_interfaces": [
                        "internal"
                      ]
                    }
                  ],
                  "vdc": "my-vdc"
                }
            - name: my-rule-1
              manifest: |-
                {
                  "action": "deny",
                  "destination": [
                    {
                      "ip_addresses": [
                        "any"
                      ]
                    }
                  ],
                  "edge_gateway": "my-edge-gateway",
                  "logging_enabled": true,
                  "org": "my-org",
                  "service": [
                    {
                      "protocol": "icmp"
                    }
                  ],
                  "source": [
                    {
                      "ip_addresses": [
                        "30.10.10.0/24",
                        "31.10.10.0/24"
                      ],
                      "org_networks": [
                        "org-net-1",
                        "org-net-2"
                      ]
                    }
                  ],
                  "vdc": "my-vdc"
                }
            - name: my-rule-2
              manifest: |-
                {
                  "above_rule_id": "${vcd_nsxv_firewall_rule.my-rule-1.id}",
                  "destination": [
                    {
                      "ip_addresses": [
                        "any"
                      ]
                    }
                  ],
                  "edge_gateway": "my-edge-gateway",
                  "name": "my-friendly-name",
                  "org": "my-org",
                  "service": [
                    {
                      "protocol": "icmp"
                    }
                  ],
                  "source": [
                    {
                      "ip_addresses": [
                        "30.10.10.0/24",
                        "31.10.10.0/24"
                      ],
                      "org_networks": [
                        "org-net-1",
                        "org-net-2"
                      ]
                    }
                  ],
                  "vdc": "my-vdc"
                }
              references:
                above_rule_id: vcd_nsxv_firewall_rule.my-rule-1.id
        argumentDocs:
            above_rule_id: |-
                - (Optional) This can be used to alter default rule placement order. By default
                every rule is appended to the end of firewall rule list. When a value of another rule is set - this
                rule will be placed above the specified rule.
            action: '- (Optional) Defines if the rule is set to accept or deny traffic. Default accept'
            destination: |-
                - (Required) Exactly one block to define source criteria for firewall. See
                Endpoint and example for usage details.
            edge_gateway: '- (Required) The name of the edge gateway on which to apply the firewall rule.'
            enabled: '- (Optional) Defines if the rule is enabaled. Default true.'
            exclude: |-
                - (Optional) When the toggle exclusion is selected, the rule is applied to
                traffic on all sources except for the locations you excluded. When the toggle exclusion is not
                selected, the rule applies to traffic you specified. Default false. This
                example uses it.
            gateway_interfaces: '- (Optional) A set of with either three keywords vse (UI names it as any), internal, external or an org network name. It automatically looks up vNic in the backend.'
            ip_addresses: |-
                - (Optional) A set of IP addresses, CIDRs or ranges. A keyword any is also
                accepted as a parameter.
            ip_sets: '- (Optional) A set of existing IP set names (either created manually or configured using vcd_nsxv_ip_set resource)'
            logging_enabled: '- (Optional) Defines if the logging for this rule is enabaled. Default false.'
            name: '- (Optional) Free text name. Can be duplicate.'
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            org_networks: '- (Optional) A set of org network names.'
            port: '- (Optional) Port number or range separated by - for port number. Default ''any''.'
            protocol: '- (Required) One of any, tcp, udp, icmp to apply.'
            rule_tag: |-
                - (Optional) This can be used to specify user-controlled rule tag. If not specified,
                it will report rule ID after creation. Must be between 65537-131072.
            rule_type: '- Possible values - user, internal_high.'
            service: |-
                - (Required) One or more blocks to define protocol and port details. Use multiple blocks
                if you want to define multiple port/protocol combinations for the same rule. See
                Service and example for usage details.
            source: |-
                - (Required) Exactly one block to define source criteria for firewall. See
                Endpoint and example for usage details.
            source_port: '- (Optional) Port number or range separated by - for port number. Default ''any''.'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level.'
            vm_ids: '- (Optional) A set of .id fields of vcd_vapp_vm resources.'
        importStatements:
            - |-
              $ terraform import vcd_nsxv_firewall_rule.import list@my-org-name.my-org-vdc-name.my-edge-gw-name
              vcd_nsxv_firewall_rule.import: Importing from ID "list@my-org-name.my-org-vdc-name.my-edge-gw-name"...
              Retrieving all firewall rules
              UI No   ID      Name                                    Action  Type
              -----   --      ----                                    ------  ----
              1       132589  firewall                                accept  internal_high
              2       132730  My deny rule                            deny    user
              3       132729  My accept rule                          accept  user
              4       132588  default rule for ingress traffic        deny    default_policy

              Error: Resource was not imported! Please use the above ID to format the command as:
              terraform import vcd_nsxv_firewall_rule.resource-name org-name.vdc-name.edge-gw-name.firewall-rule-id
            - |-
              $ terraform import vcd_nsxv_firewall_rule.import my-org-name.my-org-vdc-name.my-edge-gw-name.132730
              vcd_nsxv_firewall_rule.import: Importing from ID "my-org-name.my-org-vdc-name.my-edge-gw-name.132730"...
              vcd_nsxv_firewall_rule.import: Import prepared!
                Prepared vcd_nsxv_firewall_rule for import
              vcd_nsxv_firewall_rule.import: Refreshing state... [id=132730]

              Import successful!

              The resources that were imported are shown above. These resources are now in
              your Terraform state and will henceforth be managed by Terraform.
    vcd_nsxv_ip_set:
        subCategory: ""
        description: Provides an IP set resource.
        name: vcd_nsxv_ip_set
        title: vcd_nsxv_ip_set
        examples:
            - name: test-ipset
              manifest: |-
                {
                  "description": "test-ip-set-changed-description",
                  "ip_addresses": [
                    "1.1.1.1/24",
                    "10.10.10.100-10.10.10.110"
                  ],
                  "is_inheritance_allowed": false,
                  "name": "ipset-one",
                  "org": "my-org",
                  "vdc": "my-org-vdc"
                }
            - name: test-ipset
              manifest: |-
                {
                  "ip_addresses": [
                    "192.168.1.1"
                  ],
                  "name": "ipset-two"
                }
            - name: test-ipset
              manifest: |-
                {
                  "description": "test-ip-set-changed-description",
                  "ip_addresses": [
                    "1.1.1.1/24",
                    "10.10.10.100-10.10.10.110"
                  ],
                  "is_inheritance_allowed": true,
                  "name": "ipset-one",
                  "org": "my-org",
                  "vdc": "my-org-vdc"
                }
              dependencies:
                vcd_nsxv_firewall_rule.ipsets: |-
                    {
                      "action": "accept",
                      "destination": [
                        {
                          "ip_sets": [
                            "${vcd_nsxv_ip_set.test-ipset2.name}"
                          ]
                        }
                      ],
                      "edge_gateway": "my-edge-gw",
                      "name": "rule-with-ipsets",
                      "org": "my-org",
                      "service": [
                        {
                          "protocol": "any"
                        }
                      ],
                      "source": [
                        {
                          "ip_sets": [
                            "${vcd_nsxv_ip_set.test-ipset.name}"
                          ]
                        }
                      ],
                      "vdc": "my-org-vdc"
                    }
            - name: test-ipset2
              manifest: |-
                {
                  "ip_addresses": [
                    "192.168.1.1"
                  ],
                  "name": "ipset-two"
                }
              dependencies:
                vcd_nsxv_firewall_rule.ipsets: |-
                    {
                      "action": "accept",
                      "destination": [
                        {
                          "ip_sets": [
                            "${vcd_nsxv_ip_set.test-ipset2.name}"
                          ]
                        }
                      ],
                      "edge_gateway": "my-edge-gw",
                      "name": "rule-with-ipsets",
                      "org": "my-org",
                      "service": [
                        {
                          "protocol": "any"
                        }
                      ],
                      "source": [
                        {
                          "ip_sets": [
                            "${vcd_nsxv_ip_set.test-ipset.name}"
                          ]
                        }
                      ],
                      "vdc": "my-org-vdc"
                    }
        argumentDocs:
            description: '- (Optional) An optional description for IP set.'
            id: '- ID of IP set'
            ip_addresses: '- (Required) A set of IP addresses, CIDRs and ranges as strings.'
            is_inheritance_allowed: (Optional) Toggle to enable inheritance to allow visibility at underlying scopes. Default true
            name: '- (Required) Unique IP set name.'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level'
        importStatements: []
    vcd_nsxv_snat:
        subCategory: ""
        description: Provides a VMware Cloud Director SNAT resource for advanced edge gateways (NSX-V). This can be used to create, modify, and delete source NATs to allow vApps to send external traffic.
        name: vcd_nsxv_snat
        title: vcd_nsxv_snat
        examples:
            - name: web
              manifest: |-
                {
                  "edge_gateway": "Edge Gateway Name",
                  "network_name": "my-org-network",
                  "network_type": "org",
                  "org": "my-org",
                  "original_address": "10.10.10.15/24",
                  "translated_address": "78.101.10.20",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            description: '- (Optional) Free text description.'
            edge_gateway: '- (Required) The name of the edge gateway on which to apply the SNAT rule.'
            enabled: '- (Optional) Defines if the rule is enabaled. Default true.'
            logging_enabled: '- (Optional) Defines if the logging for this rule is enabaled. Default false.'
            network_name: '- (Required) The name of the network on which to apply the SNAT rule.'
            network_type: |-
                - (Required) Type of the network on which to apply the DNAT rule. Possible values
                org or ext.
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful
                when connected as sysadmin working across different organisations.
            original_address: |-
                - (Required) IP address, range or subnet. These addresses are the IP addresses
                of one or more virtual machines for which you are configuring the SNAT rule so that they can send
                traffic to the external network.
            rule_tag: |-
                - (Optional) This can be used to specify user-controlled rule tag. If not specified,
                it will report rule ID after creation. Must be between 65537-131072.
            rule_type: '- Possible values - user, internal_high.'
            translated_address: |-
                - (Required) IP address, range or subnet. This address is always the public
                IP address of the gateway for which you are configuring the SNAT rule. Specifies the IP address to
                which source addresses (the virtual machines) on outbound packets are translated to when they send
                traffic to the external network.
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level.'
        importStatements: []
    vcd_org:
        subCategory: ""
        description: Provides a VMware Cloud Director Organization resource. This can be used to create  delete, and update an organization.
        name: vcd_org
        title: vcd_org
        examples:
            - name: my-org
              manifest: |-
                {
                  "delete_force": true,
                  "delete_recursive": true,
                  "description": "The pride of my work",
                  "full_name": "My organization",
                  "is_enabled": true,
                  "name": "my-org",
                  "vapp_lease": [
                    {
                      "delete_on_storage_lease_expiration": false,
                      "maximum_runtime_lease_in_sec": 3600,
                      "maximum_storage_lease_in_sec": 0,
                      "power_off_on_runtime_lease_expiration": true
                    }
                  ],
                  "vapp_template_lease": [
                    {
                      "delete_on_storage_lease_expiration": true,
                      "maximum_storage_lease_in_sec": 604800
                    }
                  ]
                }
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: my-orgadmin
              manifest: |-
                {
                  "delete_force": true,
                  "delete_recursive": true,
                  "full_name": "guessing",
                  "name": "my-org"
                }
        argumentDocs:
            can_publish_catalogs: '- (Optional) True if this organization is allowed to share catalogs. Default is true.'
            can_publish_external_catalogs: '- (Optional; v3.6+) True if this organization is allowed to publish external catalogs. Default is false.'
            can_subscribe_external_catalogs: '- (Optional; v3.6+) True if this organization is allowed to subscribe to external catalogs. Default is false.'
            delay_after_power_on_seconds: '- (Optional) Specifies this organization''s default for virtual machine boot delay after power on. Default is 0.'
            delete_force: '- (Required) Pass delete_force=true and delete_recursive=true to remove an organization or VDC and any objects it contains, regardless of their state.'
            delete_on_storage_lease_expiration: |-
                - (Required) If true, storage for a vApp is deleted when the vApp's lease expires. If false, the storage is flagged for deletion, but not deleted.
                Note: Default when the whole vapp_lease block is omitted is false
            delete_recursive: '- (Required) Pass delete_recursive=true as query parameter to remove an organization or VDC and any objects it contains that are in a state that normally allows removal.'
            deployed_vm_quota: '- (Optional) Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. Default is unlimited (0)'
            description: '- (Optional) Org description. Default is empty.'
            full_name: '- (Required) Org full name'
            is_enabled: '- (Optional) True if this organization is enabled (allows login and all other operations). Default is true.'
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            maximum_runtime_lease_in_sec: |-
                - (Required) How long vApps can run before they are automatically stopped (in seconds). 0 means never expires. Values accepted from 3600+
                Note: Default when the whole vapp_lease block is omitted is 604800 (7 days) but may vary depending on vCD version
            maximum_storage_lease_in_sec: |-
                - (Required) How long stopped vApps are available before being automatically cleaned up (in seconds). 0 means never expires. Regular values accepted from 3600+
                Note: Default when the whole vapp_lease block is omitted is 2592000 (30 days) but may vary depending on vCD version
            metadata: '- (Deprecated; v3.6+) Use metadata_entry instead. Key value map of metadata to assign to this organization.'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) Org name'
            power_off_on_runtime_lease_expiration: |-
                - (Required) When true, vApps are powered off when the runtime lease expires. When false, vApps are suspended when the runtime lease expires.
                Note: Default when the whole vapp_lease block is omitted is false
            stored_vm_quota: '- (Optional) Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of this organization. Default is unlimited (0)'
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vapp_lease: '- (Optional; v2.7+) Defines lease parameters for vApps created in this organization. See vApp Lease below for details.'
            vapp_template_lease: '- (Optional; v2.7+) Defines lease parameters for vApp templates created in this organization. See vApp Template Lease below for details.'
        importStatements: []
    vcd_org_group:
        subCategory: ""
        description: Provides a VMware Cloud Director Organization group. This can be used to create, update, and delete organization groups defined in SAML or LDAP.
        name: vcd_org_group
        title: vcd_org_group
        examples:
            - name: org1
              manifest: |-
                {
                  "name": "Org1-AdminGroup",
                  "org": "org1",
                  "provider_type": "SAML",
                  "role": "Organization Administrator"
                }
            - name: org1
              manifest: |-
                {
                  "name": "Org1-AdminGroup",
                  "org": "org1",
                  "provider_type": "OAUTH",
                  "role": "Organization Administrator"
                }
            - name: org1
              manifest: |-
                {
                  "name": "ldap-group",
                  "org": "org1",
                  "provider_type": "INTEGRATED",
                  "role": "Organization Administrator"
                }
            - name: my-admin-group
              manifest: |-
                {
                  "name": "my-admin-group",
                  "org": "my-org",
                  "provider_type": "SAML",
                  "role": "Organization Administrator"
                }
        argumentDocs:
            description: '- (Optional) The description of Organization group'
            id: '- The ID of the Organization group'
            name: '- (Required) A unique name for the group.'
            org: '- (Optional) The name of organization to which the VDC belongs. Optional if defined at provider level.'
            provider_type: |-
                - (Required) Identity provider type for this this group. One of SAML, OAUTH or
                INTEGRATED. Note LDAP must be configured to create INTEGRATED groups and names must
                match LDAP group names. If LDAP is not configured - it will return 403 errors.
            role: |-
                - (Required) The role of the group. Role names can be retrieved from the organization. Both built-in roles and
                custom built can be used. The roles normally available are:
            user_names: |-
                - (Read only) The set of user names that belong to this group. It's only populated if the users
                are created after the group (with depends_on the given group).
        importStatements: []
    vcd_org_ldap:
        subCategory: ""
        description: Provides a VMware Cloud Director Organization LDAP resource. This can be used to create, delete, and update LDAP configuration for an organization .
        name: vcd_org_ldap
        title: vcd_org_ldap
        examples:
            - name: my-org-ldap
              manifest: |-
                {
                  "custom_settings": [
                    {
                      "authentication_method": "SIMPLE",
                      "base_distinguished_name": "dc=planetexpress,dc=com",
                      "connector_type": "OPEN_LDAP",
                      "group_attributes": [
                        {
                          "group_membership_identifier": "dn",
                          "membership": "member",
                          "name": "cn",
                          "object_class": "group",
                          "unique_identifier": "cn"
                        }
                      ],
                      "is_ssl": false,
                      "password": "GoodNewsEveryone",
                      "port": 389,
                      "server": "192.168.1.172",
                      "user_attributes": [
                        {
                          "display_name": "cn",
                          "email": "mail",
                          "given_name": "givenName",
                          "group_membership_identifier": "dn",
                          "object_class": "inetOrgPerson",
                          "surname": "sn",
                          "telephone": "telephoneNumber",
                          "unique_identifier": "uid",
                          "username": "uid"
                        }
                      ],
                      "username": "cn=admin,dc=planetexpress,dc=com"
                    }
                  ],
                  "ldap_mode": "CUSTOM",
                  "org_id": "${data.vcd_org.my-org.id}"
                }
              references:
                org_id: data.vcd_org.my-org.id
            - name: my-org-ldap
              manifest: |-
                {
                  "lifecycle": [
                    {
                      "ignore_changes": [
                        "${custom_settings[0].password}"
                      ]
                    }
                  ]
                }
            - name: my-org-ldap
              manifest: |-
                {
                  "org_id": "${data.vcd_org.my-org.id}"
                }
              references:
                org_id: data.vcd_org.my-org.id
        argumentDocs:
            authentication_method: '- (Required) Authentication method: one of SIMPLE, MD5DIGEST, NTLM'
            base_distinguished_name: '- (Required) LDAP search base'
            connector_type: '- (Required) Type of connector: one of OPEN_LDAP, ACTIVE_DIRECTORY'
            custom_settings: '- (Optional) LDAP server configuration. Becomes mandatory if ldap_mode is set to CUSTOM. See Custom Settings below for details'
            display_name: '- (Required) LDAP attribute to use for the user''s full name. For example, displayName'
            email: '- (Required) LDAP attribute to use for the user''s email address. For example, mail'
            given_name: '- (Required) LDAP attribute to use for the user''s given name. For example, givenName'
            group_attributes: '- (Required) Group settings when ldap_mode is CUSTOM See Group Attributes below for details'
            group_back_link_identifier: '- (Optional) LDAP attribute that returns the identifiers of all the groups of which the user is a member'
            group_membership_identifier: '- (Required) LDAP attribute that identifies a user as a member of a group. For example, dn'
            is_ssl: '- (Optional) True if the LDAP service requires an SSL connection'
            ldap_mode: '- (Required) One of NONE, CUSTOM, SYSTEM. Note that using NONE has the effect of removing the LDAP settings'
            membership: '- (Required) LDAP attribute to use when getting the members of a group. For example, member'
            name: '- (Required) LDAP attribute to use for the group name. For example, cn'
            object_class: '- (Required)  LDAP objectClass of which imported users are members. For example, user or person'
            org_id: '- (Required) Org ID: there is only one LDAP configuration available for an organization. Thus, the resource can be identified by the Org.'
            password: |-
                - (Optional) Password for the user identified by UserName. This value is never returned by GET.
                It is inspected on create and modify. On modify, the absence of this element indicates that the password should not be changed
            port: '- (Required) Port number of the LDAP server (usually 389 for LDAP, 636 for LDAPS)'
            server: '- (Required) The IP address or host name of the server providing the LDAP service'
            surname: '- (Required) LDAP attribute to use for the user''s surname. For example, sn'
            telephone: '- (Required) LDAP attribute to use for the user''s telephone number. For example, telephoneNumber'
            unique_identifier: '- (Required) LDAP attribute to use as the unique identifier for a user. For example, objectGuid'
            user_attributes: '- (Required) User settings when ldap_mode is CUSTOM See User Attributes below for details'
            username: |-
                - (Optional) Username to use when logging in to LDAP, specified using LDAP attribute=value pairs
                (for example: cn="ldap-admin", c="example", dc="com")
        importStatements: []
    vcd_org_user:
        subCategory: ""
        description: Provides a VMware Cloud Director Organization user. This can be used to create, update, and delete users.
        name: vcd_org_user
        title: vcd_org_user
        examples:
            - name: my-org-admin
              manifest: |-
                {
                  "description": "a new org admin",
                  "name": "my-org-admin",
                  "org": "my-org",
                  "password": "change-me",
                  "role": "Organization Administrator"
                }
            - name: test_user_vapp_author
              manifest: |-
                {
                  "deployed_vm_quota": 20,
                  "description": "Org user test_user_vapp_author",
                  "email_address": "test_user_vapp_author@test.company.org",
                  "enabled": true,
                  "full_name": "test user vapp author",
                  "instant_messaging": "@test_user_vapp_author",
                  "name": "test_user_vapp_author",
                  "org": "datacloud",
                  "password_file": "pwd201907101300.txt",
                  "provider_type": "INTEGRATED",
                  "role": "vApp Author",
                  "stored_vm_quota": 20,
                  "take_ownership": true
                }
            - name: my-sys-admin
              manifest: |-
                {
                  "description": "a new sys admin",
                  "name": "my-sys-admin",
                  "org": "System",
                  "password": "change-me-soon",
                  "role": "System Administrator"
                }
            - name: test_sys_user
              manifest: |-
                {
                  "name": "custom-sys-user",
                  "org": "System",
                  "password": "mypass",
                  "role": "${vcd_role.new-sys-role.name}",
                  "take_ownership": true
                }
              references:
                role: vcd_role.new-sys-role.name
              dependencies:
                vcd_role.new-sys-role: |-
                    {
                      "description": "new role from CLI",
                      "name": "new-role",
                      "org": "System",
                      "rights": [
                        "Catalog: Add vApp from My Cloud",
                        "Catalog: Edit Properties",
                        "Catalog: View Private and Shared Catalogs",
                        "Organization vDC Compute Policy: View",
                        "vApp Template / Media: Edit",
                        "vApp Template / Media: View"
                      ]
                    }
            - name: my-org-admin
              manifest: |-
                {
                  "name": "my-org-admin",
                  "org": "my-org",
                  "role": "Organization Administrator"
                }
        argumentDocs:
            deployed_vm_quota: |-
                - (Optional) Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
                The default is 0.
            description: '- (Optional) An optional description of the user.'
            email_address: '- (Optional) The Org User email address. Needs to be a properly formatted email address.'
            enabled: '- (Optional) True if the user is enabled and can log in. The default is true.'
            full_name: '- (Optional) The full name of the user.'
            group_names: |-
                - (Read only) The set of group names to which this user belongs. It's only populated if the users
                are created after the group (with this user having a depends_on of the given group).
            id: '- The ID of the Organization user'
            instant_messaging: '- (Optional) The Org User instant messaging.'
            is_external: |-
                - (Optional) If the user account is going to be imported from an external resource, like an LDAP.
                In this case, password nor password_file are not required. Defaults to false.
            is_group_role: '- (Optional) True if this user has a group role. The default is false.'
            is_locked: |-
                - (Optional) If the user account has been locked due to too many invalid login attempts, the value will
                change to true (only the system can lock the user). To unlock the user re-set this flag to false.
            name: '- (Required) A unique name for the user.'
            org: |-
                - (Optional) The name of organization to which the user belongs. Optional if defined at provider level. If we
                want to create a user at provider level, use "System" as org name.
            password: |-
                - (Optional, but required if password_file was not given and is_external is false) The user password. This value is never returned
                on read. It is inspected on create and modify. To modify, fill with a different value. Note that if you remove the
                password on update, Terraform will indicate that a change was occurring, but the empty password will be ignored by vCD.
            password_file: |-
                - (Optional, but required if password was not given and is_external is false). A text file containing the password. Recommended
                usage: after changing the password, run an apply again with the password blank.
                Using this property instead of password has the advantage that the sensitive data is not saved into Terraform state
                file. The disadvantage is that a password change requires also changing the file name.
            provider_type: |-
                - (Optional) Identity provider type for this user. One of: INTEGRATED, SAML, OAUTH. The default
                is INTEGRATED.
            role: |-
                - (Required) The role of the user. Role names can be retrieved from the organization. Both built-in roles and
                custom built can be used. The roles normally available are:
            stored_vm_quota: |-
                - (Optional) Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
                The default is 0.
            take_ownership: '- (Optional) Take ownership of user''s objects on deletion.'
            telephone: '- (Optional) The Org User telephone number.'
        importStatements: []
    vcd_org_vdc:
        subCategory: ""
        description: Provides a VMware Cloud Director Organization VDC resource. This can be used to create and delete an Organization VDC.
        name: vcd_org_vdc
        title: vcd_org_vdc
        examples:
            - name: my-vdc
              manifest: |-
                {
                  "allocation_model": "ReservationPool",
                  "compute_capacity": [
                    {
                      "cpu": [
                        {
                          "allocated": 2048
                        }
                      ],
                      "memory": [
                        {
                          "allocated": 2048
                        }
                      ]
                    }
                  ],
                  "delete_force": true,
                  "delete_recursive": true,
                  "description": "The pride of my work",
                  "enable_fast_provisioning": true,
                  "enable_thin_provisioning": true,
                  "enabled": true,
                  "metadata_entry": [
                    {
                      "key": "role",
                      "value": "customerName"
                    },
                    {
                      "key": "env",
                      "value": "staging"
                    },
                    {
                      "key": "version",
                      "value": "v1"
                    }
                  ],
                  "name": "my-vdc",
                  "network_pool_name": "vDC1-VXLAN-NP",
                  "org": "my-org",
                  "provider_vdc_name": "vDC1",
                  "storage_profile": [
                    {
                      "default": true,
                      "limit": 10240,
                      "name": "storage-name"
                    }
                  ]
                }
            - name: nsxt-vdc
              manifest: |-
                {
                  "allocation_model": "ReservationPool",
                  "compute_capacity": [
                    {
                      "cpu": [
                        {
                          "allocated": "1024",
                          "limit": "1024"
                        }
                      ],
                      "memory": [
                        {
                          "allocated": "1024",
                          "limit": "1024"
                        }
                      ]
                    }
                  ],
                  "delete_force": true,
                  "delete_recursive": true,
                  "edge_cluster_id": "${data.vcd_nsxt_edge_cluster.ec.id}",
                  "enable_fast_provisioning": true,
                  "enable_thin_provisioning": true,
                  "enabled": true,
                  "name": "NSXT-VDC",
                  "network_pool_name": "NSX-T Overlay 1",
                  "org": "main-org",
                  "provider_vdc_name": "nsxTPvdc1",
                  "storage_profile": [
                    {
                      "default": true,
                      "enabled": true,
                      "limit": 10240,
                      "name": "*"
                    }
                  ]
                }
              references:
                edge_cluster_id: data.vcd_nsxt_edge_cluster.ec.id
            - name: my-vdc
              manifest: |-
                {
                  "default_compute_policy_id": "${vcd_vm_sizing_policy.size_1.id}",
                  "description": "The pride of my work",
                  "name": "my-vdc",
                  "org": "my-org",
                  "vm_sizing_policy_ids": [
                    "${vcd_vm_sizing_policy.size_1.id}",
                    "${vcd_vm_sizing_policy.size_2.id}"
                  ]
                }
              references:
                default_compute_policy_id: vcd_vm_sizing_policy.size_1.id
              dependencies:
                vcd_vm_sizing_policy.size_1: |-
                    {
                      "cpu": [
                        {
                          "cores_per_socket": "3",
                          "count": "9",
                          "limit_in_mhz": "2400",
                          "reservation_guarantee": "0.55",
                          "shares": "886",
                          "speed_in_mhz": "2500"
                        }
                      ],
                      "name": "size-one"
                    }
                vcd_vm_sizing_policy.size_2: |-
                    {
                      "cpu": [
                        {
                          "cores_per_socket": "3",
                          "count": "9",
                          "limit_in_mhz": "2400",
                          "reservation_guarantee": "0.55",
                          "shares": "886",
                          "speed_in_mhz": "2500"
                        }
                      ],
                      "memory": [
                        {
                          "limit_in_mb": "2800",
                          "reservation_guarantee": "0.3",
                          "shares": "1580",
                          "size_in_mb": "3200"
                        }
                      ],
                      "name": "size-two"
                    }
            - name: my-vdc
              manifest: |-
                {
                  "default_compute_policy_id": "${data.vcd_vm_placement_policy.existing-policy.id}",
                  "description": "The pride of my work",
                  "name": "my-vdc",
                  "org": "my-org",
                  "vm_placement_policy_ids": [
                    "${data.vcd_vm_placement_policy.existing-policy.id}",
                    "${vcd_vm_placement_policy.new-placement-policy.id}"
                  ]
                }
              references:
                default_compute_policy_id: data.vcd_vm_placement_policy.existing-policy.id
              dependencies:
                vcd_vm_placement_policy.new-placement-policy: |-
                    {
                      "name": "place-in-vmware-licensed",
                      "provider_vdc_id": "${data.vcd_provider_vdc.pvdc.id}",
                      "vm_group_ids": [
                        "${data.vcd_vm_group.vmgroup.id}"
                      ]
                    }
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
        argumentDocs:
            allocated: '- (Optional) Capacity that is committed to be available. Value in MB or MHz. Used with AllocationPool ("Allocation pool"), ReservationPool ("Reservation pool"), Flex.'
            allocation_model: '- (Required) The allocation model used by this VDC; must be one of'
            allow_over_commit: '- (Optional) Set to false to disallow creation of the VDC if the allocation_model is AllocationPool or ReservationPool and the ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.'
            compute_capacity: '- (Required) The compute capacity allocated to this VDC.  See Compute Capacity below for details.'
            cpu_guaranteed: '- (Optional, System Admin) Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when allocation_model is AllocationVApp, AllocationPool or Flex. If left empty, VCD sets a value.'
            cpu_speed: '- (Optional, System Admin) Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will consume twice as much of this value. Ignored for ReservationPool. Required when allocation_model is AllocationVApp, AllocationPool or Flex, and may not be less than 256 MHz. Defaults to 1000 MHz if value isn''t provided.'
            default: '- (Required) True if this is default storage profile for this VDC. The default storage profile is used when an object that can specify a storage profile is created with no storage profile specified.'
            default_compute_policy_id: '- (Optional, v3.8+, VCD 10.2+) ID of the default Compute Policy for this VDC. It can be a VM Sizing Policy, a VM Placement Policy or a vGPU Policy.'
            default_vm_sizing_policy_id: '- (Deprecated; Optional, v3.0+, VCD 10.2+) ID of the default Compute Policy for this VDC. It can be a VM Sizing Policy, a VM Placement Policy or a vGPU Policy. Deprecated in favor of default_compute_policy_id.'
            delete_force: '- (Required) When destroying use delete_force=true to remove a VDC and any objects it contains, regardless of their state.'
            delete_recursive: '- (Required) When destroying use delete_recursive=true to remove the VDC and any objects it contains that are in a state that normally allows removal.'
            description: '- (Optional) VDC friendly description'
            edge_cluster_id: |-
                - (Optional, v3.8+, VCD 10.3+) An ID of NSX-T Edge Cluster which should
                provide vApp Networking Services or DHCP for isolated networks. Can be looked up using
                vcd_nsxt_edge_cluster data source.
            elasticity: '- (Optional, v2.7+, VCD 9.7+) Indicates if the Flex VDC should be elastic. Required with the Flex allocation model.'
            enable_fast_provisioning: '- (Optional, System Admin) Request fast provisioning. Request will be honored only if the underlying datastore supports it. Fast provisioning can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast provisioning, all provisioning operations will result in full clones.'
            enable_nsxv_distributed_firewall: '- (Optional, v3.9+, VCD 10.3+) Enables or disables the NSX-V distributed firewall.'
            enable_thin_provisioning: '- (Optional, System Admin) Boolean to request thin provisioning. Request will be honored only if the underlying data store supports it. Thin provisioning saves storage space by committing it on demand. This allows over-allocation of storage.'
            enable_vm_discovery: '- (Optional) If true, discovery of vCenter VMs is enabled for resource pools backing this VDC. If false, discovery is disabled. If left unspecified, the actual behaviour depends on enablement at the organization level and at the system level.'
            enabled: '- (Optional) True if this VDC is enabled for use by the organization VDCs. Default is true.'
            include_vm_memory_overhead: '- (Optional, v2.7+, VCD 9.7+) Indicates if the Flex VDC should include memory overhead into its accounting for admission control. Required with the Flex allocation model.'
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            limit: '- (Required) Maximum number of MB allocated for this storage profile. A value of 0 specifies unlimited MB.'
            memory_guaranteed: '- (Optional, System Admin) Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when allocation_model is AllocationVApp, AllocationPool or Flex. When Allocation model is AllocationPool minimum value is 0.2. If left empty, VCD sets a value.'
            metadata: '- (Deprecated; v2.4+) Use metadata_entry instead. Key value map of metadata to assign to this VDC'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) VDC name'
            network_pool_name: '- (Optional, System Admin) Reference to a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.'
            network_quota: '- (Optional) Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be deployed.'
            nic_quota: '- (Optional) Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.'
            org: '- (Optional) Organization to create the VDC in, optional if defined at provider level'
            provider_vdc_name: '- (Required, System Admin) Name of the Provider VDC from which this organization VDC is provisioned.'
            storage_profile: '- (Required, System Admin) Storage profiles supported by this VDC.  See Storage Profile below for details.'
            storage_used_in_mb: '- (Computed, v3.1+) Storage used, in Megabytes.'
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vm_placement_policy_ids: '- (Optional, v3.8+, VCD 10.2+) Set of IDs of VM Placement policies that are assigned to this VDC. This field requires default_compute_policy_id to be configured together.'
            vm_quota: '- (Optional) The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp templates. Defaults to 0, which specifies an unlimited number.'
            vm_sizing_policy_ids: '- (Optional, v3.0+, VCD 10.2+) Set of IDs of VM Sizing policies that are assigned to this VDC. This field requires default_compute_policy_id to be configured together.'
        importStatements: []
    vcd_org_vdc_access_control:
        subCategory: ""
        description: Provides a VMware Cloud Director Org VDC access control resource. This can be used to share VDC across users or groups.
        name: vcd_org_vdc_access_control
        title: org_vdc_access_control
        examples:
            - name: my_access_control
              manifest: |-
                {
                  "org": "my-org",
                  "shared_with": [
                    {
                      "access_level": "ReadOnly",
                      "user_id": "${data.vcd_org_user.my-user.id}"
                    },
                    {
                      "access_level": "ReadOnly",
                      "user_id": "${data.vcd_org_user.my-user2.id}"
                    }
                  ],
                  "shared_with_everyone": false,
                  "vdc": "my-vdc"
                }
              references:
                shared_with.user_id: data.vcd_org_user.my-user2.id
            - name: my_access_control
              manifest: |-
                {
                  "everyone_access_level": "ReadOnly",
                  "org": "my-org",
                  "shared_with_everyone": true,
                  "vdc": "my-vdc"
                }
            - name: my_access_control
              manifest: |-
                {
                  "everyone_access_level": "ReadOnly",
                  "org": "my-org",
                  "shared_with_everyone": true,
                  "vdc": "my-vdc"
                }
              dependencies:
                vcd_org_vdc.my_vdc: |-
                    {
                      "allocation_model": "Flex",
                      "compute_capacity": [
                        {
                          "cpu": [
                            {
                              "allocated": "1024",
                              "limit": "1024"
                            }
                          ],
                          "memory": [
                            {
                              "allocated": "1024",
                              "limit": "1024"
                            }
                          ]
                        }
                      ],
                      "delete_force": true,
                      "delete_recursive": true,
                      "elasticity": false,
                      "enable_fast_provisioning": true,
                      "enable_thin_provisioning": true,
                      "enabled": true,
                      "include_vm_memory_overhead": false,
                      "name": "my-vdc",
                      "network_pool_name": "my-network-pool",
                      "org": "my-org",
                      "provider_vdc_name": "my-provider-vdc",
                      "storage_profile": [
                        {
                          "default": true,
                          "enabled": true,
                          "limit": 10240,
                          "name": "my-storage-profile"
                        }
                      ]
                    }
        argumentDocs:
            everyone_access_level: '- (Optional) Access level when the VDC is shared with everyone (only ReadOnly is available). Required when shared_with_everyone is set.'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.'
            shared_with: |-
                - (Optional) one or more blocks defining a subject to which we are sharing.
                See shared_with below for detail. It cannot be used if shared_with_everyone is set.
            shared_with.access_level: '- (Required) The access level for the user or group to which we are sharing. (Only ReadOnly is available)'
            shared_with.group_id: '- (Optional) The ID of a group which we are sharing with. Required if user_id is not set.'
            shared_with.subject_name: '- The name of the subject (group or user) which we are sharing with.'
            shared_with.user_id: '- (Optional) The ID of a user which we are sharing with. Required if group_id is not set.'
            shared_with_everyone: '- (Required) Whether the VDC is shared with everyone.'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level.'
        importStatements: []
    vcd_rde:
        subCategory: ""
        description: Provides the capability of creating, updating, and deleting Runtime Defined Entities in VMware Cloud Director.
        name: vcd_rde
        title: vcd_rde
        examples:
            - name: my_rde
              manifest: |-
                {
                  "input_entity": "${file(\"${path.module}/entities/custom-rde.json\")}",
                  "name": "My custom RDE",
                  "org": "my-org",
                  "rde_type_id": "${data.vcd_rde_type.my-type.id}",
                  "resolve": true
                }
              references:
                rde_type_id: data.vcd_rde_type.my-type.id
            - name: my_rde
              manifest: |-
                {
                  "input_entity": "${templatefile(\"${path.module}/entities/custom-rde.json\", {\n    name          = var.name\n    custom_field  = \"This one is hardcoded\"\n    another_field = var.anoter_field\n    replicas      = 2\n  })}",
                  "name": "My custom RDE",
                  "org": "my-org",
                  "rde_type_id": "${data.vcd_rde_type.my-type.id}",
                  "resolve": true
                }
              references:
                rde_type_id: data.vcd_rde_type.my-type.id
            - name: my-rde
              manifest: |-
                {
                  "entity_url": "https://just.an-example.com/entities/custom-rde.json",
                  "name": "My custom RDE",
                  "org": "my-org",
                  "rde_type_id": "${data.vcd_rde_type.my-type.id}",
                  "resolve": true
                }
              references:
                rde_type_id: data.vcd_rde_type.my-type.id
            - name: outer_rde
              manifest: |-
                {
                  "name": "foo",
                  "rde_type_id": "${data.my_rde_type.id}"
                }
              references:
                rde_type_id: data.my_rde_type.id
        argumentDocs:
            computed_entity: '- The real state of this RDE in VCD. See Input entity vs Computed entity below for details.'
            entity_in_sync: |-
                - It's true when computed_entity is equal to either input_entity or the contents of input_entity_url,
                meaning that the computed RDE retrieved from VCD is synchronized with the input RDE.
            external_id: '- (Optional) An external input_entity''s ID that this Runtime Defined Entity may have a relation to.'
            input_entity: '- (Optional) A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as file, templatefile... Either input_entity or input_entity_url is required.'
            input_entity_url: |-
                - (Optional) The URL that points to a valid JSON for the RDE. Either input_entity or input_entity_url is required.
                The referenced JSON will be downloaded on every read operation, and it will break Terraform operations if these contents are no longer present on the remote site.
                If you can't guarantee this, it is safer to use input_entity.
            name: '- (Required) The name of the Runtime Defined Entity. It can be non-unique.'
            org: '- (Optional) Name of the Organization that will own the RDE, optional if defined at provider level.'
            org_id: '- The ID of the Organization to which the Runtime Defined Entity belongs.'
            owner_user_id: '- The ID of the Organization user that owns this Runtime Defined Entity.'
            rde_type_id: '- (Required) The ID of the RDE Type to instantiate.'
            resolve: |-
                - (Required) If true, the Runtime Defined Entity will be resolved by this provider. If false, it won't be
                resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
                deleted until the input_entity is resolved by either party, unless resolve_on_removal=true. See RDE resolution for more details.
            resolve_on_removal: '- (Optional) If true, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is false by default.'
            state: |-
                - Specifies whether the entity is correctly resolved or not. When created it will be in PRE_CREATED state.
                If the entity is correctly validated against its RDE Type schema, the state will be RESOLVED,
                otherwise it will be RESOLUTION_ERROR.
        importStatements: []
    vcd_rde_interface:
        subCategory: ""
        description: Provides the capability of creating, updating, and deleting Runtime Defined Entity Interfaces in VMware Cloud Director.
        name: vcd_rde_interface
        title: vcd_rde_interface
        examples:
            - name: my_interface1
              manifest: |-
                {
                  "name": "BigCorp Interface",
                  "nss": "tech",
                  "vendor": "bigcorp",
                  "version": "1.2.3"
                }
            - name: my_interface2
              manifest: |-
                {
                  "name": "Another BigCorp Interface",
                  "nss": "tech",
                  "vendor": "bigcorp",
                  "version": "1.2.4"
                }
            - name: outer_interface
              manifest: |-
                {
                  "nss": "tech",
                  "vendor": "bigcorp",
                  "version": "4.5.6"
                }
        argumentDocs:
            name: '- (Required) The name of the RDE Interface.'
            nss: '- (Required) A unique namespace associated with the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.'
            readonly: '- Specifies if the RDE Interface can be only read.'
            vendor: '- (Required) The vendor of the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.'
            version: '- (Required) The version of the RDE Interface. Must follow semantic versioning syntax.'
        importStatements: []
    vcd_rde_type:
        subCategory: ""
        description: Provides the capability of creating, updating, and deleting Runtime Defined Entity types in VMware Cloud Director.
        name: vcd_rde_type
        title: vcd_rde_type
        examples:
            - name: my_rde_type
              manifest: |-
                {
                  "interface_ids": [
                    "${data.vcd_rde_interface.my_interface.id}"
                  ],
                  "name": "My VMware RDE Type",
                  "nss": "vcd",
                  "schema": "${file(\"${path.module}/schemas/my-type-schema.json\")}",
                  "vendor": "vmware",
                  "version": "4.5.6"
                }
            - name: my_rde_type
              manifest: |-
                {
                  "interface_ids": [
                    "${data.vcd_rde_interface.my_interface.id}"
                  ],
                  "name": "My VMware RDE Type",
                  "nss": "vcd",
                  "schema_url": "https://just.an-example.com/schemas/my-type-schema.json",
                  "vendor": "vmware",
                  "version": "4.5.6"
                }
            - name: outer_rde_type
              manifest: |-
                {
                  "nss": "tech",
                  "vendor": "bigcorp",
                  "version": "4.5.6"
                }
        argumentDocs:
            description: '- (Optional) The description of the Runtime Defined Entity Type.'
            external_id: '- (Optional) An external entity''s ID that this Runtime Defined Entity Type may apply to.'
            inherited_version: |-
                - (Optional) To be used when creating a new version of a Runtime Defined Entity Type.
                Specifies the version of the type that will be the template for the authorization configuration of the new version.
                The Type ACLs and the access requirements of the Type Behaviors of the new version will be copied from those of the inherited version.
                If not set, then the new type version will not inherit another version and will have the default authorization settings, just like the first version of a new type.
            interface_ids: '- (Optional) The set of Defined Interfaces that this Runtime Defined Entity Type will use.'
            name: '- (Required) The name of the Runtime Defined Entity Type.'
            nss: '- (Required) A unique namespace associated with the Runtime Defined Entity Type. Only alphanumeric characters, underscores and hyphens allowed.'
            readonly: '- True if the Runtime Defined Entity Type cannot be modified.'
            schema: '- (Optional) A string that specifies a valid JSON schema. It can be retrieved with Terraform functions such as file, templatefile, etc. Either schema or schema_url is required.'
            schema_url: |-
                - (Optional) The URL that points to a valid JSON schema. Either schema or schema_url is required.
                If schema_url is used, the downloaded schema will be computed in the schema attribute.
                The referenced JSON schema will be downloaded on every read operation, and it will break Terraform operations if these contents are no longer present on the remote site.
                If you can't guarantee this, it is safer to use schema.
            vendor: '- (Required) The vendor of the Runtime Defined Entity Type. Only alphanumeric characters, underscores and hyphens allowed.'
            version: '- (Required) The version of the Runtime Defined Entity Type. Must follow semantic versioning syntax.'
        importStatements: []
    vcd_rights_bundle:
        subCategory: ""
        description: Provides a VMware Cloud Director rights bundle. This can be used to create, modify, and delete rights bundles.
        name: vcd_rights_bundle
        title: vcd_rights_bundle
        examples:
            - name: new-rights-bundle
              manifest: |-
                {
                  "description": "new rights bundle from CLI",
                  "name": "new-rights-bundle",
                  "publish_to_all_tenants": false,
                  "rights": [
                    "Catalog: Add vApp from My Cloud",
                    "Catalog: Edit Properties",
                    "Catalog: View Private and Shared Catalogs",
                    "Organization vDC Compute Policy: View",
                    "vApp Template / Media: Edit",
                    "vApp Template / Media: View"
                  ],
                  "tenants": [
                    "org1",
                    "org2"
                  ]
                }
            - name: default-set
              manifest: |-
                {
                  "name": "Default Rights Bundle"
                }
        argumentDocs:
            bundle_key: '- Key used for internationalization'
            description: '- (Required) A description of the rights bundle'
            name: '- (Required) The name of the rights bundle.'
            publish_to_all_tenants: '- (Required) When true, publishes the rights bundle to all tenants'
            read_only: '- Whether this rights bundle is read-only'
            rights: '- (Optional) Set of rights assigned to this role'
            tenants: '- (Optional) Set of tenants to which this rights bundle gets published. Ignored if publish_to_all_tenants is true.'
        importStatements: []
    vcd_role:
        subCategory: ""
        description: Provides a VMware Cloud Director role. This can be used to create, modify, and delete roles.
        name: vcd_role
        title: vcd_role
        examples:
            - name: new-role
              manifest: |-
                {
                  "description": "new role from CLI",
                  "name": "new-role",
                  "org": "my-org",
                  "rights": [
                    "Catalog: Add vApp from My Cloud",
                    "Catalog: Edit Properties",
                    "Catalog: View Private and Shared Catalogs",
                    "Organization vDC Compute Policy: View",
                    "vApp Template / Media: Edit",
                    "vApp Template / Media: View"
                  ]
                }
            - name: catalog-author
              manifest: |-
                {
                  "name": "Catalog Author",
                  "org": "my-org"
                }
        argumentDocs:
            bundle_key: '- Key used for internationalization'
            description: '- (Required) A description of the role'
            name: '- (Required) The name of the role.'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            read_only: '- Whether this role is read-only'
            rights: '- (Optional) Set of rights assigned to this role'
        importStatements: []
    vcd_security_tag:
        subCategory: ""
        description: Provides a VMware Cloud Director Security Tag resource. This can be used to assign security tag to VMs.
        name: vcd_security_tag
        title: security_tag
        examples:
            - name: my_tag
              manifest: |-
                {
                  "name": "test-tag",
                  "vm_ids": [
                    "${vcd_vm.my-vm-one.id}",
                    "${vcd_vm.my-vm-two.id}"
                  ]
                }
        argumentDocs:
            name: '- (Required) The name of the security tag.'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            vm_ids: '- (Required) List of VM IDs that the security tag is going to be applied to.'
        importStatements: []
    vcd_subscribed_catalog:
        subCategory: ""
        description: Provides a VMware Cloud Director subscribed catalog resource. This can be used to create, update, and delete a subscribed catalog.
        name: vcd_subscribed_catalog
        title: vcd_catalog
        examples:
            - name: subscriber
              manifest: |-
                {
                  "delete_force": true,
                  "delete_recursive": true,
                  "make_local_copy": true,
                  "name": "subscriber",
                  "org": "my-org",
                  "subscription_password": "${var.subscription_password}",
                  "subscription_url": "${var.subscription_url}"
                }
              references:
                subscription_password: var.subscription_password
                subscription_url: var.subscription_url
            - name: subscriber
              manifest: |-
                {
                  "delete_force": true,
                  "delete_recursive": true,
                  "make_local_copy": false,
                  "name": "subscriber",
                  "org": "my-org",
                  "subscription_password": "${var.subscription_password}",
                  "subscription_url": "${var.subscription_url}",
                  "sync_all": true,
                  "sync_on_refresh": true
                }
              references:
                subscription_password: var.subscription_password
                subscription_url: var.subscription_url
            - name: my-catalog
              manifest: |-
                {
                  "delete_force": true,
                  "delete_recursive": true,
                  "name": "my-catalog",
                  "org": "my-org",
                  "subscription_url": "${var.publish_subscription_url}"
                }
              references:
                subscription_url: var.publish_subscription_url
        argumentDocs:
            cancel_failed_tasks: '- (Optional) When true, the subscribed catalog will attempt canceling failed tasks.'
            catalog_version: '- Version number from this catalog. This is inherited from the publishing catalog and updated on sync.'
            created: '- Date and time of catalog creation. This is the creation date of the subscription, not the original published catalog.'
            delete_force: '- (Optional) When destroying use delete_force=true with delete_recursive=true to remove a catalog and any objects it contains, regardless of their state.'
            delete_recursive: '- (Optional) When destroying use delete_recursive=true to remove the catalog and any objects it contains that are in a state that normally allows removal.'
            description: '-  Description of catalog. This is inherited from the publishing catalog and updated on sync.'
            failed_tasks: '- List of synchronization tasks that are have failed. They can refer to the catalog or any of its catalog items.'
            href: '- the catalog''s Hyper reference.'
            is_local: '- (v3.8.1+) Indicates if this catalog was created in the current organization.'
            is_published: '- Indicates if this catalog is available for subscription. (Always false)'
            is_shared: '- Indicates if the catalog is shared.'
            make_local_copy: |-
                - (Optional) If true, subscription to a catalog creates a local copy of all items. Defaults to false, which does not create a local copy of catalog items unless a sync operation is performed.
                It can only be false if the user configured in the provider is the System administrator.
            media_item_list: List of media item names in this catalog, in alphabetical order.
            metadata: '-  Optional metadata of the catalog. This is inherited from the publishing catalog and updated on sync.'
            name: '- (Required) Catalog name'
            number_of_media: '- Number of media items available in this catalog.'
            number_of_vapp_templates: '- Number of vApp templates available in this catalog.'
            org: '- (Optional) The name of organization to use, optional if defined at provider level.'
            owner_name: '- Owner of the catalog.'
            publish_subscription_type: '- Shows if the catalog is published, if it is a subscription from another one or none of those. (Always SUBSCRIBED)'
            running_tasks: '- List of running synchronization tasks that are still running. They can refer to the catalog or any of its catalog items.'
            storage_profile_id: '- (Optional) Allows to set specific storage profile to be used for catalog.'
            store_tasks: '- (Optional) if true, saves the list of tasks to a file for later update.'
            subscription_password: |-
                - (Optional) An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
                The password is only required when set by the publishing catalog. Passing in six asterisks '******' indicates to keep current password.
                Passing in an empty string indicates to remove password.
            subscription_url: '- (Required) The URL to subscribe to the external catalog.'
            sync_all: '- (Optional) If true, synchronise this catalog and all items.'
            sync_all_media_items: '- (Optional) If true, synchronise all media items. Not to be used when sync_all is set.'
            sync_all_vapp_templates: '- (Optional) If true, synchronise all vApp templates. Not to be used when sync_all is set.'
            sync_catalog: '- (Optional) If true, synchronise this catalog. Not to be used when sync_all is set. This operation fetches the list of items. If make_local_copy is set, it also synchronises all the items.'
            sync_media_items: '- (Optional) Synchronise a list of media items. Not to be used when sync_all or sync_all_media_items are set.'
            sync_on_refresh: '- (Optional) Boolean value that shows if sync should be performed on every refresh.'
            sync_vapp_templates: '- (Optional) Synchronise a list of vApp templates. Not to be used when sync_all or sync_all_vapp_templates are set.'
            tasks_file_name: Where the running tasks IDs have been stored. Only if store_tasks is set.
            vapp_template_list: List of vApp template names in this catalog, in alphabetical order.
        importStatements: []
    vcd_vapp:
        subCategory: ""
        description: Provides a VMware Cloud Director vApp resource. This can be used to create, modify, and delete vApps.
        name: vcd_vapp
        title: vcd_vapp
        examples:
            - name: web
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "key": "CostAccount",
                      "value": "Marketing Department"
                    }
                  ],
                  "name": "web"
                }
              dependencies:
                vcd_network_direct.direct-network: |-
                    {
                      "external_network": "my-ext-net",
                      "name": "net"
                    }
                vcd_vapp_org_network.direct-network: |-
                    {
                      "org_network_name": "${vcd_network_direct.direct-network.name}",
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
                vcd_vapp_vm.web1: |-
                    {
                      "cpus": 1,
                      "guest_properties": {
                        "vapp.property1": "value1",
                        "vapp.property2": "value2"
                      },
                      "lease": [
                        {
                          "runtime_lease_in_sec": "${60 * 60 * 24 * 30}",
                          "storage_lease_in_sec": "${60 * 60 * 24 * 7}"
                        }
                      ],
                      "memory": 2048,
                      "name": "web1",
                      "network": [
                        {
                          "ip_allocation_mode": "POOL",
                          "name": "${vcd_vapp_org_network.direct-network.org_network_name}",
                          "type": "org"
                        }
                      ],
                      "vapp_name": "${vcd_vapp.web.name}",
                      "vapp_template_id": "${data.vcd_catalog_vapp_template.photon-os.id}"
                    }
                vcd_vapp_vm.web2: |-
                    {
                      "cpus": 1,
                      "memory": 2048,
                      "name": "web2",
                      "network": [
                        {
                          "ip_allocation_mode": "POOL",
                          "name": "${vcd_vapp_org_network.direct-network.org_network_name}",
                          "type": "org"
                        }
                      ],
                      "vapp_name": "${vcd_vapp.web.name}",
                      "vapp_template_id": "${data.vcd_catalog_vapp_template.photon-os.id}"
                    }
            - name: web
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "key": "boss",
                      "value": "Why is this vApp empty?"
                    },
                    {
                      "key": "john",
                      "value": "I don't really know. Maybe somebody did forget to clean it up."
                    }
                  ],
                  "name": "web"
                }
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: tf-vapp
              manifest: |-
                {
                  "name": "my-vapp",
                  "org": "my-org",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            description: (Optional; v3.3) An optional description for the vApp, up to 256 characters.
            guest_properties: '- (Optional; v2.5+) Key value map of vApp guest properties'
            href: '- (Computed) The vApp Hyper Reference.'
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            key: '- (Required) Key of this metadata entry.'
            lease: |-
                - (Optional v3.5+) the information about the vApp lease. It includes the fields below. When this section is
                included, both fields are mandatory. If lease values are higher than the ones allowed for the whole Org, the values
                are silently reduced to the highest value allowed.
            metadata: '- (Deprecated) Use metadata_entry instead. Key value map of metadata to assign to this vApp. Key and value can be any string. (Since v2.2+ metadata is added directly to vApp instead of first VM in vApp)'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            name: '- (Required) A unique name for the vApp'
            org: '- (Optional; v2.0+) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            power_on: '- (Optional) A boolean value stating if this vApp should be powered on. Default is false. Works only on update when vApp already has VMs.'
            runtime_lease_in_sec: '- How long any of the VMs in the vApp can run before the vApp is automatically powered off or suspended. 0 means never expires (or maximum allowed by Org). Regular values accepted from 3600+.'
            status: '- (Computed; v2.5+) The vApp status as a numeric code.'
            status_text: '- (Computed; v2.5+) The vApp status as text.'
            storage_lease_in_sec: '- How long the vApp is available before being automatically deleted or marked as expired. 0 means never expires (or maximum allowed by Org). Regular values accepted from 3600+.'
            type: '- (Required) Type of this metadata entry. One of: MetadataStringValue, MetadataNumberValue, MetadataDateTimeValue, MetadataBooleanValue.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vdc: '- (Optional; v2.0+) The name of VDC to use, optional if defined at provider level'
        importStatements: []
    vcd_vapp_access_control:
        subCategory: ""
        description: Provides a VMware Cloud Director Access Control structure for a vApp.
        name: vcd_vapp_access_control
        title: vcd_vapp_access_control
        examples:
            - name: AC-not-shared
              manifest: |-
                {
                  "shared_with_everyone": false,
                  "vapp_id": "${data.vcd_vapp.Vapp-AC-0.id}"
                }
              references:
                vapp_id: data.vcd_vapp.Vapp-AC-0.id
            - name: AC-global
              manifest: |-
                {
                  "everyone_access_level": "Change",
                  "shared_with_everyone": true,
                  "vapp_id": "${data.vcd_vapp.Vapp-AC-1.id}"
                }
              references:
                vapp_id: data.vcd_vapp.Vapp-AC-1.id
            - name: AC-users
              manifest: |-
                {
                  "shared_with": [
                    {
                      "access_level": "FullControl",
                      "user_id": "${data.vcd_org_user.ac-admin1.id}"
                    },
                    {
                      "access_level": "Change",
                      "user_id": "${data.vcd_org_user.ac-vapp-creator2.id}"
                    }
                  ],
                  "shared_with_everyone": false,
                  "vapp_id": "${data.vcd_vapp.Vapp-AC-2.id}"
                }
              references:
                shared_with.user_id: data.vcd_org_user.ac-vapp-creator2.id
                vapp_id: data.vcd_vapp.Vapp-AC-2.id
            - name: my-ac
              manifest: |-
                {
                  "org": "my-org",
                  "vapp_id": "my-vapp",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            everyone_access_level: |-
                - (Optional) Access level when the vApp is shared with everyone (one of ReadOnly, Change,
                FullControl). Required if shared_with_everyone is true.
            org: '- (Optional) The name of organization to which the vApp belongs. Optional if defined at provider level.'
            shared_with: |-
                - (Optional) one or more blocks defining a subject to which we are sharing.
                See shared_with below for detail. It cannot be used if shared_with_everyone is set.
            shared_with.access_level: '- (Required) The access level for the user or group to which we are sharing. (One of ReadOnly, Change, FullControl)'
            shared_with.group_id: '- (Optional) The ID of a group with which we are sharing. Required if user_id is not set.'
            shared_with.subject_name: '- (Computed) the name of the subject (group or user) with which we are sharing.'
            shared_with.user_id: '- (Optional) The ID of a user with which we are sharing. Required if group_id is not set.'
            shared_with_everyone: |-
                - (Required) Whether the vApp is shared with everyone. If any shared_with blocks are included,
                this property must be set to false.
            vapp_id: '- (Required) A unique identifier for the vApp.'
            vdc: '- (Optional) The name of organization to which the vApp belongs. Optional if defined at provider level.'
        importStatements: []
    vcd_vapp_firewall_rules:
        subCategory: ""
        description: Provides a VMware Cloud Director vApp Firewall resource. This can be used to create, modify, and delete firewall settings and rules.
        name: vcd_vapp_firewall_rules
        title: vcd_vapp_firewall_rules
        examples:
            - name: vapp-fw
              manifest: |-
                {
                  "default_action": "drop",
                  "network_id": "${vcd_vapp_network.vapp-net.id}",
                  "rule": [
                    {
                      "destination_ip": "any",
                      "destination_port": "21",
                      "name": "drop-ftp-out",
                      "policy": "drop",
                      "protocol": "tcp",
                      "source_ip": "10.10.0.0/24",
                      "source_port": "any"
                    },
                    {
                      "destination_ip": "any",
                      "destination_port": "any",
                      "name": "allow-outbound",
                      "policy": "allow",
                      "protocol": "any",
                      "source_ip": "10.10.0.0/24",
                      "source_port": "any"
                    }
                  ],
                  "vapp_id": "${vcd_vapp.web.id}"
                }
              references:
                network_id: vcd_vapp_network.vapp-net.id
                vapp_id: vcd_vapp.web.id
              dependencies:
                vcd_vapp.web: |-
                    {
                      "name": "web"
                    }
                vcd_vapp_network.vapp-net: |-
                    {
                      "dns1": "192.168.2.1",
                      "gateway": "192.168.2.1",
                      "name": "my-vapp-net",
                      "netmask": "255.255.255.0",
                      "org_network_name": "my-vdc-int-net",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.2.100",
                          "start_address": "192.168.2.51"
                        }
                      ],
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
        argumentDocs:
            default_action: '- (Required) Either ''allow'' or ''drop''. Specifies what to do should none of the rules match.'
            destination_ip: '- (Optional) The destination IP to match. Either an IP address, IP range or any.'
            destination_port: '- (Optional) The destination port to match. Either a port number or any.'
            destination_vm_id: '- (Optional) Destination VM identifier.'
            destination_vm_ip_type: '- (Optional) The value can be one of: assigned - assigned internal IP will be automatically chosen, NAT - NATed external IP will be automatically chosen.'
            destination_vm_nic_id: '- (Optional) VM NIC ID to which this rule applies.'
            enable_logging: '- (Optional) true value will enable rule logging. Default is false.'
            enabled: '- (Optional) Enable or disable firewall. Default is true.'
            log_default_action: '- (Optional) Flag to enable logging for default action. Default value is false.'
            name: '- (Optional) Name of the firewall rule.'
            network_id: '- (Required) The identifier of vApp network.'
            org: '- The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.'
            policy: '- (Optional) Specifies what to do when this rule is matched. Either allow or drop.'
            protocol: '- (Optional) The protocol to match. One of tcp, udp, icmp, any or tcp&udp. Default is any.'
            rule: '- (Optional) Configures a firewall rule; see Rules below for details.'
            source_ip: '- (Optional) The source IP to match. Either an IP address, IP range or any.'
            source_port: '- (Optional) The source port to match. Either a port number or any.'
            source_vm_id: '- (Optional) Source VM identifier.'
            source_vm_ip_type: '- (Optional) The value can be one of: assigned - assigned internal IP will be automatically chosen, NAT - NATed external IP will be automatically chosen.'
            source_vm_nic_id: '- (Optional) VM NIC ID to which this rule applies.'
            vapp_id: '- (Required) The identifier of vApp.'
            vdc: '- The name of VDC to use, optional if defined at provider level.'
        importStatements:
            - "$ terraform import vcd_vapp_firewall_rules.imported list@org-name.vdc-name.vapp-name\nvcd_vapp_firewall_rules.imported: Importing from ID \"list@org-name.vdc-name.vapp-name\"...\nRetrieving all vApp networks by name\nNo\tvApp ID                                                 ID                                      Name\t\n--\t-------                                                 --                                      ----\t\n1\turn:vcloud:vapp:77755b9c-5ec9-41f7-aceb-4cf158786482\t0027c6ae-7d59-457e-b33e-a89e97f0bdc1\tNet2\n2\turn:vcloud:vapp:77755b9c-5ec9-41f7-aceb-4cf158786482\t36986073-8051-4f6d-a1c6-bda648bdf6ba\tNet1      \t\t\n\nError: resource id must be specified in one of these formats:\n'org-name.vdc-name.vapp-name.network_name', 'org.vdc-name.vapp-id.network-id' or \n'list@org-name.vdc-name.vapp-name' to get a list of vapp networks with their IDs"
            - $ terraform import vcd_vapp_firewall_rules.imported org-name.vdc-name.urn:vcloud:vapp:77755b9c-5ec9-41f7-aceb-4cf158786482.0027c6ae-7d59-457e-b33e-a89e97f0bdc1
    vcd_vapp_nat_rules:
        subCategory: ""
        description: Provides a VMware Cloud Director vApp NAT resource. This can be used to create, modify, and delete NAT rules.
        name: vcd_vapp_nat_rules
        title: vcd_vapp_nat_rules
        examples:
            - name: vapp-nat
              manifest: |-
                {
                  "enable_ip_masquerade": false,
                  "nat_type": "portForwarding",
                  "network_id": "${vcd_vapp_network.vapp-net.id}",
                  "rule": [
                    {
                      "external_port": "22",
                      "forward_to_port": "-1",
                      "protocol": "TCP_UDP",
                      "vm_id": "${vcd_vapp_vm.vm1.id}",
                      "vm_nic_id": "0"
                    },
                    {
                      "external_port": "-1",
                      "forward_to_port": "80",
                      "protocol": "TCP",
                      "vm_id": "${vcd_vapp_vm.vm2.id}",
                      "vm_nic_id": "0"
                    }
                  ],
                  "vapp_id": "${vcd_vapp.web.id}"
                }
              references:
                network_id: vcd_vapp_network.vapp-net.id
                rule.vm_id: vcd_vapp_vm.vm2.id
                vapp_id: vcd_vapp.web.id
              dependencies:
                vcd_vapp.web: |-
                    {
                      "name": "web"
                    }
                vcd_vapp_firewall_rules.vapp_fw1: |-
                    {
                      "default_action": "drop",
                      "enabled": true,
                      "network_id": "${vcd_vapp_network.vapp-net.id}",
                      "vapp_id": "${vcd_vapp.web.id}"
                    }
                vcd_vapp_firewall_rules.vapp_fw2: |-
                    {
                      "default_action": "drop",
                      "enabled": true,
                      "network_id": "${vcd_vapp_network.vapp-org-net.id}",
                      "vapp_id": "${vcd_vapp.web.id}"
                    }
                vcd_vapp_network.vapp-net: |-
                    {
                      "dns1": "192.168.2.1",
                      "gateway": "192.168.2.1",
                      "name": "my-vapp-net",
                      "netmask": "255.255.255.0",
                      "org_network_name": "my-vdc-int-net",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.2.100",
                          "start_address": "192.168.2.51"
                        }
                      ],
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
                vcd_vapp_org_network.vapp-org-net: |-
                    {
                      "is_fenced": true,
                      "org_network_name": "${vcd_network_routed.network-routed.name}",
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
            - name: vapp-nat2
              manifest: |-
                {
                  "nat_type": "ipTranslation",
                  "network_id": "${vcd_vapp_network.vapp-org-net.id}",
                  "rule": [
                    {
                      "external_ip": "10.10.103.13",
                      "mapping_mode": "manual",
                      "vm_id": "${vcd_vapp_vm.vm1.id}",
                      "vm_nic_id": 0
                    },
                    {
                      "mapping_mode": "automatic",
                      "vm_id": "${vcd_vapp_vm.vm2.id}",
                      "vm_nic_id": 0
                    }
                  ],
                  "vapp_id": "${vcd_vapp.web.id}"
                }
              references:
                network_id: vcd_vapp_network.vapp-org-net.id
                rule.vm_id: vcd_vapp_vm.vm2.id
                vapp_id: vcd_vapp.web.id
              dependencies:
                vcd_vapp.web: |-
                    {
                      "name": "web"
                    }
                vcd_vapp_firewall_rules.vapp_fw1: |-
                    {
                      "default_action": "drop",
                      "enabled": true,
                      "network_id": "${vcd_vapp_network.vapp-net.id}",
                      "vapp_id": "${vcd_vapp.web.id}"
                    }
                vcd_vapp_firewall_rules.vapp_fw2: |-
                    {
                      "default_action": "drop",
                      "enabled": true,
                      "network_id": "${vcd_vapp_network.vapp-org-net.id}",
                      "vapp_id": "${vcd_vapp.web.id}"
                    }
                vcd_vapp_network.vapp-net: |-
                    {
                      "dns1": "192.168.2.1",
                      "gateway": "192.168.2.1",
                      "name": "my-vapp-net",
                      "netmask": "255.255.255.0",
                      "org_network_name": "my-vdc-int-net",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.2.100",
                          "start_address": "192.168.2.51"
                        }
                      ],
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
                vcd_vapp_org_network.vapp-org-net: |-
                    {
                      "is_fenced": true,
                      "org_network_name": "${vcd_network_routed.network-routed.name}",
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
        argumentDocs:
            enable_ip_masquerade: '- (Optional) When enabled translates a virtual machine''s private, internal IP address to a public IP address for outbound traffic. Default value is false.'
            enabled: '- (Optional) Enable or disable NAT. Default is true. To enable the NAT service, vcd_vapp_firewall_rules needs to be enabled as well.'
            external_ip: '- (Optional) External IP address to forward to or External IP address to map to VM.'
            external_port: '- (Optional) External port to forward. -1 value for any port.'
            forward_to_port: '- (Optional) Internal port to forward. -1 value for any port.'
            mapping_mode: '- (Optional) Mapping mode. One of: automatic, manual.'
            nat_type: '- (Required) "One of: ipTranslation (use IP translation), portForwarding (use port forwarding). For ipTranslation fields vm_id, vm_nic_id, mapping_mode are required and external_ip is optional. For portForwarding fields vm_id, vm_nic_id, protocol, external_port and forward_to_port are required.'
            network_id: '- (Required) The identifier of vApp network.'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.'
            protocol: '- (Optional) Protocol to forward. One of: TCP (forward TCP packets), UDP (forward UDP packets), TCP_UDP (forward TCP and UDP packets).'
            rule: '- (Optional) Configures a NAT rule; see Rules below for details.'
            vapp_id: '- (Required) The identifier of vApp.'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level.'
            vm_id: '- (Required) VM to which this rule applies.'
            vm_nic_id: '- (Required) VM NIC ID to which this rule applies.'
        importStatements:
            - "$ terraform import vcd_vapp_nat_rules.imported list@org-name.vdc-name.vapp-name\nvcd_vapp_nat_rules.imported: Importing from ID \"list@org-name.vdc-name.vapp-name\"...\nRetrieving all vApp networks by name\nNo\tvApp ID                                                 ID                                      Name\t\n--\t-------                                                 --                                      ----\t\n1\turn:vcloud:vapp:77755b9c-5ec9-41f7-aceb-4cf158786482\t0027c6ae-7d59-457e-b33e-a89e97f0bdc1\tNet2\n2\turn:vcloud:vapp:77755b9c-5ec9-41f7-aceb-4cf158786482\t36986073-8051-4f6d-a1c6-bda648bdf6ba\tNet1      \t\t\n\nError: resource id must be specified in one of these formats:\n'org-name.vdc-name.vapp-name.network_name', 'org.vdc-name.vapp-id.network-id' or \n'list@org-name.vdc-name.vapp-name' to get a list of vapp networks with their IDs"
            - $ terraform import vcd_vapp_nat_rules.imported org-name.vdc-name.urn:vcloud:vapp:77755b9c-5ec9-41f7-aceb-4cf158786482.0027c6ae-7d59-457e-b33e-a89e97f0bdc1
    vcd_vapp_network:
        subCategory: ""
        description: Allows to provision a vApp network and optionally connect it to an existing Org VDC network.
        name: vcd_vapp_network
        title: vcd_vapp_network
        examples:
            - name: vappNet
              manifest: |-
                {
                  "dhcp_pool": [
                    {
                      "end_address": "192.168.2.50",
                      "start_address": "192.168.2.2"
                    }
                  ],
                  "dns1": "192.168.2.1",
                  "dns2": "192.168.2.2",
                  "dns_suffix": "mybiz.biz",
                  "gateway": "192.168.2.1",
                  "guest_vlan_allowed": true,
                  "name": "my-net",
                  "org": "my-org",
                  "prefix_length": "24",
                  "static_ip_pool": [
                    {
                      "end_address": "192.168.2.100",
                      "start_address": "192.168.2.51"
                    }
                  ],
                  "vapp_name": "my-vapp",
                  "vdc": "my-vdc"
                }
            - name: vappNet_ipv6
              manifest: |-
                {
                  "dhcp_pool": [
                    {
                      "end_address": "fe80:0:0:0:0:0:0:aabb",
                      "start_address": "fe80:0:0:0:0:0:0:aaaa"
                    }
                  ],
                  "dns1": "2001:4860:4860:0:0:0:0:8888",
                  "dns2": "2001:4860:4860:0:0:0:0:8844",
                  "dns_suffix": "mybiz.biz",
                  "gateway": "fe80:0:0:0:0:0:0:aaaa",
                  "guest_vlan_allowed": true,
                  "name": "my-net-ipv6",
                  "org": "my-org",
                  "prefix_length": "24",
                  "static_ip_pool": [
                    {
                      "end_address": "fe80:0:0:0:0:0:0:aadd",
                      "start_address": "fe80:0:0:0:0:0:0:aacc"
                    }
                  ],
                  "vapp_name": "my-vapp",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            default_lease_time: '- (Optional) The default DHCP lease time to use. Defaults to 3600.'
            description: '- (Optional; v2.7+, vCD 9.5+) Description of vApp network'
            dhcp_pool: '- (Optional) A range of IPs to issue to virtual machines that don''t have a static IP; see IP Pools below for details.'
            dns_suffix: '- (Optional) A FQDN for the virtual machines on this network.'
            dns1: '- (Optional) First DNS server to use.'
            dns2: '- (Optional) Second DNS server to use.'
            enabled: '- (Optional) Allows to enable or disable service. Default is true.'
            end_address: '- (Required) The final address in the IP Range.'
            gateway: '- (Required) The gateway for this network.'
            guest_vlan_allowed: '- (Optional) True if Network allows guest VLAN tagging.'
            max_lease_time: '- (Optional) The maximum DHCP lease time to use. Defaults to 7200.'
            name: '- (Required) A unique name for the network.'
            netmask: '- (Deprecated) Use prefix_length instead. The netmask for the new network.'
            org: |-
                - (Optional; v2.0+) The name of organization to use, optional if defined at provider level. Useful when
                connected as sysadmin working across different organisations.
            org_network_name: '- (Optional; v2.7+) An Org network name to which vApp network is connected. If not configured, then an isolated network is created.'
            prefix_length: '- (Optional) The subnet prefix length for the network.'
            reboot_vapp_on_removal: |-
                - (Optional; v3.9+) VCD 10.4.1+ API prohibits removal of vApp
                network from a powered on vApp. Set to true to power off the vApp during vApp network removal.
                If the vApp's original state was powered on, it will be powered back on after removing the
                network. (default false) Note. It only affects delete operation for the resource and will
                never power cycle vApp during update operations. Changing this value will cause plan change, but
                update will be a no-op operation.
            retain_ip_mac_enabled: '- (Optional; v2.7+) Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.'
            start_address: '- (Required) The first address in the IP Range.'
            static_ip_pool: '- (Optional) A range of IPs permitted to be used as static IPs for virtual machines; see IP Pools below for details.'
            vapp_name: '- (Required) The vApp this network belongs to.'
            vdc: '- (Optional; v2.0+) The name of VDC to use, optional if defined at provider level.'
        importStatements: []
    vcd_vapp_org_network:
        subCategory: ""
        description: Provides capability to attach an existing Org VDC Network to a vApp and toggle network features.
        name: vcd_vapp_org_network
        title: vcd_vapp_org_network
        examples:
            - name: vappOrgNet
              manifest: |-
                {
                  "org": "my-org",
                  "org_network_name": "my-org-network",
                  "vapp_name": "my-vapp",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            is_fenced: (Optional) Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are accessed in this vApp. Default is false.
            org: |-
                - (Optional) The name of organization to use, optional if defined at provider level. Useful when
                connected as sysadmin working across different organisations.
            org_network_name: '- (Optional; v2.7+) An Org network name to which vApp network is connected. If not configured, then an isolated network is created.'
            reboot_vapp_on_removal: |-
                - (Optional; v3.9+) VCD 10.4.1+ API prohibits removal of vApp
                network from a powered on vApp. Set to true to power off the vApp during vApp network removal.
                If the vApp's original state was powered on, it will be powered back on after removing the
                network. (default false) Note. It only affects delete operation for the resource and will
                never power cycle vApp during update operations. Changing this value will cause plan change, but
                update will be a no-op operation.
            retain_ip_mac_enabled: '- (Optional) Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Configurable when is_fenced is true.'
            vapp_name: '- (Required) The vApp this network belongs to.'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level.'
        importStatements: []
    vcd_vapp_static_routing:
        subCategory: ""
        description: Provides a VMware Cloud Director vApp static routing resource. This can be used to create, modify, and delete static routing rules.
        name: vcd_vapp_static_routing
        title: vcd_vapp_static_routing
        examples:
            - name: vapp1-static-routing
              manifest: |-
                {
                  "enabled": true,
                  "network_id": "${vcd_vapp_network.vapp-net.id}",
                  "rule": [
                    {
                      "name": "rule1",
                      "network_cidr": "10.10.0.0/24",
                      "next_hop_ip": "192.168.2.2"
                    },
                    {
                      "name": "rule2",
                      "network_cidr": "10.10.1.0/24",
                      "next_hop_ip": "192.168.2.3"
                    }
                  ],
                  "vapp_id": "${vcd_vapp.web.id}"
                }
              references:
                network_id: vcd_vapp_network.vapp-net.id
                vapp_id: vcd_vapp.web.id
              dependencies:
                vcd_vapp.web: |-
                    {
                      "name": "web"
                    }
                vcd_vapp_network.vapp-net: |-
                    {
                      "dns1": "192.168.2.1",
                      "gateway": "192.168.2.1",
                      "name": "my-vapp-net",
                      "netmask": "255.255.255.0",
                      "org_network_name": "my-vdc-int-net",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.2.100",
                          "start_address": "192.168.2.51"
                        }
                      ],
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
        argumentDocs:
            enabled: '- (Optional) Enable or disable static Routing. Default is true.'
            name: '- (Required) Name for the static route.'
            network_cidr: '- (Required) Network specification in CIDR.'
            network_id: '- (Required) The identifier of vApp network.'
            next_hop_ip: '- (Required) IP address of Next Hop router/gateway.'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.'
            rule: '- (Optional) Configures a static routing rule; see Rules below for details.'
            vapp_id: '- (Required) The identifier of vApp.'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level.'
        importStatements:
            - "$ terraform import vcd_vapp_static_routing.imported list@org-name.vdc-name.vapp-name\nvcd_vapp_static_routing.imported: Importing from ID \"list@org-name.vdc-name.vapp-name\"...\nRetrieving all vApp networks by name\nNo\tvApp ID                                                 ID                                      Name\t\n--\t-------                                                 --                                      ----\t\n1\turn:vcloud:vapp:77755b9c-5ec9-41f7-aceb-4cf158786482\t0027c6ae-7d59-457e-b33e-a89e97f0bdc1\tNet2\n2\turn:vcloud:vapp:77755b9c-5ec9-41f7-aceb-4cf158786482\t36986073-8051-4f6d-a1c6-bda648bdf6ba\tNet1      \t\t\n\nError: resource id must be specified in one of these formats:\n'org-name.vdc-name.vapp-name.network_name', 'org.vdc-name.vapp-id.network-id' or \n'list@org-name.vdc-name.vapp-name' to get a list of vapp networks with their IDs"
            - $ terraform import vcd_vapp_static_routing.imported org-name.vdc-name.urn:vcloud:vapp:77755b9c-5ec9-41f7-aceb-4cf158786482.0027c6ae-7d59-457e-b33e-a89e97f0bdc1
    vcd_vapp_vm:
        subCategory: ""
        description: Provides a VMware Cloud Director VM resource. This can be used to create, modify, and delete VMs within a vApp.
        name: vcd_vapp_vm
        title: vcd_vapp_vm
        examples:
            - name: web1
              manifest: |-
                {
                  "cpu_cores": 1,
                  "cpus": 2,
                  "guest_properties": {
                    "another.var.name": "var-value",
                    "guest.hostname": "my-host"
                  },
                  "memory": 1024,
                  "metadata_entry": [
                    {
                      "key": "role",
                      "value": "web"
                    },
                    {
                      "key": "env",
                      "value": "staging"
                    },
                    {
                      "key": "version",
                      "value": "v1"
                    },
                    {
                      "key": "my_key",
                      "value": "my value"
                    }
                  ],
                  "name": "web1",
                  "network": [
                    {
                      "ip_allocation_mode": "POOL",
                      "is_primary": true,
                      "name": "${vcd_vapp_org_network.direct-net.org_network_name}",
                      "type": "org"
                    }
                  ],
                  "vapp_name": "${vcd_vapp.web.name}",
                  "vapp_template_id": "${data.vcd_catalog_vapp_template.photon-os.id}"
                }
              references:
                network.name: vcd_vapp_org_network.direct-net.org_network_name
                vapp_name: vcd_vapp.web.name
                vapp_template_id: data.vcd_catalog_vapp_template.photon-os.id
              dependencies:
                vcd_independent_disk.disk1: |-
                    {
                      "bus_sub_type": "VirtualSCSI",
                      "bus_type": "SCSI",
                      "name": "logDisk",
                      "size": "512"
                    }
                vcd_network_direct.direct-external: |-
                    {
                      "external_network": "my-ext-net",
                      "name": "net"
                    }
                vcd_vapp.web: |-
                    {
                      "name": "web"
                    }
                vcd_vapp_network.vapp-net: |-
                    {
                      "dns1": "192.168.2.1",
                      "dns2": "192.168.2.2",
                      "dns_suffix": "mybiz.biz",
                      "gateway": "192.168.2.1",
                      "guest_vlan_allowed": true,
                      "name": "my-vapp-net",
                      "netmask": "255.255.255.0",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.2.100",
                          "start_address": "192.168.2.51"
                        }
                      ],
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
                vcd_vapp_org_network.direct-net: |-
                    {
                      "org_network_name": "${vcd_network_direct.direct-external.name}",
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
                vcd_vapp_org_network.routed-net: |-
                    {
                      "org_network_name": "my-vdc-int-net",
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
            - name: web2
              manifest: |-
                {
                  "cpus": 1,
                  "disk": [
                    {
                      "bus_number": 1,
                      "name": "${vcd_independent_disk.disk1.name}",
                      "unit_number": 0
                    }
                  ],
                  "guest_properties": {
                    "guest.hostname": "my-hostname",
                    "guest.other": "another-setting"
                  },
                  "memory": 1024,
                  "metadata_entry": [
                    {
                      "key": "role",
                      "value": "web"
                    },
                    {
                      "key": "env",
                      "value": "staging"
                    },
                    {
                      "key": "env",
                      "value": "staging"
                    },
                    {
                      "key": "version",
                      "value": "v1"
                    },
                    {
                      "key": "my_key",
                      "value": "my value"
                    }
                  ],
                  "name": "web2",
                  "network": [
                    {
                      "ip_allocation_mode": "POOL",
                      "is_primary": true,
                      "name": "${vcd_vapp_org_network.routed-net.org_network_name}",
                      "type": "org"
                    },
                    {
                      "ip_allocation_mode": "POOL",
                      "name": "${vcd_vapp_network.vapp-net.name}",
                      "type": "vapp"
                    },
                    {
                      "connected": false,
                      "ip_allocation_mode": "NONE",
                      "type": "none"
                    }
                  ],
                  "vapp_name": "${vcd_vapp.web.name}",
                  "vapp_template_id": "${data.vcd_catalog_vapp_template.photon-os.id}"
                }
              references:
                disk.name: vcd_independent_disk.disk1.name
                network.name: vcd_vapp_network.vapp-net.name
                vapp_name: vcd_vapp.web.name
                vapp_template_id: data.vcd_catalog_vapp_template.photon-os.id
              dependencies:
                vcd_independent_disk.disk1: |-
                    {
                      "bus_sub_type": "VirtualSCSI",
                      "bus_type": "SCSI",
                      "name": "logDisk",
                      "size": "512"
                    }
                vcd_network_direct.direct-external: |-
                    {
                      "external_network": "my-ext-net",
                      "name": "net"
                    }
                vcd_vapp.web: |-
                    {
                      "name": "web"
                    }
                vcd_vapp_network.vapp-net: |-
                    {
                      "dns1": "192.168.2.1",
                      "dns2": "192.168.2.2",
                      "dns_suffix": "mybiz.biz",
                      "gateway": "192.168.2.1",
                      "guest_vlan_allowed": true,
                      "name": "my-vapp-net",
                      "netmask": "255.255.255.0",
                      "static_ip_pool": [
                        {
                          "end_address": "192.168.2.100",
                          "start_address": "192.168.2.51"
                        }
                      ],
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
                vcd_vapp_org_network.direct-net: |-
                    {
                      "org_network_name": "${vcd_network_direct.direct-external.name}",
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
                vcd_vapp_org_network.routed-net: |-
                    {
                      "org_network_name": "my-vdc-int-net",
                      "vapp_name": "${vcd_vapp.web.name}"
                    }
            - name: internalDiskOverride
              manifest: |-
                {
                  "cpu_cores": 1,
                  "cpus": 2,
                  "memory": 2048,
                  "name": "internalDiskOverride",
                  "override_template_disk": [
                    {
                      "bus_number": 0,
                      "bus_type": "paravirtual",
                      "iops": 0,
                      "size_in_mb": "22384",
                      "storage_profile": "*",
                      "unit_number": 0
                    }
                  ],
                  "vapp_name": "${vcd_vapp.web.name}",
                  "vapp_template_id": "${data.vcd_catalog_vapp_template.lampstack.id}"
                }
              references:
                vapp_name: vcd_vapp.web.name
                vapp_template_id: data.vcd_catalog_vapp_template.lampstack.id
            - name: TestAccVcdVAppVmDhcpWaitVM
              manifest: |-
                {
                  "computer_name": "dhcp-vm",
                  "cpu_cores": 1,
                  "cpus": 2,
                  "memory": 512,
                  "name": "brr",
                  "network": [
                    {
                      "ip_allocation_mode": "DHCP",
                      "is_primary": true,
                      "name": "${vcd_network_routed.net.name}",
                      "type": "org"
                    }
                  ],
                  "network_dhcp_wait_seconds": 300,
                  "vapp_name": "${vcd_vapp.TestAccVcdVAppVmDhcpWait.name}",
                  "vapp_template_id": "${data.vcd_catalog_vapp_template.photon-rev2.id}"
                }
              references:
                network.name: vcd_network_routed.net.name
                vapp_name: vcd_vapp.TestAccVcdVAppVmDhcpWait.name
                vapp_template_id: data.vcd_catalog_vapp_template.photon-rev2.id
              dependencies:
                vcd_nsxv_ip_set.test-ipset: |-
                    {
                      "ip_addresses": [
                        "${vcd_vapp_vm.TestAccVcdVAppVmDhcpWaitVM.network.0.ip}"
                      ],
                      "name": "ipset-with-dhcp-ip"
                    }
            - name: emptyVM
              manifest: |-
                {
                  "boot_image_id": "${data.vcd_catalog_media.myMedia.id}",
                  "computer_name": "emptyVM",
                  "cpu_cores": 1,
                  "cpus": 2,
                  "hardware_version": "vmx-14",
                  "memory": 2048,
                  "name": "VmWithoutTemplate",
                  "os_type": "sles10_64Guest",
                  "vapp_name": "${vcd_vapp.web.name}"
                }
              references:
                boot_image_id: data.vcd_catalog_media.myMedia.id
                vapp_name: vcd_vapp.web.name
            - name: secondVM
              manifest: |-
                {
                  "computer_name": "db-vm",
                  "cpu_cores": 1,
                  "cpus": 2,
                  "memory": 512,
                  "name": "secondVM",
                  "vapp_name": "${vcd_vapp.web.name}",
                  "vapp_template_id": "${data.vcd_catalog_vapp_template.vappWithMultiVm.id}",
                  "vm_name_in_template": "secondVM"
                }
              references:
                vapp_name: vcd_vapp.web.name
                vapp_template_id: data.vcd_catalog_vapp_template.vappWithMultiVm.id
            - name: secondVM
              manifest: |-
                {
                  "computer_name": "db-vm",
                  "name": "secondVM",
                  "sizing_policy_id": "${data.vcd_vm_sizing_policy.minSize.id}",
                  "vapp_name": "${vcd_vapp.web.name}",
                  "vapp_template_id": "${data.vcd_catalog_vapp_template.vappWithMultiVm.id}"
                }
              references:
                sizing_policy_id: data.vcd_vm_sizing_policy.minSize.id
                vapp_name: vcd_vapp.web.name
                vapp_template_id: data.vcd_catalog_vapp_template.vappWithMultiVm.id
            - name: secondVM
              manifest: |-
                {
                  "computer_name": "db-vm",
                  "name": "secondVM",
                  "placement_policy_id": "${data.vcd_vm_placement_policy.placementPolicy.id}",
                  "sizing_policy_id": "${data.vcd_vm_sizing_policy.minSize.id}",
                  "vapp_name": "${vcd_vapp.web.name}",
                  "vapp_template_id": "${data.vcd_catalog_vapp_template.vappWithMultiVm.id}"
                }
              references:
                placement_policy_id: data.vcd_vm_placement_policy.placementPolicy.id
                sizing_policy_id: data.vcd_vm_sizing_policy.minSize.id
                vapp_name: vcd_vapp.web.name
                vapp_template_id: data.vcd_catalog_vapp_template.vappWithMultiVm.id
            - name: secondVM
              manifest: |-
                {
                  "catalog_name": "cat-where-is-template",
                  "computer_name": "db-vm",
                  "name": "secondVM",
                  "placement_policy_id": "${data.vcd_vm_placement_policy.placementPolicy.id}",
                  "sizing_policy_id": "${data.vcd_vm_sizing_policy.minSize.id}",
                  "template_name": "vappWithMultiVm",
                  "vapp_name": "${vcd_vapp.web.name}"
                }
              references:
                placement_policy_id: data.vcd_vm_placement_policy.placementPolicy.id
                sizing_policy_id: data.vcd_vm_sizing_policy.minSize.id
                vapp_name: vcd_vapp.web.name
            - name: advancedVM
              manifest: |-
                {
                  "boot_image_id": "${data.vcd_catalog_media.myMedia.id}",
                  "computer_name": "advancedVM",
                  "cpu_cores": 1,
                  "cpu_limit": "1000",
                  "cpu_priority": "CUSTOM",
                  "cpu_reservation": "200",
                  "cpu_shares": "512",
                  "cpus": 2,
                  "hardware_version": "vmx-14",
                  "memory": 2048,
                  "memory_limit": "48",
                  "memory_priority": "CUSTOM",
                  "memory_reservation": "8",
                  "memory_shares": "480",
                  "name": "advancedVM",
                  "os_type": "sles10_64Guest",
                  "vapp_name": "${vcd_vapp.web.name}"
                }
              references:
                boot_image_id: data.vcd_catalog_media.myMedia.id
                vapp_name: vcd_vapp.web.name
            - name: web2
              manifest: |-
                {
                  "cpus": 1,
                  "memory": 2048,
                  "name": "web2",
                  "network": [
                    {
                      "ip": "10.10.104.162",
                      "ip_allocation_mode": "MANUAL",
                      "name": "net",
                      "type": "org"
                    }
                  ],
                  "vapp_name": "${vcd_vapp.web.name}",
                  "vapp_template_id": "${data.vcd_catalog_vapp_template.windows.id}"
                }
              references:
                vapp_name: vcd_vapp.web.name
                vapp_template_id: data.vcd_catalog_vapp_template.windows.id
            - name: web2
              manifest: |-
                {
                  "customization": [
                    {
                      "admin_password": "my-secure-password",
                      "allow_local_admin_password": true,
                      "auto_generate_password": false,
                      "change_sid": true,
                      "force": true
                    }
                  ],
                  "network": [
                    {
                      "ip_allocation_mode": "DHCP",
                      "name": "net",
                      "type": "org"
                    }
                  ]
                }
            - name: web2
              manifest: |-
                {
                  "customization": [
                    {
                      "admin_password": "my-secure-password",
                      "allow_local_admin_password": true,
                      "auto_generate_password": false,
                      "change_sid": true,
                      "force": false
                    }
                  ],
                  "network": [
                    {
                      "ip_allocation_mode": "DHCP",
                      "name": "net",
                      "type": "org"
                    }
                  ]
                }
            - name: example
              manifest: |-
                {
                  "metadata_entry": [
                    {
                      "is_system": true,
                      "key": "foo",
                      "type": "MetadataStringValue",
                      "user_access": "PRIVATE",
                      "value": "bar"
                    },
                    {
                      "is_system": false,
                      "key": "myBool",
                      "type": "MetadataBooleanValue",
                      "user_access": "READWRITE",
                      "value": "true"
                    }
                  ]
                }
            - name: tf-vm
              manifest: |-
                {
                  "name": "my-vm",
                  "org": "my-org",
                  "vapp_name": "my-vapp",
                  "vdc": "my-vdc"
                }
        argumentDocs:
            DHCP: |-
                - IP address is obtained from a DHCP service. Field ip is not guaranteed to be populated. Because of this it may appear
                after multiple terraform refresh operations.  Note.
                network_dhcp_wait_seconds parameter can help to ensure IP is
                reported on first run.
            MANUAL: '- IP address is assigned manually in the ip field. Must be valid IP address from static pool.'
            NONE: '- No IP address will be set because VM will have a NIC without network.'
            POOL: '- Static IP address is allocated automatically from defined static pool in network.'
            SRIOVETHERNETCARD: |-
                must be connected to a direct vApp
                network connected to a direct VDC network. Unless such an SR-IOV-capable external network is
                available in your VDC, you cannot connect an SR-IOV device.
            accept_all_eulas: '- (Optional; v2.0+) Automatically accept EULA if OVA has it. Default is true'
            adapter_type: |-
                - (Optional, Computed) Adapter type (names are case insensitive). Some known adapter types - VMXNET3,
                E1000, E1000E, SRIOVETHERNETCARD, VMXNET2, PCNet32.
            admin_password: (Optional; v2.7+) Manually specify Administrator password.
            allow_local_admin_password: (Optional; v2.7+) Allow local administrator password.
            apply: |-
                operation because vCD does not
                support changing adapter type for existing resource.
            auto_generate_password: (Optional; v2.7+) Auto generate password.
            boot_image: '- (Deprecated; v2.9+) Use boot_image_id instead. Media name to mount as boot image. Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use vcd_inserted_media.'
            boot_image_id: |-
                - (Optional; v3.8+) Media URN to mount as boot image. You can fetch it using a vcd_catalog_media data source.
                Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use vcd_inserted_media.
            bus_number: '- (Required) Bus number on which to place the disk controller'
            bus_type: |-
                - (Required) The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI),
                sas(LSI Logic SAS (SCSI)), paravirtual(Paravirtual (SCSI)), sata, nvme. Note nvme requires v3.5.0+ and
                VCD 10.2.1+
            catalog_name: '- (Deprecated; v2.9+) Use a vcd_catalog data source along with vapp_template_id or boot_image_id instead. The catalog name in which to find the given vApp Template or media for boot_image.'
            change_sid: (Optional; v2.7+) Allows to change SID (security identifier). Only applicable for Windows operating systems.
            computer_name: '- (Optional; v2.5+) Computer name to assign to this virtual machine.'
            connected: '- (Optional; v3.0+) It defines if NIC is connected or not. Network with ip_allocation_mode=NONE can''t be connected by default, please use connected=false in such case.'
            cpu_cores: '- (Optional; v2.1+) The number of cores per socket.'
            cpu_hot_add_enabled: '- (Optional; v3.0+) True if the virtual machine supports addition of virtual CPUs while powered on. Default is false.'
            cpu_limit: '- The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. -1 value for unlimited.'
            cpu_priority: '- Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload'
            cpu_reservation: '- The amount of MHz reservation on the underlying virtualization infrastructure.'
            cpu_shares: '- Custom priority for the resource in MHz. This is a read-only, unless the cpu_priority is "CUSTOM"'
            cpus: '- (Optional) The number of virtual CPUs to allocate to the VM. Socket count is a result of: virtual logical processors/cores per socket. If cpu_hot_add_enabled is true, then cpus will be increased without VM power off.'
            customization: '- (Optional; v2.5+) A block to define for guest customization options. See Customization'
            description: |-
                - (Optional; v2.9+) The VM description. Note: for VM from Template description is read only. Currently, this field has
                the description of the OVA used to create the VM.
            disk: '- (Optional; v2.1+) Independent disk attachment configuration. See Disk below for details.'
            disk.size_in_mb: '- (v2.7+) Independent disk size in MB.'
            disk_id: '- (v2.7+) Specifies a unique identifier for this disk in the scope of the corresponding VM.'
            enabled: |-
                (Optional; v2.7+) true will enable guest customization which may occur on first boot or if the force flag is used.
                This option should be selected for Power on and Force re-customization to work.
            expose_hardware_virtualization: |-
                - (Optional; v2.2+) Boolean for exposing full CPU virtualization to the
                guest operating system so that applications that require hardware virtualization can run on virtual machines without binary
                translation or paravirtualization. Useful for hypervisor nesting provided underlying hardware supports it. Default is false.
            force: |-
                (Optional) Warning. true value will cause the VM to reboot on every apply operation.
                This field works as a flag and triggers force customization when true during an update
                (terraform apply) every time. It never complains about a change in statefile. Can be used when guest customization
                is needed after VM configuration (e.g. NIC change, customization options change, etc.) and then set back to false.
                Note. It will not have effect when power_on field is set to false. See example workflow below.
            freebsd12_64Guest: |-
                (FreeBSD 12 or later versions (64-bit)), freebsd12Guest (FreeBSD 12 or later versions (32-bit)),
                freebsd11_64Guest (FreeBSD 11 (64-bit)), freebsd11Guest (FreeBSD 11 (32-bit)), darwin18_64Guest (Apple macOS 10.14 (64-bit)),
                darwin17_64Guest (Apple macOS 10.13 (64-bit)), darwin16_64Guest (Apple macOS 10.12 (64-bit)), darwin15_64Guest (Apple Mac OS X 10.11 (64-bit)),
                darwin14_64Guest (Apple Mac OS X 10.10 (64-bit)), darwin13_64Guest (Apple Mac OS X 10.9 (64-bit)),
                darwin12_64Guest (Apple Mac OS X 10.8 (64-bit)), eComStation2Guest (Serenity Systems eComStation 2), openServer6Guest (SCO OpenServer 6),
                solaris11_64Guest (Oracle Solaris 11 (64-bit)), darwin11_64Guest (Apple Mac OS X 10.7 (64-bit)),
                darwin11Guest (Apple Mac OS X 10.7 (32-bit)), eComStationGuest (Serenity Systems eComStation 1), unixWare7Guest (SCO UnixWare 7),
                openServer5Guest (SCO OpenServer 5), os2Guest (IBM OS/2), freebsd64Guest (FreeBSD Pre-11 versions (64-bit)),
                freebsdGuest (FreeBSD Pre-11 versions (32-bit)), darwin10_64Guest (Apple Mac OS X 10.6 (64-bit)),
                darwin10Guest (Apple Mac OS X 10.6 (32-bit)), otherGuest64 (Other (64-bit)), otherGuest (Other (32-bit)),
                solaris10_64Guest (Oracle Solaris 10 (64-bit)), solaris10Guest (Oracle Solaris 10 (32-bit)), netware6Guest (Novell NetWare 6.x),
                netware5Guest (Novell NetWare 5.1)
            guest_properties: '- (Optional; v2.5+) Key value map of guest properties'
            hardware_version: '- (Optional; v2.9+) Virtual Hardware Version (e.g.vmx-14, vmx-13, vmx-12, etc.). Required when creating empty VM.'
            initscript: (Optional; v2.7+) Provide initscript to be executed when customization is applied.
            internal_disk: '- (v2.7+) A block providing internal disk of VM details. See Internal Disk below for details.'
            iops: '- (Optional) Specifies the IOPS for the disk. Default is 0.'
            ip: '(Optional, Computed) Settings depend on ip_allocation_mode. Field requirements for each ip_allocation_mode are listed below:'
            ip_allocation_mode: '(Required) IP address allocation mode. One of POOL, DHCP, MANUAL, NONE:'
            ip_allocation_mode=DHCP: |-
                - ip value must be omitted or empty string "". Field ip is not
                guaranteed to be populated after run due to the VM lacking VMware tools or not working properly
                with DHCP. Because of this ip may also appear after multiple terraform refresh operations
                when is reported back to vCD. Note.
                network_dhcp_wait_seconds parameter can help to ensure IP is
                reported on first run.
            ip_allocation_mode=MANUAL: '- ip value must be valid IP address from a subnet defined in static pool for network.'
            ip_allocation_mode=NONE: '- ip field can be omitted or set to an empty string "". Empty string may be useful when doing HCL variable interpolation.'
            ip_allocation_mode=POOL: |-
                - ip value must be omitted or empty string "". Empty string may be useful when doing HCL
                variable interpolation. Field ip will be populated with an assigned IP from static pool after run.
            is_primary: (Optional) Set to true if network interface should be primary. First network card in the list will be primary by default.
            is_system: '- (Required) Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL.'
            join_domain: (Optional; v2.7+) Enable this VM to join a domain.
            join_domain_account_ou: (Optional; v2.7+) Organizational unit to be used for domain join.
            join_domain_name: (Optional; v2.7+) Set the domain name to override organization's domain name.
            join_domain_password: (Optional; v2.7+) Password to be used for domain join.
            join_domain_user: (Optional; v2.7+) User to be used for domain join.
            join_org_domain: (Optional; v2.7+) Set to true to use organization's domain.
            key: '- (Required) Key of this metadata entry.'
            mac: '- (Computed) Mac address of network interface.'
            memory: '- (Optional) The amount of RAM (in MB) to allocate to the VM. If memory_hot_add_enabled is true, then memory will be increased without VM power off'
            memory_hot_add_enabled: '- (Optional; v3.0+) True if the virtual machine supports addition of memory while powered on. Default is false.'
            memory_limit: '- The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. -1 value for unlimited.'
            memory_priority: '- Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload'
            memory_reservation: '- The amount of RAM (in MB) reservation on the underlying virtualization infrastructure'
            memory_shares: '- Custom priority for the resource in MB. This is a read-only, unless the memory_priority is "CUSTOM"'
            metadata: '- (Deprecated; v2.2+) Use metadata_entry instead. Key value map of metadata to assign to this VM'
            metadata_entry: '- (Optional; v3.8+) A set of metadata entries to assign. See Metadata section for details.'
            must_change_password_on_first_login: (Optional; v2.7+) Require Administrator to change password on first login.
            name: '- (Required) A name for the VM, unique within the vApp'
            network: |-
                - (Optional; v2.2+) A block to define network interface. Multiple can be used. See Network and
                example for usage details.
            network_dhcp_wait_seconds: |-
                - (Optional; v2.7+) Optional number of seconds to try and wait for DHCP IP (only valid
                for adapters in network block with ip_allocation_mode=DHCP). It constantly checks if IP is present so the time given
                is a maximum. VM must be powered on and at least one of the following must be true:
            number_of_auto_logons: (Optional; v2.7+) Number of times to log on automatically. 0 means disabled.
            org: '- (Optional; v2.0+) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            os_type: '- (Optional; v2.9+) Operating System type. Possible values can be found in Os Types. Required when creating empty VM.'
            override_template_disk: '- (Optional; v2.7+) Allows to update internal disk in template before first VM boot. Disk is matched by bus_type, bus_number and unit_number. See Override template Disk below for details.'
            placement_policy_id: |-
                (Optional; v3.8+) VM placement policy ID. To be used, it needs to be assigned to Org VDC
                using vcd_org_vdc.vm_placement_policy_ids (and optionally vcd_org_vdc.default_compute_policy_id to make it default).
                In this case, if the placement policy is not set, it will pick the VDC default on creation. It must be set explicitly
                if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to "" to be removed.
            power_on: '- (Optional) A boolean value stating if this VM should be powered on. Default is true'
            power_on=false: can be used to power off the VM before removing NICs.
            prevent_update_power_off: '- (Optional; v3.0+) True if the update of resource should fail when virtual machine power off needed. Default is false.'
            security_tags: |-
                - (Optional; v3.9+) Set of security tags to be managed by the vcd_vapp_vm resource.
                To remove security_tags you must set security_tags = [] and do not remove the attribute. Removing the attribute will cause the tags to remain unchanged and just stop being managed by this resource.
                This is to be consistent with existing security tags that were created by the vcd_security_tags resource.
            size_in_mb: '- (Required) The size of the disk in MB.'
            sizing_policy_id: |-
                (Optional; v3.0+, vCD 10.0+) VM sizing policy ID. To be used, it needs to be assigned to Org VDC
                using vcd_org_vdc.vm_sizing_policy_ids (and vcd_org_vdc.default_compute_policy_id to make it default).
                In this case, if the sizing policy is not set, it will pick the VDC default on creation. It must be set explicitly
                if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to "" to be removed.
            sles15_64Guest: |-
                (SUSE Linux Enterprise 15 (64-bit)), rhel8_64Guest (Red Hat Enterprise Linux 8 (64-bit)),
                other4xLinux64Guest (Other 4.x or later Linux (64-bit)), other4xLinuxGuest (Other 4.x or later Linux (32-bit)),
                oracleLinux8_64Guest (Oracle Linux 8 (64-bit)), centos8_64Guest (CentOS 8 (64-bit)), asianux8_64Guest (Asianux 8 (64-bit)),
                amazonlinux2_64Guest (Amazon Linux 2 (64-bit)), vmwarePhoton64Guest (VMware Photon OS (64-bit)),
                oracleLinux7_64Guest (Oracle Linux 7 (64-bit)), oracleLinux6_64Guest (Oracle Linux 6 (64-bit)),
                oracleLinux6Guest (Oracle Linux 6 (32-bit)), debian9_64Guest (Debian GNU/Linux 9 (64-bit)),
                debian9Guest (Debian GNU/Linux 9 (32-bit)), debian10_64Guest (Debian GNU/Linux 10 (64-bit)),
                debian10Guest (Debian GNU/Linux 10 (32-bit)), centos7_64Guest (CentOS 7 (64-bit)), centos6_64Guest (CentOS 6 (64-bit)),
                centos6Guest (CentOS 6 (32-bit)), asianux7_64Guest (Asianux 7 (64-bit)), debian8_64Guest (Debian GNU/Linux 8 (64-bit)),
                debian8Guest (Debian GNU/Linux 8 (32-bit)), coreos64Guest (CoreOS Linux (64-bit)), other3xLinux64Guest (Other 3.x Linux (64-bit)),
                other3xLinuxGuest (Other 3.x Linux (32-bit)), debian7_64Guest (Debian GNU/Linux 7 (64-bit)),
                debian7Guest (Debian GNU/Linux 7 (32-bit)), sles12_64Guest (SUSE Linux Enterprise 12 (64-bit)),
                rhel7_64Guest (Red Hat Enterprise Linux 7 (64-bit)), asianux4_64Guest (Asianux 4 (64-bit)), asianux4Guest (Asianux 4 (32-bit)),
                rhel6_64Guest (Red Hat Enterprise Linux 6 (64-bit)), rhel6Guest (Red Hat Enterprise Linux 6 (32-bit)),
                other26xLinux64Guest (Other 2.6.x Linux,  (64-bit)), other26xLinuxGuest (Other 2.6.x Linux (32-bit)),
                other24xLinux64Guest (Other 2.4.x Linux (64-bit)), other24xLinuxGuest (Other 2.4.x Linux (32-bit)),
                oracleLinux64Guest (Oracle Linux 4/5 or later (64-bit)), oracleLinuxGuest (Oracle Linux 4/5 or later (32-bit)),
                debian6_64Guest (Debian GNU/Linux 6 (64-bit)), debian6Guest (Debian GNU/Linux 6 (32-bit)),
                debian5_64Guest (Debian GNU/Linux 5 (64-bit)), debian5Guest (Debian GNU/Linux 5 (32-bit)),
                debian4_64Guest (Debian GNU/Linux 4 (64-bit)), debian4Guest (Debian GNU/Linux 4 (32-bit)),
                centos64Guest (CentOS 4/5 or later (64-bit)), centosGuest (CentOS 4/5 or later (32-bit)), asianux3_64Guest (Asianux 3 (64-bit)),
                asianux3Guest (Asianux 3 (32-bit)), ubuntu64Guest (Ubuntu Linux (64-bit)), ubuntuGuest (Ubuntu Linux (32-bit)),
                sles64Guest (SUSE Linux Enterprise 8/9 (64-bit)), slesGuest (SUSE Linux Enterprise 8/9 (32-bit)),
                sles11_64Guest (SUSE Linux Enterprise 11 (64-bit)), sles11Guest (SUSE Linux Enterprise 11 (32-bit)),
                sles10_64Guest (SUSE Linux Enterprise 10 (64-bit)), sles10Guest (SUSE Linux Enterprise 10 (32-bit)),
                rhel5_64Guest (Red Hat Enterprise Linux 5 (64-bit)), rhel5Guest (Red Hat Enterprise Linux 5 (32-bit)),
                rhel4_64Guest (Red Hat Enterprise Linux 4 (64-bit)), rhel4Guest (Red Hat Enterprise Linux 4 (32-bit)),
                rhel3_64Guest (Red Hat Enterprise Linux 3 (64-bit)), rhel3Guest (Red Hat Enterprise Linux 3 (32-bit)),
                rhel2Guest (Red Hat Enterprise Linux 2.1), otherLinux64Guest (Other Linux (64-bit)),
                otherLinuxGuest (Other Linux (32-bit)), oesGuest (Novell Open Enterprise Server)
            status: '- (v3.8+) The vApp status as a numeric code.'
            status_text: '- (v3.8+) The vApp status as text.'
            storage_profile: (Optional; v2.6+) Storage profile to override the default one
            template_name: '- (Deprecated; v2.9+) Use vapp_template_id instead. The name of the vApp Template to use'
            thin_provisioned: '- (v2.7+) Specifies whether the disk storage is pre-allocated or allocated on demand.'
            type: '(Required) Network type, one of: none, vapp or org. none creates a NIC with no network attached. vapp requires name of existing vApp network (created with vcd_vapp_network). org requires attached vApp Org network name (attached with vcd_vapp_org_network).'
            unit_number: '- (Required) Unit number (slot) on the bus specified by BusNumber.'
            user_access: '- (Required) User access level for this metadata entry. One of: PRIVATE (hidden), READONLY (read only), READWRITE (read/write).'
            value: '- (Required) Value of this metadata entry.'
            vapp_name: '- (Required) The vApp this VM belongs to.'
            vapp_template_id: '- (Optional; v3.8+) The URN of the vApp Template to use. You can fetch it using a vcd_catalog_vapp_template data source.'
            vdc: '- (Optional; v2.0+) The name of VDC to use, optional if defined at provider level'
            vm_name_in_template: '- (Optional; v2.9+) The name of the VM in vApp Template to use. For cases when vApp template has more than one VM.'
            vm_type: (3.2+) - type of the VM (either vcd_vapp_vm or vcd_vm).
            windows9Server64Guest: |-
                (Microsoft Windows Server 2016 (64-bit)), windows9_64Guest (Microsoft Windows 10 (64-bit)),
                windows9Guest (Microsoft Windows 10 (32-bit)), windows8Server64Guest (Microsoft Windows Server 2012 (64-bit)),
                windows8_64Guest (Microsoft Windows 8.x (64-bit)), windows8Guest (Microsoft Windows 8.x (32-bit)), win98Guest (Microsoft Windows 98),
                win95Guest (Microsoft Windows 95), win31Guest (Microsoft Windows 3.1), dosGuest (Microsoft MS-DOS),
                winXPPro64Guest (Microsoft Windows XP Professional (64-bit)), winXPProGuest (Microsoft Windows XP Professional (32-bit)),
                winVista64Guest (Microsoft Windows Vista (64-bit)), winVistaGuest (Microsoft Windows Vista (32-bit)),
                windows7Server64Guest (Microsoft Windows Server 2008 R2 (64-bit)), winLonghorn64Guest (Microsoft Windows Server 2008 (64-bit)),
                winLonghornGuest (Microsoft Windows Server 2008 (32-bit)), winNetWebGuest (Microsoft Windows Server 2003 Web Edition (32-bit)),
                winNetStandard64Guest (Microsoft Windows Server 2003 Standard (64-bit)),
                winNetStandardGuest (Microsoft Windows Server 2003 Standard (32-bit)),
                winNetDatacenter64Guest (Microsoft Windows Server 2003 Datacenter (64-bit)),
                winNetDatacenterGuest (Microsoft Windows Server 2003 Datacenter (32-bit)), winNetEnterprise64Guest (Microsoft Windows Server 2003 (64-bit)),
                winNetEnterpriseGuest (Microsoft Windows Server 2003 (32-bit)), winNTGuest (Microsoft Windows NT),
                windows7_64Guest (Microsoft Windows 7 (64-bit)), windows7Guest (Microsoft Windows 7 (32-bit)), win2000ServGuest (Microsoft Windows 2000 Server),
                win2000ProGuest (Microsoft Windows 2000 Professional), win2000AdvServGuest (Microsoft Windows 2000),
                winNetBusinessGuest (Microsoft Small Business Server 2003)
        importStatements: []
    vcd_vdc_group:
        subCategory: ""
        description: Provides a VDC group resource.
        name: vcd_vdc_group
        title: vcd_vdc_group
        examples:
            - name: new-vdc-group
              manifest: |-
                {
                  "default_policy_status": true,
                  "description": "my description",
                  "dfw_enabled": true,
                  "name": "newVdcGroup",
                  "org": "myOrg",
                  "participating_vdc_ids": [
                    "${data.vcd_org_vdc.startVdc.id}",
                    "${data.vcd_org_vdc.additionalVdc.id}"
                  ],
                  "starting_vdc_id": "${data.vcd_org_vdc.startVdc.id}"
                }
              references:
                starting_vdc_id: data.vcd_org_vdc.startVdc.id
        argumentDocs:
            default_policy_status: '- (Optional) Whether this security policy is enabled. dfw_enabled must be true.'
            description: '- (Optional) VDC group description'
            dfw_enabled: '- (Optional) Whether Distributed Firewall is enabled for this VDC group.'
            error_message: '- More detailed error message when VDC group has error status'
            fault_domain_tag: '- Represents the fault domain of a given organization VDC.'
            id: '- The VDC group ID'
            is_remote_org: '- Specifies whether the VDC is local to this VCD site.'
            local_egress: '- Status whether local egress is enabled for a universal router belonging to a universal VDC group.'
            name: '- (Required) The name for VDC group'
            network_pool_id: '- ID of used network pool.'
            network_pool_universal_id: '- The network provider’s universal id that is backing the universal network pool.'
            network_provider_scope: '- Specifies the network provider scope of the VDC.'
            network_provider_type: '- Defines the networking provider backing the VDC group.'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations'
            org_id: '- Organization ID.'
            org_name: '- Organization name.'
            participating_org_vdcs: '- A list of blocks providing organization VDCs that are participating in this group details. See Participating Org VDCs below for details.'
            participating_vdc_ids: '- (Required) The list of organization VDCs that are participating in this group. Note: starting_vdc_id isn''t automatically included in this list.'
            site_id: '- Site ID.'
            site_name: '- Site name.'
            starting_vdc_id: '- (Required) With selecting a starting VDC you will be able to create a group in which this VDC can participate. Note: starting_vdc_id must be included in participating_vdc_ids to participate in this group.'
            status: '- The status that the group can be in (e.g. ''SAVING'', ''SAVED'', ''CONFIGURING'', ''REALIZED'', ''REALIZATION_FAILED'', ''DELETING'', ''DELETE_FAILED'', ''OBJECT_NOT_FOUND'', ''UNCONFIGURED'').'
            type: '- Defines the group as LOCAL or UNIVERSAL.'
            universal_networking_enabled: '- True means that a VDC group router has been created.'
            vdc_id: '- VDC ID.'
            vdc_name: '- VDC name.'
        importStatements: []
    vcd_vm:
        subCategory: ""
        description: Provides a VMware Cloud Director standalone VM resource. This can be used to create, modify, and delete Standalone VMs.
        name: vcd_vm
        title: vcd_vm
        examples:
            - name: TestVm
              manifest: |-
                {
                  "cpus": 2,
                  "memory": 2048,
                  "name": "TestVm",
                  "network": [
                    {
                      "ip_allocation_mode": "POOL",
                      "name": "net-datacloud-r",
                      "type": "org"
                    }
                  ],
                  "vapp_template_id": "${data.vcd_catalog_vapp_template.photon-hw11.id}"
                }
              references:
                vapp_template_id: data.vcd_catalog_vapp_template.photon-hw11.id
            - name: TestVm
              manifest: |-
                {
                  "name": "TestVm",
                  "org": "datacloud",
                  "vdc": "vdc-datacloud"
                }
        argumentDocs:
            org-name.vdc-name.vapp-name.vm-name: |-
                , for a standalone VM you can use org-name.vdc-name.vm-name. If you know the vApp
                name (as retrieved through a data source, for example), you can safely use it in the path, as if it were a vcd_vapp_vm.
            vapp_name: |-
                is populated
                with the hidden vApp name, and readable in Terraform state.
        importStatements: []
    vcd_vm_affinity_rule:
        subCategory: ""
        description: Provides a VMware Cloud Director VM affinity rule resource. This can be used to create, modify, and delete VM affinity and anti-affinity rules.
        name: vcd_vm_affinity_rule
        title: vcd_vm_affinity_rule
        examples:
            - name: Test_VmAffinityRule1
              manifest: |-
                {
                  "enabled": true,
                  "name": "Test_VmAffinityRule1",
                  "polarity": "Affinity",
                  "required": true,
                  "vm_ids": [
                    "${data.vcd_vapp_vm.Test_EmptyVm1a.id}",
                    "${data.vcd_vapp_vm.Test_EmptyVm1b.id}",
                    "${data.vcd_vapp_vm.Test_EmptyVm1c.id}"
                  ]
                }
            - name: tf-myar
              manifest: '{}'
        argumentDocs:
            enabled: (Optional) True if this affinity rule is enabled. The default is true
            name: |-
                - (Required) The name of VM affinity rule. Duplicates are allowed, although the name can be used to retrieve
                the rule (as data source or when importing) only if it is unique.
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations'
            polarity: |-
                - (Required) One of Affinity or Anti-Affinity. This property cannot be changed. Once created, if we
                need to change polarity, we need to remove the rule and create a new one.
            required: |-
                (Optional) True if this affinity rule is required. When a rule is mandatory, a host failover will not
                power on the VM if doing so would violate the rule. The default is true
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level'
            vm_ids: (Required) A set of virtual machine IDs that compose this rule. At least 2 IDs must be provided.
        importStatements: []
    vcd_vm_internal_disk:
        subCategory: ""
        description: Provides a VMware Cloud Director VM internal disk resource. This can be used to create and delete VM internal disks.
        name: vcd_vm_internal_disk
        title: vcd_vm_internal_disk
        examples:
            - name: disk1
              manifest: |-
                {
                  "allow_vm_reboot": true,
                  "bus_number": 0,
                  "bus_type": "sata",
                  "depends_on": [
                    "vcd_vapp_vm.web1"
                  ],
                  "size_in_mb": "13333",
                  "storage_profile": "Development",
                  "unit_number": 1,
                  "vapp_name": "my-vapp",
                  "vm_name": "my-vm1"
                }
            - name: tf-myInternalDisk
              manifest: |-
                {
                  "org": "my-org",
                  "vapp_name": "my-vapp",
                  "vdc": "my-vdc",
                  "vm_name": "my-vm"
                }
        argumentDocs:
            allow_vm_reboot: '- (Optional) Powers off VM when changing any attribute of an IDE disk or unit/bus number of other disk types, after the change is complete VM is powered back on. Without this setting enabled, such changes on a powered-on VM would fail. Defaults to false.'
            bus_number: '- (Required) The number of the SCSI or IDE controller itself.'
            bus_type: |-
                - (Required) The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI),
                sas(LSI Logic SAS (SCSI)), paravirtual(Paravirtual (SCSI)), sata, nvme. Note nvme requires v3.4.0+ and
                VCD 10.2.1+
            iops: '- (Optional) Specifies the IOPS for the disk. Default is 0.'
            org: '- (Optional) The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations'
            size_in_mb: '- (Required) The size of the disk in MB.'
            storage_profile: '- (Optional) Storage profile which overrides the VM default one.'
            thin_provisioned: '- Specifies whether the disk storage is pre-allocated or allocated on demand.'
            unit_number: '- (Required) The device number on the SCSI or IDE controller of the disk.'
            vapp_name: '- (Required) The vAPP this VM internal disk belongs to.'
            vdc: '- (Optional) The name of VDC to use, optional if defined at provider level'
            vm_name: '- (Required) VM in vAPP in which internal disk is created.'
        importStatements:
            - |-
              $ terraform import vcd_vm_internal_disk.imported list@org-name.vdc-name.vapp-name.vm-name
              vcd_vm_internal_disk.imported: Importing from ID "list@org-name.vdc-name.vapp-name.vm-name"...
              Retrieving all disks
              No	ID	    BusType		BusNumber	UnitNumber	Size	StoragePofile	Iops	ThinProvisioned
              --	--	    -------		---------	----------	----	-------------	----	---------------
              1	2000	paravirtual	0		    0		    16384	*               0	    true
              2	3001	ide	     	0		    1		    17384	*               0	    true
              3	16000	sata		0		    0		    18384	*               0	    true
              4	16001	sata		0		    1		    13333	Development     0	    true

              Error: resource was not imported! resource id must be specified in one of these formats:
              'org-name.vdc-name.vapp-name.vm-name.my-internal-disk-id' to import by rule id
              'list@org-name.vdc-name.vapp-name.vm-name' to get a list of internal disks with their IDs
            - $ terraform import vcd_vm_internal_disk.imported org-name.vdc-name.vapp-name.vm-name.3001
    vcd_vm_placement_policy:
        subCategory: ""
        description: Provides a VMware Cloud Director VM Placement Policy resource. This can be used to create, modify, and delete VM Placement Policies.
        name: vcd_vm_placement_policy
        title: vcd_vm_placement_policy
        examples:
            - name: test-placement-pol
              manifest: |-
                {
                  "description": "My awesome VM Placement Policy",
                  "name": "my-placement-pol",
                  "provider_vdc_id": "${data.vcd_provider_vdc.pvdc.id}",
                  "vm_group_ids": [
                    "${data.vcd_vm_group.vm-group.id}"
                  ]
                }
              references:
                provider_vdc_id: data.vcd_provider_vdc.pvdc.id
        argumentDocs:
            description: '- (Optional) description of VM Placement Policy.'
            logical_vm_group_ids: '- (Optional) IDs of one or more Logical VM Groups to define this VM Placement policy. There is an AND relationship among all the entries set in this attribute. Note: Either vm_group_ids or logical_vm_group_ids must be set.'
            name: '- (Required) The name of VM Placement Policy.'
            provider_vdc_id: '- (Required) The ID of the Provider VDC to which this VM Placement Policy belongs.'
            vm_group_ids: '- (Optional) IDs of the collection of VMs with similar host requirements. Note: Either vm_group_ids or logical_vm_group_ids must be set.'
        importStatements:
            - $ terraform import vcd_vm_placement_policy.imported urn:vcloud:vdcComputePolicy:446d623e-1eec-4c8c-8a14-2f7e6086546b
    vcd_vm_sizing_policy:
        subCategory: ""
        description: Provides a VMware Cloud Director VM sizing policy resource. This can be used to create, modify, and delete VM sizing policy.
        name: vcd_vm_sizing_policy
        title: vcd_vm_sizing_policy
        examples:
            - name: minSize
              manifest: |-
                {
                  "cpu": [
                    {
                      "cores_per_socket": "3",
                      "count": "9",
                      "limit_in_mhz": "2400",
                      "reservation_guarantee": "0.55",
                      "shares": "886",
                      "speed_in_mhz": "2500"
                    }
                  ],
                  "description": "smallest size",
                  "memory": [
                    {
                      "limit_in_mb": "2800",
                      "reservation_guarantee": "0.3",
                      "shares": "1580",
                      "size_in_mb": "3200"
                    }
                  ],
                  "name": "min-size"
                }
        argumentDocs:
            cores_per_socket: '- (Optional) The number of cores per socket for a VM. This is a VM hardware configuration. The number of vCPUs that is defined in the VM sizing policy must be divisible by the number of cores per socket. If the number of vCPUs is not divisible by the number of cores per socket, the number of cores per socket becomes invalid.'
            count: '- (Required) Defines the number of vCPUs configured for a VM. This is a VM hardware configuration. When a tenant assigns the VM sizing policy to a VM, this count becomes the configured number of vCPUs for the VM.'
            cpu: '- (Optional) Configures cpu policy; see Cpu below for details.'
            description: '- (Optional) description of VM sizing policy.'
            limit_in_mb: '- (Optional) Defines the memory limit in MB for a VM. If not defined in the VM sizing policy, memory limit is equal to the allocated memory for the VM.'
            limit_in_mhz: '- (Optional) Defines the CPU limit in MHz for a VM. If not defined in the VDC compute policy, CPU limit is equal to the vCPU speed multiplied by the number of vCPUs.'
            memory: '- (Optional) Configures memory policy; see Memory below for details.'
            name: '- (Required) The name of VM sizing policy.'
            reservation_guarantee: '- (Optional) Defines how much of the CPU resources of a VM are reserved. The allocated CPU for a VM equals the number of vCPUs times the vCPU speed in MHz. The value of the attribute ranges between 0 and one. Value of 0 CPU reservation guarantee defines no CPU reservation. Value of 1 defines 100% of CPU reserved.'
            shares: '- (Optional) Defines the number of CPU shares for a VM. Shares specify the relative importance of a VM within a virtual data center. If a VM has twice as many shares of CPU as another VM, it is entitled to consume twice as much CPU when these two virtual machines are competing for resources. If not defined in the VDC compute policy, normal shares are applied to the VM.'
            size_in_mb: '- (Optional) Defines the memory configured for a VM in MB. This is a VM hardware configuration. When a tenant assigns the VM sizing policy to a VM, the VM receives the amount of memory defined by this attribute.'
            speed_in_mhz: '- (Optional) Defines the vCPU speed of a core in MHz.'
        importStatements:
            - $ terraform import vcd_vm_sizing_policy.imported urn:vcloud:vdcComputePolicy:446d623e-1eec-4c8c-8a14-2f7e6086546b
